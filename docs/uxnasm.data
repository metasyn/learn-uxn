
( 
	uxnasm projects/examples/demos/nametable.tal bin/nametable.rom 
	uxnemu bin/nametable.rom 
)

%+  { ADD } %-   { SUB }              %/   { DIV }  
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ } 
%++ { ADD2 } %-- { SUB2 }              %// { DIV2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }  

%2** { #10 SFT2 } %2// { #01 SFT2 }
%8** { #30 SFT2 } %8// { #03 SFT2 }
%10** { #40 SFT2 } %10// { #04 SFT2 }
%MOD2 { DIV2k MUL2 SUB2 }
%MOD { DIVk MUL SUB }
%RTN { JMP2r }

%WIDTH { #0037 }
%HEIGHT { #0029 } ( 08cf )
%LENGTH { WIDTH HEIGHT MUL2 10** }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto $1 &pad   $1 &x      $2 &y      $2 &addr $2 &pixel  $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel  $1 ]
|a0 @File       [ &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2 ]

( variables )

|0000

( program )

@tiles-frame
	&x $2 &y $2
@nametable-frame
	&x $2 &y $2
@buffer $10

|0100 ( -> )

	( theme ) 
	#34cd .System/r DEO2 
	#28ac .System/g DEO2 
	#297b .System/b DEO2

	WIDTH 8** #0010 ++ .Screen/width DEO2
	#01e8 .Screen/height DEO2

	#0008 .tiles-frame/x STZ2
	HEIGHT 8** #0008 ++ .tiles-frame/y STZ2
	#0008 .nametable-frame/x STZ2 
	#0008 .nametable-frame/y STZ2

	;input-name 
		DUP2 ,load JSR
		;assoc JSR2 

	;draw-tiles JSR2
	;draw-nametable JSR2
	;draw-short JSR2

BRK

@load ( filename* -- )

	LIT2r 0000
	.File/name DEO2
	&stream
		#0010 .File/length DEO2
		;buffer 
			DUP2 .File/read DEO2
			,find-tile JSR #ffff !! ,&skip JCN
				;buffer ;add-tile JSR2
				&skip
		INC2r
		.File/success DEI2 #0000 !! ,&stream JCN
	STH2r #0001 -- ;result/tiles STA2

RTN

@find-tile ( addr* -- addr* )

	STH2
	;result/length LDA2 #0000
	&loop
		DUP2 10** ;result/data ++ STH2kr ;tiles-equal JSR2 #00 = ,&continue JCN
			NIP2 POP2r RTN
			&continue
		INC2 GTH2k ,&loop JCN
	POP2 POP2 POP2r
	( default ) #ffff

RTN

@tiles-equal ( a* b* -- bool )

	STH2
	DUP2 #0010 ++ SWP2
	&loop
		LDAk LDAkr STHr = ,&continue JCN
			POP2 POP2 POP2r #00 RTN
			&continue
		INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2 POP2r #01

RTN

@add-tile ( addr* -- addr* )

	STH2
	#0010 #0000
	&loop
		( addr* ) DUP2 ;result/length LDA2 10** ;result/data ++ ++
		( data ) OVR2 STH2kr ++ LDA
		( order ) ROT ROT STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r
	( incr ) ;result/length LDA2 INC2 ;result/length STA2

RTN

@assoc ( -- length )

	LIT2r 0000
	.File/name DEO2
	&stream
		#0010 .File/length DEO2
		;buffer 
			DUP2 .File/read DEO2
			;find-tile JSR2 STH2kr SWP2 ;set-tile JSR2
		INC2r
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r

RTN

( draw )

@draw-tiles ( -- )

	.tiles-frame/x LDZ2 .Screen/x DEO2
	.tiles-frame/y LDZ2 .Screen/y DEO2
	;result/data .Screen/addr DEO2

	( width ) LITr 00
	( auto x addr ) #05 .Screen/auto DEO
	;result/data ;result/length LDA2 10** ++ ;result/data
	&loop
		STHkr WIDTH NIP MOD ,&continue JCN
			.tiles-frame/x LDZ2 .Screen/x DEO2
			.Screen/y DEI2 #0008 ++ .Screen/y DEO2
			POPr LITr 00
			&continue
		INCr
		#81 .Screen/sprite DEO
		#0010 ++ GTH2k ,&loop JCN
	POP2 POP2
	( auto none ) #00 .Screen/auto DEO
	POPr

RTN

@set-tile ( id* addr* -- )

	SWP2 2** ;result/data ++ ;result/length LDA2 10** ++ STA2

RTN

@get-tile ( id* -- addr* )

	2** ;result/length LDA2 10** ;result/data ++ ++ LDA2

RTN

@draw-nametable ( -- )

	;result/tiles LDA2 #0000
	&loop
		DUP2 WIDTH MOD2 8** .nametable-frame/x LDZ2 ++ .Screen/x DEO2
		DUP2 WIDTH DIV2 8** .nametable-frame/y LDZ2 ++ .Screen/y DEO2
		DUP2 ;get-tile JSR2 10** ;result/data ++ .Screen/addr DEO2
		#81 .Screen/sprite DEO
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@draw-short ( -- )

	#0008 .Screen/x DEO2
	#0008 .Screen/y DEO2
	#01 .Screen/auto DEO
		;result/length LDA2 SWP 
		( high ) ,&draw-byte JSR
		( low ) ,&draw-byte JSR
	#05 .Screen/auto DEO

RTN

	&draw-byte ( byte -- )
		DUP
		( high ) #04 SFT ,&draw-char JSR
		( low ) #0f AND ,&draw-char JSR
		RTN
	&draw-char ( num -- )
		#30 SFT #00 SWP ;font-hex ADD2 .Screen/addr DEO2
		#01 .Screen/sprite DEO
		RTN

@input-name "projects/pictures/bulma37x29.chr $1

@font-hex ( 0-F )
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080

@result
	&length $2
	&tiles $2
	&data
( a blank file )

%+  { ADD } %-   { SUB }              %/   { DIV }  
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ } 
%++ { ADD2 } %-- { SUB2 }              %// { DIV2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }  

%2*  { #10 SFT } %2/  { #01 SFT }
%4*  { #20 SFT } %4/  { #02 SFT }
%8*  { #30 SFT } %8/  { #03 SFT }
%10* { #40 SFT } %10/ { #04 SFT }
%20* { #50 SFT } %20/ { #05 SFT }

%2**  { #10 SFT2 } %2//  { #01 SFT2 }
%4**  { #20 SFT2 } %4//  { #02 SFT2 }
%8**  { #30 SFT2 } %8//  { #03 SFT2 }
%10** { #40 SFT2 } %10// { #04 SFT2 }
%20** { #50 SFT2 } %20// { #05 SFT2 }

%RELEASE-MOUSE { #0096 DEO }
%AUTO-X { #01 .Screen/auto DEO }
%AUTO-X-ADDR { #05 .Screen/auto DEO }
%AUTO-NONE { #00 .Screen/auto DEO }

%RTN { JMP2r }
%TOS { #00 SWP }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto  $1 &pad    $1 &x      $2 &y      $2 &addr $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel  $1 ]
|a0 @File       [ &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

@a-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@b-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@input
	&a $1 &b $1
@pointer
	&x $2 &y $2

( program )

|0100 ( -> )

	( theme ) 
	#0fe7 .System/r DEO2 
	#0fce .System/g DEO2 
	#0f2c .System/b DEO2

	;on-mouse   .Mouse/vector DEO2

	.Screen/width DEI2 2// 
		DUP2 #0040 -- .a-frame/x STZ2 DUP2 #0040 ++ .a-frame/x2 STZ2
		DUP2 #0040 -- .b-frame/x STZ2 #0040 ++ .b-frame/x2 STZ2

	.Screen/height DEI2 2// #0020 --
		DUP2 #0010 -- .a-frame/y STZ2 DUP2 #0000 ++ .a-frame/y2 STZ2
		DUP2 .b-frame/y STZ2 #0010 ++ .b-frame/y2 STZ2

	;redraw JSR2

BRK

@on-mouse ( -> )

	;draw-cursor JSR2 
	
	.Mouse/state DEI #00 ! JMP [ BRK ]

	.Mouse/x DEI2 .Mouse/y DEI2 .a-frame ;within-rect JSR2 
		;on-touch-a JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .b-frame ;within-rect JSR2 
		;on-touch-b JCN2

BRK

@on-touch-a ( -> )

	.Mouse/x DEI2 .a-frame/x LDZ2 -- 
	10// NIP #07 SWP - STH

	.input/a LDZ 
		#01 [ STHr #40 SFT ] SFT EOR 
		.input/a STZ

	;redraw JSR2
	RELEASE-MOUSE

BRK

@on-touch-b ( -> )

	.Mouse/x DEI2 .b-frame/x LDZ2 -- 
	10// NIP #07 SWP - STH

	.input/b LDZ 
		#01 [ STHr #40 SFT ] SFT EOR 
		.input/b STZ

	;redraw JSR2
	RELEASE-MOUSE

BRK

@redraw ( -- )

	.a-frame/x LDZ2  .Screen/x DEO2
	.a-frame/y LDZ2  .Screen/y DEO2
	.input/a LDZ #01 ;draw-byte JSR2

	.b-frame/x LDZ2 .Screen/x DEO2
	.b-frame/y LDZ2 .Screen/y DEO2
	.input/b LDZ #01 ;draw-byte JSR2

	.b-frame/x LDZ2 .Screen/x DEO2
	.Screen/y DEI2 #000d ++ .Screen/y DEO2
	.input LDZ2 AND #03 ;draw-byte JSR2

	.b-frame/x LDZ2 .Screen/x DEO2
	.Screen/y DEI2 #000d ++ .Screen/y DEO2
	.input LDZ2 ORA #03 ;draw-byte JSR2

	.b-frame/x LDZ2 .Screen/x DEO2
	.Screen/y DEI2 #000d ++ .Screen/y DEO2
	.input LDZ2 EOR #03 ;draw-byte JSR2

	( labels )
	AUTO-X-ADDR
	.b-frame/x LDZ2 #0020 -- .Screen/x DEO2
	;names-icn/and .Screen/addr DEO2
	.b-frame/y2 LDZ2 #0004 ++ .Screen/y DEO2
	,&draw-label JSR
	.b-frame/y2 LDZ2 #0014 ++ .Screen/y DEO2
	,&draw-label JSR
	.b-frame/y2 LDZ2 #0024 ++ .Screen/y DEO2
	,&draw-label JSR
	AUTO-NONE

RTN
	&draw-label
		.b-frame/x LDZ2 #0020 -- .Screen/x DEO2 
		#03 .Screen/sprite DEOk DEOk DEO
	RTN

@draw-byte ( value -- )

	STH STH
	#0800
	&loop
		DUP #07 SWP -
		STHkr SWP SFT #01 AND OVRr STHr ;draw-bit JSR2
		INC GTHk ,&loop JCN
	POP2
	.Screen/y DEI2 #0003 ++ .Screen/y DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	STHr ;draw-hex JSR2
	POPr

RTN

@draw-bit ( value color -- )

	STH STH

	AUTO-X-ADDR
	;button-icns/off [ #00 STHkr 20* ++ ] .Screen/addr DEO2
	OVRr STHr .Screen/sprite DEO
	OVRr STHr .Screen/sprite DEO
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2
	.Screen/x DEI2 #0010 -- .Screen/x DEO2
	OVRr STHr .Screen/sprite DEO
	OVRr STHr .Screen/sprite DEO
	AUTO-NONE
	.Screen/y DEI2 #0008 -- .Screen/y DEO2

	POPr POPr

RTN

@draw-hex ( value -- )

	AUTO-X
	DUP #04 SFT ,&draw JSR
	#0f AND ,&draw JSR
	AUTO-X

RTN
	&draw
		TOS 8** ;font-hex ++ .Screen/addr DEO2
		( draw ) #01 .Screen/sprite DEO
	RTN

@draw-cursor ( -- )
	
	( clear last cursor )
	;cursor .Screen/addr DEO2 
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO
	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2  
	( colorize on state )
	#42 [ .Mouse/state DEI #00 ! ] + .Screen/sprite DEO

RTN

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 LTH2 ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 GTH2 ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 LTH2 ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 GTH2 ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@cursor 
	80c0 e0f0 f8e0 1000 

@button-icns
	&off
	3f40 8080 8080 8080
	f804 0202 0202 0202
	8080 8080 8040 3f00
	0202 0202 0204 f800
	&on
	3f40 9fbf bfbf bfbf
	f804 f2fa fafa fafa
	bfbf bfbf 9f40 3f00
	fafa fafa f204 f800

@names-icn
	&and
	fc02 027e 8286 fa00
	bcc2 8282 8282 8200
	fc82 8282 8282 fc00
	&ora
	7c82 8282 8282 7c00
	fc82 82fc 8282 8200
	fc02 027e 8286 fa00
	&eor
	8282 4438 4482 8200
	7c82 8282 8282 7c00
	fc82 82fc 8282 8200

@font-hex ( 0-F )
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080

( polycat )

%2// { #01 SFT2 }
%!~  { NEQk NIP }
%AUTO-XADDR  { #05 .Screen/auto DEO }

( devices )

|00 @System     &vector $2 &wst      $1 &rst    $1 &pad    $4 &r      $2 &g       $2 &b       $2 &debug  $1 &halt $1
|20 @Screen     &vector $2 &width    $2 &height $2 &auto   $1 &pad    $1 &x       $2 &y       $2 &addr   $2 &pixel  $1 &sprite $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state  $1 &pad    $3 &scrollx $2 &scrolly $2

( variables )

|0000

@cat     
	&x $2 &y $2 &timer $1
@pointer 
	&x $2 &y $2

( program )

|0100 ( -> )
	
	( theme ) 
	#0a3f .System/r DEO2 
	#05df .System/g DEO2 
	#0caf .System/b DEO2
	( DOS resolution )
	#0140 .Screen/width DEO2
	#00c8 .Screen/height DEO2
	( vectors )
	;on-mouse .Mouse/vector DEO2
	( find center )
	.Screen/width DEI2 2// .cat/x STZ2
	.Screen/height DEI2 2// .cat/y STZ2
	( set screen mode )
	AUTO-XADDR
	( init )
	#ff ;draw-eye/last STA
	#ff ;draw-tail/last STA
	,draw-polycat JSR
	,draw-ground JSR

BRK

@draw-ground ( -- )

	.cat/y LDZ2 #0018 ADD2 .Screen/y DEO2
	.cat/x LDZ2 #0010 SUB2 .Screen/x DEO2
	;ground .Screen/addr DEO2
	#1000 
	&loop
		#01 .Screen/sprite DEO
		INC GTHk ,&loop JCN
	POP2

JMP2r

@draw-polycat ( -- )

	( ears )
	.cat/y LDZ2 .Screen/y DEO2
	.cat/x LDZ2 #0008 SUB2 .Screen/x DEO2
	;ears .Screen/addr DEO2
	#81 .Screen/sprite DEOk DEO
	( body )
	.cat/y LDZ2 #0010 ADD2 .Screen/y DEO2
	.cat/x LDZ2 #0008 SUB2 .Screen/x DEO2
	;body .Screen/addr DEO2
	#81 .Screen/sprite DEO
	( eye/tail )
	#00 ,draw-eye JSR
	#00 ,draw-tail JSR

JMP2r

@on-mouse ( -> )
	
	.Mouse/x DEI2 .cat/x LDZ2 GTH2 #50 SFT
	.Mouse/y DEI2 .cat/y LDZ2 GTH2 #60 SFT
		ADD ,draw-eye JSR
	.cat/timer LDZ INC [ DUP ] .cat/timer STZ
		#04 SFT ,draw-tail JSR
	,draw-cursor JSR

BRK

@draw-eye ( quad -- )
	
	DUP ,&last LDR NEQ ,&changed JCN
		POP JMP2r &changed
	( only redraw on change )
	DUP 
	#00 SWP ;eye ADD2 .Screen/addr DEO2
	.cat/y LDZ2 #0008 ADD2 .Screen/y DEO2
	.cat/x LDZ2 #0008 SUB2 .Screen/x DEO2
	#81 .Screen/sprite DEOk DEO
	,&last STR

JMP2r
	&last $1

@draw-tail ( frame -- )

	DUP ,&last LDR NEQ ,&changed JCN
		POP JMP2r &changed
	( only redraw on change )
	DUP 
	;frames ROT #00 SWP ADD2 LDA 
	#00 SWP #40 SFT2 ;body/tail ADD2 
		.Screen/addr DEO2
	.cat/x LDZ2 .Screen/x DEO2
	.cat/y LDZ2 #0010 ADD2 .Screen/y DEO2
	#81 .Screen/sprite DEO
	,&last STR

JMP2r
	&last $1

@draw-cursor ( -- )
	
	( last cursor )
	;cursor STH2k .Screen/addr DEO2 
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO
	( new cursor )
	STH2r .Screen/addr DEO2 
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2 
	#41 .Mouse/state DEI #00 NEQ ADD .Screen/sprite DEO

JMP2r

@cursor 
	80c0 e0f0 f8e0 1000 
@frames
	00 01 02 03 02 01 00 00
	00 00 00 00 00 00 00 00
@ears 
	081c 3e3e 7f7f ffff 081c 3e3e 7f7f fffc
	081c 3c3e 7e7e ffff 081c 3c3e 7e7e ff1f 
@eye 
	ffff ffff ff7f 3f0f f7ef cfe7 f07c 3f0f
	ffff ffff fffe fcf0 87c3 c183 071e fcf0
	ffff ffff ff7f 3f0f f0e1 c1e0 f07c 3f0f
	ffff ffff fffe fcf0 f7fb f9f3 071e fcf0
	ffff ffff ff7f 3f0f f0e7 cfef f77c 3f0f
	ffff ffff fffe fcf0 0783 c1c3 871e fcf0
	ffff ffff ff7f 3f0f f0e0 c1e1 f07c 3f0f
	ffff ffff fffe fcf0 07f3 f9fb f71e fcf0
@body 
	0707 0707 0302 0200 0107 0707 0300 0000
	&tail
	e0f0 f0e0 e080 8000 c0f2 f9f9 fef8 b000
	e0f0 f0e0 e080 8000 c0f2 f9f9 fef8 b000
	e0f0 f0e0 e080 8000 c0f2 faf9 fef8 b000
	e0f0 f0e0 e080 8000 c0f1 faf9 fef8 b000
	0707 0707 0f08 1000 0307 0707 0f00 0000
	e0e0 e0e0 e080 8000 f2f9 f9fe b884 8400 
@ground 
	bf00 5c02 0202 020c ef10 6f90 8080 8074
	ff00 fe01 0100 0116 fd00 3c40 4040 4028 
( dev/audio )

%MOD { DUP2 DIV MUL SUB }

( devices )

|00 @System     [ &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y    $2 &addr  $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]

( variables )

|0000

@timer    $1
@counter  $1

|0100 ( -> )
	
	( theme )
	#00ff .System/r DEO2 
	#0f0f .System/g DEO2 
	#0ff0 .System/b DEO2 

	( vectors )
	;on-frame .Screen/vector DEO2

	( setup synth )
	#1202 .Audio0/adsr DEO2
	;saw .Audio0/addr DEO2
	#0100 .Audio0/length DEO2
	#88 .Audio0/volume DEO

	#0101 .Audio1/adsr DEO2
	;tri .Audio1/addr DEO2
	#0100 .Audio1/length DEO2
	#88 .Audio1/volume DEO

	#0112 .Audio2/adsr DEO2
	;sin .Audio2/addr DEO2
	#0100 .Audio2/length DEO2
	#88 .Audio2/volume DEO

	#0022 .Audio3/adsr DEO2
	;piano .Audio3/addr DEO2
	#0100 .Audio3/length DEO2
	#88 .Audio3/volume DEO

BRK

@on-frame ( -> )

	( incr ) .timer LDZ INC .timer STZ 
	( skip ) .timer LDZ #10 EQU #01 JCN [ BRK ]

	( get note )
	.counter LDZ #18 MOD #30 ADD 
		.Audio0/pitch .counter LDZ #03 AND #40 SFT ADD DEO

	.counter LDZ INC .counter STZ
	#00 .timer STZ

BRK

@saw 
	0003 0609 0c0f 1215 181b 1e21 2427 2a2d
	3033 3639 3b3e 4143 4649 4b4e 5052 5557
	595b 5e60 6264 6667 696b 6c6e 7071 7274
	7576 7778 797a 7b7b 7c7d 7d7e 7e7e 7e7e
	7f7e 7e7e 7e7e 7d7d 7c7b 7b7a 7978 7776
	7574 7271 706e 6c6b 6967 6664 6260 5e5b
	5957 5552 504e 4b49 4643 413e 3b39 3633
	302d 2a27 2421 1e1b 1815 120f 0c09 0603
	00fd faf7 f4f1 eeeb e8e5 e2df dcd9 d6d3
	d0cd cac7 c5c2 bfbd bab7 b5b2 b0ae aba9
	a7a5 a2a0 9e9c 9a99 9795 9492 908f 8e8c
	8b8a 8988 8786 8585 8483 8382 8282 8282
	8182 8282 8282 8383 8485 8586 8788 898a
	8b8c 8e8f 9092 9495 9799 9a9c 9ea0 a2a5
	a7a9 abae b0b2 b5b7 babd bfc2 c5c7 cacd
	d0d3 d6d9 dcdf e2e5 e8eb eef1 f4f7 fafd 
@tri
	8082 8486 888a 8c8e 9092 9496 989a 9c9e
	a0a2 a4a6 a8aa acae b0b2 b4b6 b8ba bcbe
	c0c2 c4c6 c8ca ccce d0d2 d4d6 d8da dcde
	e0e2 e4e6 e8ea ecee f0f2 f4f6 f8fa fcfe
	fffd fbf9 f7f5 f3f1 efed ebe9 e7e5 e3e1
	dfdd dbd9 d7d5 d3d1 cfcd cbc9 c7c5 c3c1
	bfbd bbb9 b7b5 b3b1 afad aba9 a7a5 a3a1
	9f9d 9b99 9795 9391 8f8d 8b89 8785 8381
	7f7d 7b79 7775 7371 6f6d 6b69 6765 6361
	5f5d 5b59 5755 5351 4f4d 4b49 4745 4341
	3f3d 3b39 3735 3331 2f2d 2b29 2725 2321
	1f1d 1b19 1715 1311 0f0d 0b09 0705 0301
	0103 0507 090b 0d0f 1113 1517 191b 1d1f
	2123 2527 292b 2d2f 3133 3537 393b 3d3f
	4143 4547 494b 4d4f 5153 5557 595b 5d5f
	6163 6567 696b 6d6f 7173 7577 797b 7d7f
@sin
	8083 8689 8c8f 9295 989b 9ea1 a4a7 aaad
	b0b3 b6b9 bbbe c1c3 c6c9 cbce d0d2 d5d7
	d9db dee0 e2e4 e6e7 e9eb ecee f0f1 f2f4
	f5f6 f7f8 f9fa fbfb fcfd fdfe fefe fefe
	fffe fefe fefe fdfd fcfb fbfa f9f8 f7f6
	f5f4 f2f1 f0ee eceb e9e7 e6e4 e2e0 dedb
	d9d7 d5d2 d0ce cbc9 c6c3 c1be bbb9 b6b3
	b0ad aaa7 a4a1 9e9b 9895 928f 8c89 8683
	807d 7a77 7471 6e6b 6865 625f 5c59 5653
	504d 4a47 4542 3f3d 3a37 3532 302e 2b29
	2725 2220 1e1c 1a19 1715 1412 100f 0e0c
	0b0a 0908 0706 0505 0403 0302 0202 0202
	0102 0202 0202 0303 0405 0506 0708 090a
	0b0c 0e0f 1012 1415 1719 1a1c 1e20 2225
	2729 2b2e 3032 3537 3a3d 3f42 4547 4a4d
	5053 5659 5c5f 6265 686b 6e71 7477 7a7d
@piano
	8182 8588 8d91 959b a1a6 aaad b2b5 b8bd
	c1c7 cbd0 d5d9 dde1 e5e5 e4e4 e1dc d7d1
	cbc5 bfb8 b2ac a6a2 9c97 928d 8884 807c
	7977 7574 7372 7272 7273 7372 706d 6964
	605b 5650 4d49 4643 4342 4244 4548 4a4d
	5052 5556 5758 5554 5150 4c4a 4744 423f
	3d3c 3a38 3835 3431 3030 2f31 3336 393e
	4449 4e54 5a60 666b 7175 7b82 8990 989e
	a6ab b1b6 babd bebf bfbe bbb9 b6b3 b0ae
	aaa8 a6a3 a19e 9c9a 9997 9696 9798 9b9e
	a1a4 a6a9 a9ac adad adae aeaf b0b0 b1b1
	b3b3 b4b4 b4b3 b3b1 b0ad abab a9a9 a8a8
	a7a5 a19d 9891 8b84 7e77 726e 6b6b 6b6c
	6f71 7477 7776 7370 6c65 5e56 4e48 423f
	3d3c 3b3a 3a39 3838 3839 393a 3c3e 4146
	4a50 575b 6064 686a 6e70 7274 7677 7a7d

@melody [ 
	54 52 54 4f 4b 4f 48 ff
	54 52 54 4f 4b 4f 48 ff
	54 56 57 56 57 54 56 54 
	56 52 54 52 54 50 54 ff ] 
( devices )

|00 @System     &vector $2 &wst      $1 &rst    $1 &eaddr  $2 &ecode  $1 &pad     $1 &r       $2 &g      $2 &b     $2 &debug  $1 &halt $1
|10 @Console    &vector $2 &read     $1 &pad    $5 &write  $1 &error  $1

( program )

|0100 @Reset ( -> )
	~projects/library/debugger.tal
	#0123 #4567 #89ab #cdef
	LIT2r 1234 LIT2r 5678 LIT2r 9abc LIT2r def0
	( BREAKPOINT )
	( LIT2r 0000 DIVr )
	&loop INCk ,&loop JMP
	BRK

( Dev/File )

%8+ { #0008 ADD2 }
%MEMORY { #1000 }

( devices )

|00 @System     [ &vector $2 &pad    $6 &r      $2 &g     $2 &b      $2 ]
|10 @Console    [ &pad    $8 &write  $1 ]
|20 @Screen     [ &vector $2 &width  $2 &height $2 &pad   $2 &x      $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|a0 @File       [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( variables )

|0000

( init )

|0100 ( -> )

	( theme )
	#0efc .System/r DEO2
	#03cc .System/g DEO2
	#03ac .System/b DEO2

	( load file )
	#1000    .File/length DEO2
	;srcpath .File/name DEO2
	MEMORY   .File/read DEO2

	.File/success DEI2 ORA ;on-success JCN2

	;failedtxt ;print-string JSR2

BRK

@on-success ( -> )
	
	;successtxt ;print-string JSR2

	( draw image )
	MEMORY .Screen/addr DEO2
	#0000 #0080
	&ver
		( save ) OVR2 .Screen/y DEO2
		#0000 #0080
		&hor
			( save ) OVR2 .Screen/x DEO2
			( draw ) #81 .Screen/sprite DEO
			( incr ) .Screen/addr DEI2 #0010 ADD2 .Screen/addr DEO2
			( incr ) SWP2 8+ SWP2
			LTH2k ,&hor JCN
		POP2 POP2
		( incr ) SWP2 8+ SWP2
		LTH2k ,&ver JCN
	POP2 POP2
	
	( save file )
	#1000    .File/length DEO2
	;dstpath .File/name DEO2
	MEMORY   .File/write DEO2

BRK

@print-string ( ptr* -- )
	LDAk DUP ,&keep-going JCN
	POP POP2 JMP2r

	&keep-going
	.Console/write DEO
	INC2
	,print-string JMP

@successtxt "Success! 09 $1
@failedtxt  "Failed. 09 $1

@srcpath    "projects/pictures/ako10x10.chr $1
@dstpath    "bin/image-copy.chr $1
( GUI Shapes )

%RTN { JMP2r }
%8++  { #0008 ADD2 }
%2** { #10 SFT2 }
%4** { #20 SFT2 }
%2// { #01 SFT2 }
%4// { #02 SFT2 }
%ABS2 { DUP2 #0f SFT2 EQU #05 JCN #0000 SWP2 SUB2 }
%LTS2  { #8000 ADD2 SWP2 #8000 ADD2 GTH2 }
%GTS2  { #8000 ADD2 SWP2 #8000 ADD2 LTH2 }

%SIZE-TO-RECT {
	STH2 STH2 OVR2 STH2r ADD2 OVR2 STH2r ADD2
} ( x y w h -- x1 y1 x2 y2 )

%WIDTH { #0100 } %HEIGHT { #00a0 }

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]

( variables )

|0000

( draw requirements )
@color [ &byte $1 ]

@rect [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@line [ &x0 $2 &y0 $2 &x $2 &y $2 &sx $2 &sy $2 &dx $2 &dy $2 &e1 $2 &e2 $2 ]
@circle [ &xc $2 &yc $2 &x $2 &y $2 &r $2 &d $2 ]

( program )

|0100
	
	( theme ) 
	#f0ff .System/r DEO2 
	#f03c .System/g DEO2 
	#f03f .System/b DEO2

	( background ) ;checker_icn #03 ;cover-pattern JSR2

	.Screen/width DEI2 2// WIDTH 2// SUB2 #0008 ADD2
	.Screen/height DEI2 2// HEIGHT 2// SUB2 #0008 ADD2
	WIDTH HEIGHT
	SIZE-TO-RECT #02 ;fill-rect JSR2

	.Screen/width DEI2 2// WIDTH 2// SUB2
	.Screen/height DEI2 2// HEIGHT 2// SUB2
	WIDTH HEIGHT
	SIZE-TO-RECT #01 ;fill-rect JSR2

	.Screen/width DEI2 2// WIDTH 2// SUB2  #0008 ADD2
	.Screen/height DEI2 2// HEIGHT 2// SUB2  #0008 ADD2
	WIDTH #0010 SUB2 HEIGHT #0010 SUB2
	SIZE-TO-RECT #03 ;line-rect JSR2

	.Screen/width DEI2 2// .Screen/height DEI2 2// WIDTH 4// #02 ;draw-circle JSR2

	#0010 #0030 #0068 #02 ;line-hor JSR2
	#0020 #0058 #0078 #02 ;line-ver JSR2
	
BRK

@line-slow ( x1 y1 x2 y2 color -- )
	
	( load ) .color STZ #0001 SUB2 .line/y0 STZ2 #0001 SUB2 .line/x0 STZ2 .line/y STZ2 .line/x STZ2
	.line/x0 LDZ2 .line/x LDZ2 SUB2 ABS2 .line/dx STZ2
	.line/y0 LDZ2 .line/y LDZ2 SUB2 ABS2 #0000 SWP2 SUB2 .line/dy STZ2
	#ffff #00 .line/x LDZ2 .line/x0 LDZ2 LTS2 2** ADD2 .line/sx STZ2
	#ffff #00 .line/y LDZ2 .line/y0 LDZ2 LTS2 2** ADD2 .line/sy STZ2
	.line/dx LDZ2 .line/dy LDZ2 ADD2 .line/e1 STZ2
	&loop
		.line/x LDZ2 .Screen/x DEO2 .line/y LDZ2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.line/x LDZ2 .line/x0 LDZ2 EQU2 .line/y LDZ2 .line/y0 LDZ2 EQU2 #0101 EQU2 ,&end JCN
		.line/e1 LDZ2 2** .line/e2 STZ2
		.line/e2 LDZ2 .line/dy LDZ2 LTS2 ,&skipy JCN
			.line/e1 LDZ2 .line/dy LDZ2 ADD2 .line/e1 STZ2
			.line/x LDZ2 .line/sx LDZ2 ADD2 .line/x STZ2
		&skipy
		.line/e2 LDZ2 .line/dx LDZ2 GTS2 ,&skipx JCN
			.line/e1 LDZ2 .line/dx LDZ2 ADD2 .line/e1 STZ2
			.line/y LDZ2 .line/sy LDZ2 ADD2 .line/y STZ2
		&skipx
		;&loop JMP2

	&end

RTN

@line-rect ( x1* y1* x2* y2* color -- )

	( load ) STH
	STH2k ,&y2 STR2 ,&x2 STR2 
	STH2k ,&y1 STR2 ,&x1 STR2
	STH2r STH2r SWP2
	&ver
		( save ) DUP2 .Screen/y DEO2
		( draw ) ,&x1 LDR2 .Screen/x DEO2 STHkr .Screen/pixel DEO
		( draw ) ,&x2 LDR2 .Screen/x DEO2 STHkr .Screen/pixel DEO
		( incr ) INC2
		OVR2 OVR2 GTS2 ,&ver JCN
	POP2 POP2
	,&x1 LDR2 ,&x2 LDR2 SWP2
	&hor
		( save ) DUP2 .Screen/x DEO2
		( draw ) ,&y1 LDR2 .Screen/y DEO2 STHkr .Screen/pixel DEO
		( draw ) ,&y2 LDR2 .Screen/y DEO2 STHkr .Screen/pixel DEO
		( incr ) INC2
		OVR2 INC2 OVR2 GTS2 ,&hor JCN
	POP2 POP2 POPr

RTN
	&x1 $2 &y1 $2 &x2 $2 &y2 $2 

@fill-rect ( x1* y1* x2* y2* color -- )
	
	,&color STR
	( x1 x2 y1 y2 ) ROT2
	&ver
		( save ) DUP2 .Screen/y DEO2
		STH2 STH2 OVR2 OVR2 SWP2
		&hor
			( save ) DUP2 .Screen/x DEO2
			( draw ) ,&color LDR .Screen/pixel DEO
			( incr ) INC2
			OVR2 OVR2 GTS2 ,&hor JCN
		POP2 POP2 STH2r STH2r
		( incr ) INC2
		OVR2 OVR2 GTS2 ,&ver JCN
	POP2 POP2 POP2 POP2

RTN
	&color $1

@draw-circle ( xc yc r color -- )

	( load ) .color STZ .circle/r STZ2 .circle/yc STZ2 .circle/xc STZ2
	#0000 .circle/x STZ2 .circle/r LDZ2 .circle/y STZ2
	.circle/r LDZ2 2** .circle/d STZ2
	( draw ) ;&seg JSR2
	&loop
		( incr ) .circle/x LDZ2 INC2 .circle/x STZ2
		.circle/d LDZ2 #0001 LTS2 ,&else JCN
			( decr ) .circle/y LDZ2 #0001 SUB2 .circle/y STZ2
			.circle/x LDZ2 .circle/y LDZ2 SUB2 4** .circle/d LDZ2 ADD2 .circle/d STZ2
			;&end JMP2
		&else
			.circle/x LDZ2 4** .circle/d LDZ2 ADD2 .circle/d STZ2
		&end
		( draw ) ;&seg JSR2
		.circle/y LDZ2 .circle/x LDZ2 #0001 SUB2 GTS2 ,&loop JCN
	RTN
	&seg
		.circle/xc LDZ2 .circle/x LDZ2 ADD2 .Screen/x DEO2 .circle/yc LDZ2 .circle/y LDZ2 ADD2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/x LDZ2 SUB2 .Screen/x DEO2 .circle/yc LDZ2 .circle/y LDZ2 ADD2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/x LDZ2 ADD2 .Screen/x DEO2 .circle/yc LDZ2 .circle/y LDZ2 SUB2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/x LDZ2 SUB2 .Screen/x DEO2 .circle/yc LDZ2 .circle/y LDZ2 SUB2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/y LDZ2 ADD2 .Screen/x DEO2 .circle/yc LDZ2 .circle/x LDZ2 ADD2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/y LDZ2 SUB2 .Screen/x DEO2 .circle/yc LDZ2 .circle/x LDZ2 ADD2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/y LDZ2 ADD2 .Screen/x DEO2 .circle/yc LDZ2 .circle/x LDZ2 SUB2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.circle/xc LDZ2 .circle/y LDZ2 SUB2 .Screen/x DEO2 .circle/yc LDZ2 .circle/x LDZ2 SUB2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO

RTN

@cover-pattern ( addr* color -- )
	
	( load ) STH .Screen/addr DEO2
	.Screen/height DEI2 #0000
	&ver
		( save ) DUP2 .Screen/y DEO2
		.Screen/width DEI2 #0000
		&hor
			( save ) DUP2 .Screen/x DEO2
			( draw ) STHkr .Screen/sprite DEO
			#0008 ADD2 GTH2k ,&hor JCN
		POP2 POP2
		#0008 ADD2 GTH2k ,&ver JCN
	POP2 POP2
	POPr

RTN

@line-hor ( x0* x1* y* color -- )
	
	STH .Screen/y DEO2
	SWP2
	&loop
		( save ) DUP2 .Screen/x DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@line-ver ( x* y0* y1* color -- )
	
	STH ROT2 .Screen/x DEO2
	SWP2
	&loop
		( save ) DUP2 .Screen/y DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@checker_icn [ f0f0 f0f0 0f0f 0f0f ]
( drum rack )

%+  { ADD } %-   { SUB }  %*  { MUL } %/   { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%2** { #10 SFT2 } %2// { #01 SFT2 }
%4** { #20 SFT2 } %4// { #02 SFT2 }
%8** { #30 SFT2 } %8// { #03 SFT2 }
%10** { #40 SFT2 }

%TOB { NIP } %TOS { #00 SWP }
%RTN { JMP2r }
%MOD { DUP2 / * - }
%LTS2  { #8000 ++ SWP2 #8000 ++ >> } %GTS2  { #8000 ++ SWP2 #8000 ++ << }

%PAD-WIDTH { #0030 }
%PAD-HEIGHT { #0020 }

( devices )

|00 @System     [ &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y     $2 &addr   $2 &pixel  $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|70 @Midi       [ &vector $2 &channel  $1 &note   $1 &velocity $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel $1 ]
|a0 @File       [ &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( variables )

|0000

@center   [ &x $2 &y $2 ]
@pointer  [ &x $2 &y $2 ]
@piano    [ &last $1 &octave $1 ]
@pads     [ &last $1 ]
@frame    [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@pad-view [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@mix-view [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@oct-view [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@wav-view [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]

( TODO: remove )
@color $1
@rect        [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]

@modes [ $1 $1 $1 $1 ] ( single/repeat )

( program )

|0100 ( -> )
	
	( theme ) 
	#0fe5 .System/r DEO2 
	#0fc5 .System/g DEO2 
	#0f25 .System/b DEO2

	( vectors )
	;on-control .Controller/vector DEO2
	;on-mouse   .Mouse/vector DEO2
	;on-frame   .Screen/vector DEO2
	;on-message .Console/vector DEO2

	( channel defaults )
	#dd   .Audio0/volume DEO 
	#0118 .Audio0/adsr DEO2
	#0200 .Audio0/length DEO2
	#ce   .Audio1/volume DEO 
	#0334 .Audio1/adsr DEO2
	#0800 .Audio1/length DEO2
	#ec   .Audio2/volume DEO 
	#0414 .Audio2/adsr DEO2
	#0800 .Audio2/length DEO2
	#ee   .Audio3/volume DEO 
	#022c .Audio3/adsr DEO2
	#1000 .Audio3/length DEO2

	( defaults )
	#01 .modes STZ
	#01 .piano/octave STZ

	( find center )
	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	( place frame )
	.center/x LDZ2 PAD-WIDTH #0003 ** -- #0010 -- .frame/x1 STZ2
	.center/y LDZ2 #0050 -- .frame/y1 STZ2
	.center/x LDZ2 PAD-WIDTH #0003 ** ++ #0010 ++ .frame/x2 STZ2
	.frame/y1 LDZ2 PAD-HEIGHT 4** ++ #0028 ++ .frame/y2 STZ2

	( place pad-view )
	.frame/x1 LDZ2 .pad-view/x1 STZ2
	.frame/y1 LDZ2 .pad-view/y1 STZ2
	.pad-view/x1 LDZ2 #0004 PAD-WIDTH ** ++ .pad-view/x2 STZ2
	.pad-view/y1 LDZ2 #0004 PAD-HEIGHT ** ++ .pad-view/y2 STZ2

	( place mix-view )
	.pad-view/x2 LDZ2 #0006 ++ .mix-view/x1 STZ2
	.pad-view/y1 LDZ2 .mix-view/y1 STZ2
	.mix-view/x1 LDZ2 #007a ++ .mix-view/x2 STZ2
	.pad-view/y2 LDZ2 .mix-view/y2 STZ2

	( place oct-view )
	.frame/x1 LDZ2 .oct-view/x1 STZ2
	.mix-view/y2 LDZ2 #0004 ++ .oct-view/y1 STZ2
	.oct-view/x1 LDZ2 #0050 ++ .oct-view/x2 STZ2
	.oct-view/y1 LDZ2 #0018 ++ .oct-view/y2 STZ2

	( place wav-view )
	.oct-view/x2 LDZ2 .wav-view/x1 STZ2
	.mix-view/y2 LDZ2 #0004 ++ .wav-view/y1 STZ2
	.frame/x2 LDZ2 .wav-view/x2 STZ2
	.wav-view/y1 LDZ2 #0020 ++ .wav-view/y2 STZ2

	( draw outlines )
	.mix-view/x1 LDZ2 #0004 -- 
	.mix-view/y1 LDZ2 #0000 -- 
	.mix-view/x2 LDZ2 #0002 --
	.mix-view/y2 LDZ2 #0002 --
	#01 ;line-rect JSR2
	.wav-view/x1 LDZ2 #0000 -- 
	.wav-view/y1 LDZ2 #0002 -- 
	.wav-view/x2 LDZ2 #0002 --
	.wav-view/y2 LDZ2 #0002 ++
	#01 ;line-rect JSR2

	( initial draw )
	#00 #10
	&draw-pads
		( load sample )
		OVR TOS #0019 ** ;pad-path ++ .File/name DEO2
		OVR #04 / #40 SFT .Audio0/length + DEI2 .File/length DEO2
		OVR TOS 2** ;pad-addr ++ LDA2 .File/read DEO2
		( draw pad )
		OVR #01 ;draw-pad JSR2
		( draw mixer )
		OVR #04 / ;draw-mixer JSR2
		( incr ) SWP INC SWP
		LTHk ,&draw-pads JCN
	POP2

	;draw-octave JSR2

BRK

@on-message ( -> )
	
	.Console/read DEI #0f AND ;play-pad JSR2

BRK

@on-frame ( -> )
	
	( update VU monitors )
	#00 #04
	&loop
		OVR STH
		( x ) .mix-view/x1 LDZ2 #0074 ++
		( y ) .mix-view/y1 LDZ2 PAD-HEIGHT STHkr TOS ** ++ #0002 ++
		( output ) .Audio0/output STHr #40 SFT + DEI 
		;draw-monitor JSR2
		( incr ) SWP INC SWP
		LTHk ,&loop JCN
	POP2

BRK

@on-mouse ( -> )

	;draw-cursor JSR2 

	.Mouse/state DEI #00 ! #01 JCN [ BRK ]

	.Mouse/x DEI2 DUP2 .pad-view/x1 LDZ2 >> ROT ROT .pad-view/x2 LDZ2 INC2 << #0101 ==
	.Mouse/y DEI2 DUP2 .pad-view/y1 LDZ2 >> ROT ROT .pad-view/y2 LDZ2 << #0101 ==
	#0101 == ;on-touch-pad JCN2

	.Mouse/x DEI2 DUP2 .mix-view/x1 LDZ2 >> ROT ROT .mix-view/x2 LDZ2 INC2 << #0101 ==
	.Mouse/y DEI2 DUP2 .mix-view/y1 LDZ2 >> ROT ROT .mix-view/y2 LDZ2 << #0101 ==
	#0101 == ;on-touch-mix JCN2

	.Mouse/x DEI2 DUP2 .oct-view/x1 LDZ2 >> ROT ROT .oct-view/x2 LDZ2 INC2 << #0101 ==
	.Mouse/y DEI2 DUP2 .oct-view/y1 LDZ2 >> ROT ROT .oct-view/y2 LDZ2 << #0101 ==
	#0101 == ;on-touch-oct JCN2

BRK

@on-control ( -> )

	.Controller/key DEI #00 ! #01 JCN [ BRK ]

	.Controller/key DEI 
	DUP #31 ! ,&no-0 JCN #00 ;play-pad JSR2 &no-0
	DUP #32 ! ,&no-1 JCN #01 ;play-pad JSR2 &no-1
	DUP #33 ! ,&no-2 JCN #02 ;play-pad JSR2 &no-2
	DUP #34 ! ,&no-3 JCN #03 ;play-pad JSR2 &no-3
	DUP #71 ! ,&no-4 JCN #04 ;play-pad JSR2 &no-4
	DUP #77 ! ,&no-5 JCN #05 ;play-pad JSR2 &no-5
	DUP #65 ! ,&no-6 JCN #06 ;play-pad JSR2 &no-6
	DUP #72 ! ,&no-7 JCN #07 ;play-pad JSR2 &no-7
	DUP #61 ! ,&no-8 JCN #08 ;play-pad JSR2 &no-8
	DUP #73 ! ,&no-9 JCN #09 ;play-pad JSR2 &no-9
	DUP #64 ! ,&no-a JCN #0a ;play-pad JSR2 &no-a
	DUP #66 ! ,&no-b JCN #0b ;play-pad JSR2 &no-b
	DUP #7a ! ,&no-c JCN #0c ;play-pad JSR2 &no-c
	DUP #78 ! ,&no-d JCN #0d ;play-pad JSR2 &no-d
	DUP #63 ! ,&no-e JCN #0e ;play-pad JSR2 &no-e
	DUP #76 ! ,&no-f JCN #0f ;play-pad JSR2 &no-f
	POP

BRK

@on-touch-pad ( -> )
	
	( x ) .Mouse/x DEI2 .pad-view/x1 LDZ2 -- PAD-WIDTH // TOB
	( y ) .Mouse/y DEI2 .pad-view/y1 LDZ2 -- PAD-HEIGHT // TOB #20 SFT +
	
	DUP SWP ;play-pad JSR2

	;draw-waveform JSR2

	( release ) #00 .Mouse/state DEO

BRK

@on-touch-mix ( -> )

	( channel ) .Mouse/y DEI2 .mix-view/y1 LDZ2 -- PAD-HEIGHT // TOB STH
	( knob ) .Mouse/x DEI2 .mix-view/x1 LDZ2 -- #0010 // TOB
	( adsr )
	DUP #00 ! ,&no-a JCN
		.Audio0/adsr [ STHkr #40 SFT + ] DEI
		#10 .Mouse/state DEI #10 = #e0 * + +
		.Audio0/adsr [ STHkr #40 SFT + ] DEO &no-a
	DUP #01 ! ,&no-d JCN
		.Audio0/adsr [ STHkr #40 SFT + ] DEI
		DUP #f0 AND STH #01 .Mouse/state DEI #10 = #0e * + + #0f AND STHr +
		.Audio0/adsr [ STHkr #40 SFT + ] DEO &no-d
	DUP #02 ! ,&no-s JCN
		.Audio0/adsr [ STHkr #40 SFT + ] INC DEI
		#10 .Mouse/state DEI #10 = #e0 * + +
		.Audio0/adsr [ STHkr #40 SFT + ] INC DEO &no-s
	DUP #03 ! ,&no-r JCN
		.Audio0/adsr [ STHkr #40 SFT + ] INC DEI
		DUP #f0 AND STH #01 .Mouse/state DEI #10 = #0e * + + #0f AND STHr +
		.Audio0/adsr [ STHkr #40 SFT + ] INC DEO &no-r
	( modes )
	DUP #04 ! ,&no-repeat JCN
		.modes [ STHkr + ] LDZ 
		#00 =
		.modes [ STHkr + ] STZ &no-repeat
	( volume )
	DUP #05 ! ,&no-left JCN
		.Audio0/volume [ STHkr #40 SFT + ] DEI 
		#10 .Mouse/state DEI #10 = #e0 * + +
		.Audio0/volume [ STHkr #40 SFT + ] DEO &no-left
	DUP #06 ! ,&no-right JCN
		.Audio0/volume [ STHkr #40 SFT + ] DEI
		DUP #f0 AND STH #01 .Mouse/state DEI #10 = #0e * + + #0f AND STHr +
		.Audio0/volume [ STHkr #40 SFT + ] DEO &no-right
	POP

	( release ) #00 .Mouse/state DEO

	STHkr ;draw-mixer JSR2

	POPr

BRK

@on-touch-oct ( -> )
	
	.Mouse/x DEI2 .oct-view/x1 LDZ2 -- 8// TOB #08 ! ,&no-mod JCN
		.Mouse/y DEI2 .oct-view/y1 LDZ2 -- 8// TOB 
		DUP #00 ! ,&no-incr JCN
			.piano/octave LDZ INC .piano/octave STZ &no-incr
		DUP #02 ! ,&no-decr JCN
			.piano/octave LDZ #01 - .piano/octave STZ &no-decr
		POP
		( release ) #00 .Mouse/state DEO
		;draw-octave JSR2
		BRK
	&no-mod

	.Mouse/x DEI2 .oct-view/x1 LDZ2 -- 8// TOB #06 GTH ,&no-key JCN
		.Mouse/x DEI2 .oct-view/x1 LDZ2 -- 8// 
		( set pitch of pad )
		DUP2 ;notes ++ LDA .pads/last LDZ SWP .piano/octave LDZ #02 - #0c * + 
		( save ) SWP TOS ;pad-pitch ++ STA 
		( record last note )
		TOB .piano/last STZ 
		.pads/last LDZ ;play-pad JSR2
		( release ) #00 .Mouse/state DEO
		;draw-octave JSR2
	&no-key

BRK

@play-pad ( pad -- )

	( unselect last )
	.pads/last LDZ #01 ;draw-pad JSR2
	DUP .pads/last STZ 
	( highlight )
	DUP #02 ;draw-pad JSR2
	( addr )
	DUP TOS 2** ;pad-addr ++ LDA2 STH2
	DUP #04 / #40 SFT .Audio0/addr + STH2r ROT DEO2
	( pitch )
	DUP TOS ;pad-pitch ++ LDA STH 
	DUP #04 / .modes + LDZ #00 = #70 SFT STH ADDr
	DUP #04 / #40 SFT .Audio0/pitch + STHr SWP DEO
	#04 / ;draw-mixer JSR2

RTN

@draw-waveform ( pad -- )
	
	( stash address )
	DUP ADD #00 SWP ;pad-addr ++ LDA2 STH2

	( clear )
	.wav-view/x1 LDZ2 #0002 ++
	.wav-view/y1 LDZ2
	.wav-view/x2 LDZ2 #0002 --
	.wav-view/y2 LDZ2
	#00 ;fill-rect JSR2

	.wav-view/x1 LDZ2 #0002 ++ .Screen/x DEO2

	( waveform )
	#00 #e8
	&loop
		( dotted line )
		OVR #01 AND ,&no-dot JCN 
			.wav-view/y1 LDZ2 #0010 ++ .Screen/y DEO2
			#01 .Screen/pixel DEO
		&no-dot
		OVR TOS 10** [ DUP2r STH2r ] ++ LDA 
		#02 /
		TOS 4// .wav-view/y1 LDZ2 ++ .Screen/y DEO2
		.Screen/x DEI2 INC2 .Screen/x DEO2
		( draw ) #02 .Screen/pixel DEO
		( incr ) SWP INC SWP
		LTHk ,&loop JCN
	POP2
	POP2r

RTN

@draw-mixer ( mixer -- )

	STHk #00 SWP PAD-HEIGHT ** .mix-view/y1 LDZ2 ++ #0003 ++

	( adsr )
	DUP2 .mix-view/x1 LDZ2 SWP2
		.Audio0/adsr [ STHkr #40 SFT + ] DEI #04 SFT ;draw-knob JSR2
	DUP2 .mix-view/x1 LDZ2 #0010 ++ SWP2
		.Audio0/adsr [ STHkr #40 SFT + ] DEI #0f AND ;draw-knob JSR2
	DUP2 .mix-view/x1 LDZ2 #0020 ++ SWP2
		.Audio0/adsr [ STHkr #40 SFT + ] INC DEI #04 SFT ;draw-knob JSR2
	DUP2 .mix-view/x1 LDZ2 #0030 ++ SWP2
		.Audio0/adsr [ STHkr #40 SFT + ] INC DEI #0f AND ;draw-knob JSR2
	( once/repeat )
	DUP2 .mix-view/x1 LDZ2 #0040 ++ SWP2
		.modes [ STHkr + ] LDZ ;draw-switch JSR2
	( volume )
	DUP2 .mix-view/x1 LDZ2 #0050 ++ SWP2
		.Audio0/volume [ STHkr #40 SFT + ] DEI #04 SFT ;draw-knob JSR2
	DUP2 .mix-view/x1 LDZ2 #0060 ++ SWP2
		.Audio0/volume [ STHkr #40 SFT + ] DEI #0f AND ;draw-knob JSR2
	POP2
	POPr

RTN

@draw-pad ( pad color -- )
	
	STH STH

	STHkr 

	DUP #04 / SWP #03 AND TOS PAD-WIDTH ** ( center ) .pad-view/x1 LDZ2 ++ 
	ROT TOS PAD-HEIGHT ** ( center ) .pad-view/y1 LDZ2 ++ 

	( draw outline )
	OVR2 OVR2 
	OVR2 PAD-WIDTH #0002 -- ++ 
	OVR2 PAD-HEIGHT #0002 -- ++ 
	OVRr STHr ;line-rect JSR2

	( draw name )
	OVR2 #0002 ++ 
	OVR2 #0002 ++ 
	;pad-name STHkr TOS #0005 ** ++ 
	#00 OVRr STHr + 
	;draw-label JSR2

	( draw note )
	OVR2 #0003 ++ .Screen/x DEO2
	DUP2 #0014 ++ .Screen/y DEO2
	( get pitch ) STHkr TOS ;pad-pitch ++ LDA
	#0c / TOS 8** ;font-hex ++ .Screen/addr DEO2
	#01 .Screen/sprite DEO

	( draw octave )
	OVR2 #000b ++ .Screen/x DEO2
	DUP2 #0014 ++ .Screen/y DEO2
	( get pitch ) STHkr TOS ;pad-pitch ++ LDA
	#0c MOD TOS 8** ;font-notes ++ .Screen/addr DEO2
	#01 .Screen/sprite DEO

	POP2 POP2

	POPr POPr

RTN

@draw-octave ( -- )
	
	.oct-view/x1 LDZ2 .oct-view/y1 LDZ2

	OVR2 OVR2 ;keys-left-icns #01 .piano/last LDZ #00 = + ;draw-key JSR2
	OVR2 #0008 ++ OVR2 ;keys-middle-icns #01 .piano/last LDZ #01 = + ;draw-key JSR2
	OVR2 #0010 ++ OVR2 ;keys-right-icns #01 .piano/last LDZ #02 = + ;draw-key JSR2
	OVR2 #0018 ++ OVR2 ;keys-left-icns #01 .piano/last LDZ #03 = + ;draw-key JSR2
	OVR2 #0020 ++ OVR2 ;keys-middle-icns #01 .piano/last LDZ #04 = + ;draw-key JSR2
	OVR2 #0028 ++ OVR2 ;keys-middle-icns #01 .piano/last LDZ #05 = + ;draw-key JSR2
	SWP2 #0030 ++ SWP2 ;keys-right-icns #01 .piano/last LDZ #06 = + ;draw-key JSR2

	.oct-view/x1 LDZ2 #0040 ++ .Screen/x DEO2

	;arrow-icns .Screen/addr DEO2
	.oct-view/y1 LDZ2 .Screen/y DEO2
	#01 .Screen/sprite DEO

	;arrow-icns #0008 ++ .Screen/addr DEO2
	.oct-view/y1 LDZ2 #0010 ++ .Screen/y DEO2
	#01 .Screen/sprite DEO

	;font-hex .piano/octave LDZ #03 + #00 SWP 8** ++ .Screen/addr DEO2
	.oct-view/y1 LDZ2 #0008 ++ .Screen/y DEO2
	#03 .Screen/sprite DEO

RTN

@draw-monitor ( x* y* stereo -- )

	STH 

	.Screen/y DEO2
	.Screen/x DEO2

	#00 #0f
	&loop
		OVR #10 SWP - STHkr #0f AND < INC .Screen/pixel DEO
		.Screen/x DEI2 #0002 ++ .Screen/x DEO2
		OVR #10 SWP - STHkr #04 SFT < INC .Screen/pixel DEO
		.Screen/x DEI2 #0002 -- .Screen/x DEO2
		.Screen/y DEI2 #0002 ++ .Screen/y DEO2
		( incr ) SWP INC SWP
		LTHk ,&loop JCN
	POP2

	POPr

RTN

@draw-key ( x* y* addr* color -- )
		
	STH
	.Screen/addr DEO2 
	SWP2 .Screen/x DEO2
	DUP2 #0018 ++
	&loop
		( move ) OVR2 .Screen/y DEO2
		( draw ) STHkr .Screen/sprite DEO
		( incr ) .Screen/addr DEI2 #0008 ++ .Screen/addr DEO2  
		( incr ) SWP2 #0008 ++ SWP2
		LTH2k ,&loop JCN
	POP2 POP2 
	POPr

RTN

@draw-cursor ( -- )
	
	( clear last cursor )
	;cursor-icn .Screen/addr DEO2 
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO
	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2 
	( colorize on state )
	#43 [ .Mouse/state DEI #00 ! ] - .Screen/sprite DEO

RTN

@draw-knob ( x* y* value -- )

	( load ) STH .Screen/y DEO2  .Screen/x DEO2
	;knob-icns .Screen/addr DEO2 
	( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2 
	;knob-icns #0008 ++ .Screen/addr DEO2 
	( draw ) #01 .Screen/sprite DEO
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2 
	;knob-icns #0018 ++ .Screen/addr DEO2 
	( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0008 -- .Screen/x DEO2 
	;knob-icns #0010 ++ .Screen/addr DEO2 
	( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0004 ++ .Screen/x DEO2
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2
	;font-hex #00 STHkr #30 SFT ++ .Screen/addr DEO2
	( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0004 -- #00 #00 STHkr ;knob-offsetx ++ LDA ++ .Screen/x DEO2
	.Screen/y DEI2 #0010 -- #00 #00 STHr ;knob-offsety ++ LDA ++ .Screen/y DEO2
	;knob-icns #0020 ++ .Screen/addr DEO2
	( draw ) #05 .Screen/sprite DEO

RTN

@draw-switch ( x* y* value -- )
	
	STH .Screen/y DEO2 .Screen/x DEO2
	STHkr #50 SFT #00 SWP ;switch-icns ++
	DUP2 .Screen/addr DEO2
	( draw ) #01 STHkr + .Screen/sprite DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	DUP2 #0008 ++ .Screen/addr DEO2
	( draw ) #01 STHkr + .Screen/sprite DEO
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2
	.Screen/x DEI2 #0008 -- .Screen/x DEO2
	DUP2 #0010 ++ .Screen/addr DEO2
	( draw ) #01 STHkr + .Screen/sprite DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	#0018 ++ .Screen/addr DEO2
	( draw ) #01 STHr + .Screen/sprite DEO

RTN

@line-rect ( x1* y1* x2* y2* color -- )

	( load ) .color STZ STH2k .rect/y2 STZ2 .rect/x2 STZ2 STH2k .rect/y1 STZ2 .rect/x1 STZ2
	STH2r INC2 STH2r
	&ver
		( save ) OVR2 .Screen/y DEO2
		( draw ) .rect/x1 LDZ2 .Screen/x DEO2 .color LDZ DUP .Screen/pixel DEO
		( draw ) .rect/x2 LDZ2 .Screen/x DEO2 .Screen/pixel DEO
		( incr ) SWP2 INC2 SWP2
		OVR2 OVR2 LTS2 ,&ver JCN
	POP2 POP2
	.rect/x1 LDZ2 INC2 .rect/x2 LDZ2 #0001 --
	&hor
		( save ) OVR2 .Screen/x DEO2
		( draw ) .rect/y1 LDZ2 .Screen/y DEO2 .color LDZ DUP .Screen/pixel DEO
		( draw ) .rect/y2 LDZ2 .Screen/y DEO2 .Screen/pixel DEO
		( incr ) SWP2 INC2 SWP2
		OVR2 OVR2 INC2 LTS2 ,&hor JCN
	POP2 POP2

RTN

@draw-label ( x* y* addr* color -- )
	
	( load ) STH STH2 .Screen/y DEO2 .Screen/x DEO2
	STH2r
	&loop
		LDAk #00 SWP #0030 -- 8** ;font-num-uc ++ .Screen/addr DEO2 
		( draw ) STHkr .Screen/sprite DEO
		( incr ) INC2
		( incr ) .Screen/x DEI2 #0008 ++ .Screen/x DEO2
		LDAk #00 ! ,&loop JCN
	POP2
	POPr

RTN

@fill-rect ( x1* y1* x2* y2* color -- )
	
	.color STZ
	( x1 x2 y1 y2 ) ROT2 SWP2
	&ver
		( save ) OVR2 .Screen/y DEO2
		STH2 STH2 OVR2 OVR2
		&hor
			( save ) OVR2 .Screen/x DEO2
			( draw ) .color LDZ .Screen/pixel DEO
			( incr ) SWP2 INC2 SWP2
			OVR2 OVR2 LTS2 ,&hor JCN
		POP2 POP2 STH2r STH2r
		( incr ) SWP2 INC2 SWP2
		OVR2 OVR2 LTS2 ,&ver JCN
	POP2 POP2 POP2 POP2

RTN

@pad-name [
	"PAD1 $1 "SYN1 $1 "SYN2 $1 "CYM1 $1 ( short )
	"HHAT $1 "OHAT $1 "CHAT $1 "RIDE $1
	"SID1 $1 "SNR1 $1 "SNR2 $1 "SID2 $1 ( long )
	"BDR1 $1 "KCK1 $1 "KCK2 $1 "SUB1 $1 ]

@pad-addr [
	6000 6400 6800 6c00
	7000 7800 8000 8800
	9000 9800 a000 a800
	b000 c000 d000 e000 $2 ]

@pad-pitch [
	30 30 30 30
	30 30 30 30
	30 30 30 30
	30 30 30 30 ]

@pad-path [
	"projects/sounds/pad1.pcm $1 "projects/sounds/syn1.pcm $1 "projects/sounds/syn2.pcm $1 "projects/sounds/pad2.pcm $1
	"projects/sounds/hhat.pcm $1 "projects/sounds/ohat.pcm $1 "projects/sounds/chat.pcm $1 "projects/sounds/ride.pcm $1
	"projects/sounds/sid1.pcm $1 "projects/sounds/snr1.pcm $1 "projects/sounds/snr2.pcm $1 "projects/sounds/sid2.pcm $1
	"projects/sounds/bdr1.pcm $1 "projects/sounds/kck1.pcm $1 "projects/sounds/kck2.pcm $1 "projects/sounds/sub1.pcm $1 ]

@notes [
	3c 3e 40 41 43 45 47
	48 4a 4c 4d 4f 51 53 ]

@cursor-icn [ 
	80c0 e0f0 f8e0 1000 ]

@keys-left-icns [
	7c7c 7c7c 7c7c 7c7c
	7c7c 7c7c 7c7c 7e7f
	7f7f 7f7f 7f7f 3e00 ]

@keys-middle-icns [
	1c1c 1c1c 1c1c 1c1c
	1c1c 1c1c 1c1c 3e7f
	7f7f 7f7f 7f7f 3e00 ]

@keys-right-icns [
	1f1f 1f1f 1f1f 1f1f
	1f1f 1f1f 1f1f 3f7f
	7f7f 7f7f 7f7f 3e00 ]

@arrow-icns [
	0010 387c fe10 1000
	0010 1010 fe7c 3810 ]

@switch-icns [
	001f 2040 4040 4040
	00f8 0402 0202 0202
	404f 5f5f 4f20 1f00
	02f2 fafa f204 f800
	001f 204f 5f5f 4f40
	00f8 04f2 fafa f202
	4040 4040 4020 1f00
	0202 0202 0204 f800 ]

@knob-icns [
	0003 0c10 2020 4040
	00c0 3008 0404 0202
	4040 2020 100c 0300
	0202 0404 0830 c000
	0000 183c 3c18 0000 ]

@knob-offsetx [
	01 00 00 00 00 01 02 03
	05 06 07 08 08 08 08 07 ]

@knob-offsety [
	07 06 05 03 02 01 00 00
	00 00 01 02 03 05 06 07 ]

@font-notes [
	003e 4140 4040 413e 40ae 4100 4040 413e
	007e 4141 4141 417e 40ae 4101 4141 417e
	003e 4140 7c40 413e 003f 4040 7e40 4040
	40af 4000 7e40 4040 003e 4140 5f41 413e
	40ae 4100 5f41 413e 003e 4141 7f41 4141
	40ae 4101 7f41 4141 007e 4141 7e41 417e
]

@font-hex ( 0-F )
[
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080
]

@font-num-uc [
	003e 4141 4141 413e 0018 0808 0808 081c 
	003e 4101 3e40 407f 003e 4101 1f01 413e 
	0011 2141 7f01 0101 007f 4040 7e01 413e 
	003e 4140 7e41 413e 003e 4101 0102 0408 
	003e 4141 3e41 413e 003e 4141 3f01 0102 
	0000 0800 0000 0800 0000 0800 0000 0800 
	0000 0800 0000 0810 0000 0408 1008 0400 
	0000 001c 001c 0000 0000 1008 0408 1000 
	0000 0000 0000 0000 003e 4101 3f41 413f 
	007e 4141 7e41 417e 003e 4140 4040 413e 
	007e 4141 4141 417e 007f 4040 7e40 407f 
	007f 4040 7e40 4040 003e 4140 5e41 413e 
	0041 4141 7f41 4141 0008 0808 0808 0808 
	007f 0101 0101 413e 0041 4244 7844 4241 
	0040 4040 4040 403f 0076 4949 4949 4949 
	005e 6141 4141 4141 003e 4141 4141 413e 
	007e 4141 7e40 4040 003e 4141 4145 423d 
	007e 4141 7e41 4141 003e 4140 3e01 413e 
	007f 0808 0808 0808 0041 4141 4141 433d 
	0041 4141 4122 1408 0049 4949 4949 4976 
	0041 2214 0814 2241 0041 4141 3f01 413e 
	007f 0101 3e40 407f ]
( simple Dev/File writing example )

( devices )

|00 @System     [ &vector $2 &pad    $6 &r      $2 &g     $2 &b      $2 ]
|a0 @File       [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( variables )

|0000

( init )

|0100 ( -> )
	;try-save JSR2
	BRK

@try-save ( -- )
	( save contents to file )
	;contents/end ;contents SUB2 .File/length DEO2
	;filename .File/name DEO2
	;contents .File/write DEO2

	.File/success DEI2 ORA ,&success JCN
	( failed to write: bright yellow background )
	#f0f7 .System/r DEO2
	#f0f7 .System/g DEO2
	#00f7 .System/b DEO2
	JMP2r

	&success
	( write successful: dark blue background )
	#00f7 .System/r DEO2
	#00f7 .System/g DEO2
	#40f7 .System/b DEO2
	JMP2r

@filename "hello.txt 00
@contents "Hello 20 "world, 0a "how 20 "are 20 "you? 0a
	&end

( dev/screen )

%RTN { JMP2r }
%2/  { #01 SFT }
%4/  { #02 SFT }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y     $2 &addr $2 &pixel $1 &sprite $1 ]

( variables )

|0000

@count $2
@center
	&x $2 &y $2

( init )

|0100 ( -> )
	
	( vector )
	;on-frame .Screen/vector DEO2

	( theme ) 
	#f07f .System/r DEO2
	#f0e0 .System/g DEO2 
	#f0c0 .System/b DEO2 

	( find screen center )
	.Screen/width DEI2 #01 SFT2 #0020 SUB2 .center/x STZ2
	.Screen/height DEI2 #01 SFT2 .center/y STZ2

	( draw )
	;draw-table JSR2
	;draw-sprites JSR2
	;draw-1bpp JSR2
	;draw-2bpp JSR2
	;draw-pixels JSR2
	
BRK

@on-frame ( -> )

	.count LDZ2 INC2 [ DUP2 ] .count STZ2
	
	.center/x LDZ2 #0048 ADD2 .Screen/x DEO2
	.center/y LDZ2 #0050 SUB2 .Screen/y DEO2

	( color ) #01 STH

	SWP 
	DUP #04 SFT [ #00 SWP ] #30 SFT2 ;font-hex ADD2 .Screen/addr DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND [ #00 SWP ] #30 SFT2 ;font-hex ADD2 .Screen/addr DEO2
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	DUP #04 SFT [ #00 SWP ] #30 SFT2 ;font-hex ADD2 .Screen/addr DEO2
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND [ #00 SWP ] #30 SFT2 ;font-hex ADD2 .Screen/addr DEO2
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
	( draw ) STHr .Screen/sprite DEO

BRK

@draw-table ( -- )
	
	#10 #00
	&loop
		DUP #30 SFT #00 SWP ;font-hex ADD2 .Screen/addr DEO2
		( x-axis ) 
		DUP #30 SFT #00 SWP 
		.center/x LDZ2 #0040 SUB2 ADD2 .Screen/x DEO2
		.center/y LDZ2 #0050 SUB2 .Screen/y DEO2
		( draw ) #01 .Screen/sprite DEO
		( y-axis )
		DUP #30 SFT #00 SWP 
		.center/y LDZ2 #0040 SUB2 ADD2 .Screen/y DEO2
		.center/x LDZ2 #0050 SUB2 .Screen/x DEO2
		( draw ) #01 .Screen/sprite DEO
		INC GTHk ,&loop JCN
	POP2

RTN

@draw-sprites ( -- )
	
	;preview_icn .Screen/addr DEO2
	#00 #00
	&loop
		( move ) DUP #0f AND #40 SFT 2/ #00 SWP 
			.center/x LDZ2 #0040 SUB2 ADD2 .Screen/x DEO2
		( move ) DUP #f0 AND 2/ #00 SWP 
			.center/y LDZ2 #0040 SUB2 ADD2 .Screen/y DEO2
		( draw ) DUP .Screen/sprite DEO
		INC NEQk ,&loop JCN
	POP2
	
RTN

@draw-1bpp ( -- )

	#10 #00
	&loop
		( color ) STHk
		( y ) DUP 4/ [ #00 SWP ] #40 SFT2
			[ .center/y LDZ2 #0040 SUB2 ADD2 ] STH2
		( x ) DUP #03 AND [ #00 SWP ] #40 SFT2 #0040 ADD2 
			[ .center/x LDZ2 #0008 ADD2 ADD2 ]
		STH2r STHr #00 ;draw-circle JSR2
		INC GTHk ,&loop JCN
	POP2
	
RTN

@draw-2bpp ( -- )

	#10 #00
	&loop
		( color ) STHk
		( y ) DUP 4/ [ #00 SWP ] #40 SFT2
			[ .center/y LDZ2 ADD2 ] STH2
		( x ) DUP #03 AND [ #00 SWP ] #40 SFT2 #0040 ADD2 
			[ .center/x LDZ2 #0008 ADD2 ADD2 ]
		STH2r STHr #80 ;draw-circle JSR2
		INC GTHk ,&loop JCN
	POP2
	
RTN

@draw-circle ( x* y* color depth -- )
	
	ADD STH
	;preview_icn .Screen/addr DEO2
	.Screen/y DEO2
	.Screen/x DEO2

	#00 STHkr ADD .Screen/sprite DEO
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
		#10 STHkr ADD .Screen/sprite DEO
	.Screen/x DEI2 #0008 SUB2 .Screen/x DEO2
	.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
		#20 STHkr ADD .Screen/sprite DEO
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
		#30 STHr ADD .Screen/sprite DEO

RTN

@draw-pixels ( -- )
	
	.center/y LDZ2 #0040 SUB2 .Screen/y DEO2
	.center/x LDZ2 #0048 ADD2 .Screen/x DEO2
		#00 .Screen/pixel DEO
	.center/x LDZ2 #0049 ADD2 .Screen/x DEO2
		#01 .Screen/pixel DEO
	.center/x LDZ2 #004a ADD2 .Screen/x DEO2
		#02 .Screen/pixel DEO
	.center/x LDZ2 #004b ADD2 .Screen/x DEO2
		#03 .Screen/pixel DEO

RTN

@preview_icn  [
	0f38 675f dfbf bfbf 0007 1820 2344 4848 

@font-hex 
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080
( 
	Bifurcan
	Every second, the Labyrinth reorganize itself to display the time. 
)

%RTN { JMP2r }
%MOD { DUP2 DIV MUL SUB }
%TOS { #00 SWP }
%2// { #01 SFT2 }
%8** { #30 SFT2 }

( devices )

|00 @System     [ &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr $2 &pixel $1 &sprite $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel  $1 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ] 

( variables )

|0000

@last  $1
@style $1
@pointer [ &x $2 &y $2 ]
@center  [ &x $2 &y $2 ]
@anchor  [ &x $2 &y $2 ]

( program )

|0100 ( -> )

	( theme ) 
	#0f3a .System/r DEO2 
	#0fda .System/g DEO2 
	#0faa .System/b DEO2

	( vectors )
	;on-frame .Screen/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-button .Controller/vector DEO2

	( find center )
	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	( background ) 
	;tiles ;cover-pattern JSR2
	;redraw JSR2

BRK

@on-frame ( -> )

	( only draw once per second )
	.DateTime/second DEI .last LDZ NEQ #01 JCN [ BRK ]

	.DateTime/second DEI .last STZ
	;redraw JSR2

BRK

@on-mouse ( -> )

	;draw-cursor JSR2

	.Mouse/state DEI #00 EQU ,&no-touch JCN
		( incr ) .style LDZ INC #03 MOD .style STZ
		( bg ) ;tiles .style LDZ #40 SFT TOS ADD2 ;cover-pattern JSR2
		( fg ) ;redraw JSR2
		( release ) #00 .Mouse/state DEO
	&no-touch

BRK 

@on-button ( -> )
	
	.Controller/button DEI #00 EQU ,&no-touch JCN
		( incr ) .style LDZ INC #03 MOD .style STZ
		( bg ) ;tiles .style LDZ #40 SFT TOS ADD2 ;cover-pattern JSR2
		( fg ) ;redraw JSR2
		( release ) #00 .Mouse/state DEO
	&no-touch
	
BRK

@redraw ( -- )
	
	( hrs )
	[ .center/x LDZ2 #0018 SUB2 ] 
	[ .center/y LDZ2 #0048 SUB2 ] 
	.DateTime/hour DEI #0a DIV ;draw-number JSR2
	[ .center/x LDZ2 #0008 ADD2 ] 
	[ .center/y LDZ2 #0048 SUB2 ] 
	.DateTime/hour DEI #0a MOD ;draw-number JSR2
	( min )
	[ .center/x LDZ2 #0018 SUB2 ] 
	[ .center/y LDZ2 #0018 SUB2 ] 
	.DateTime/minute DEI #0a DIV ;draw-number JSR2
	[ .center/x LDZ2 #0008 ADD2 ] 
	[ .center/y LDZ2 #0018 SUB2 ] 
	.DateTime/minute DEI #0a MOD ;draw-number JSR2
	( sec )
	[ .center/x LDZ2 #0018 SUB2 ] 
	[ .center/y LDZ2 #0018 ADD2 ]
	.DateTime/second DEI #0a DIV 
	;draw-number JSR2
	[ .center/x LDZ2 #0008 ADD2 ] 
	[ .center/y LDZ2 #0018 ADD2 ] 
	.DateTime/second DEI #0a MOD 
	;draw-number JSR2

RTN

@draw-number ( x* y* n -- )
	
	STH
	( save pos ) .anchor/y STZ2 .anchor/x STZ2
	#00 #0f
	&loop
		( save-x ) OVR #03 MOD TOS 8** .anchor/x LDZ2 ADD2 .Screen/x DEO2
		( save-y ) OVR #03 DIV TOS 8** .anchor/y LDZ2 ADD2 .Screen/y DEO2
		( get digit* ) OVR STHkr DUP ADD TOS ;digits ADD2 LDA2 
		( get bit ) ROT #0e SWP SUB SFT2 #0001 AND2 
		( set tile ) 8** ;tiles ADD2 
		( set style ) .style LDZ #40 SFT TOS ADD2
		.Screen/addr DEO2
		( draw ) #01 .Screen/sprite DEO
		( incr ) SWP INC SWP 
		LTHk ,&loop JCN
	POP2
	POPr

RTN

@cover-pattern ( addr* -- )
	
	( load ) .Screen/addr DEO2
	#0000 .Screen/height DEI2
	&ver
		( save ) OVR2 .Screen/y DEO2
		#0000 .Screen/width DEI2
		&hor
			( save ) OVR2 .Screen/x DEO2
			( draw ) #01 .Screen/sprite DEO
			( incr ) SWP2 #0008 ADD2 SWP2
			LTH2k ,&hor JCN
		POP2 POP2
		( incr ) SWP2 #0008 ADD2 SWP2
		LTH2k ,&ver JCN
	POP2 POP2

RTN

@draw-cursor ( -- )
	
	( clear last cursor )
	;cursor .Screen/addr DEO2 
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO
	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2 
	( colorize on state )
	#41 [ .Mouse/state DEI #00 NEQ ] ADD .Screen/sprite DEO

RTN

@cursor [ 
	80c0 e0f0 f8e0 1000 ]

@digits [
	7b6f 2492 73e7 73cf 
	5bc9 79cf 49ef 7249 
	7bef 7bc9 ]

@tiles [
	0102 0408 1020 4080
	8040 2010 0804 0201 
	0718 2040 4080 8080
	0101 0102 0204 18e0
	0808 0810 e304 0808
	0808 0804 e310 0808 ]
( dev/console )

(
	Copies data from stdin to both stdout and stderr.
)

|10 @Console [ &vector $2 &read $1 &pad $5 &write $1 &error $1 ]

( init )

|0100 ( -> )

	;on-stdin .Console/vector DEO2

BRK

@on-stdin ( -> )

	.Console/read DEI
	DUP .Console/write DEO
		.Console/error DEO

BRK
( darena.tal )
( an open-ended game of rocks and sand )
( contributed by and cc0 sejo 12021 )

( parameters )
%nrocks { #1f }
%nrocks-1 { #1e }
%nrocks_mask { #1f }
%minposx { #0f }
%minposy { #0f }
%maxposx { #f1 }
%maxposy { #f1 }
%anispeedmask_normal { #03 }
%anispeedmask_slow { #07 }

%c_color_normal { #43 }
%c_color_flipx { #53 }
%index_norock { #ff }

( output macros )
%out_screen_x { LDA #00 SWP .Screen/x DEO2 } ( ;addr )
%out_screen_y { LDA #00 SWP .Screen/y DEO2 } ( ;addr )

( helper macros )
%get_bit_n { SFT #01 AND }
%get_nibble_h { #04 SFT #0f AND }
%get_nibble_l { #0f AND }

%is_bit_n_set { get_bit_n #01 EQU }

%set_animate { #01 ;c_state LDA ORA ;c_state STA }
%rst_animate { #00 ;c_state STA }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr  $2 &pixel $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]

( variables )

|0000

@c_pos [ &x $1 &y $1 ] ( character position )
@c_speed [ &x $1 &y $1 ] ( character speed )
@c_color [ $1 ] ( character color )
@c_sprite [ $2 ] ( character sprite addr )
@c_state [ $1 ] ( high_nibble: animation pointer, bit0: is_animated )

@f_count [ $1 ] ( frame counter )
@ani_speedmask [ $1 ] ( animation speed mask )

@r_speed_x [ $f ]
@r_speed_y [ $f ]

@tog [ &x $1 &y $1 &state $1 ] ( toggle station state )

( program )

|0100 @reset ( -> )
	#f396 .System/r DEO2
	#e263 .System/g DEO2
	#9030 .System/b DEO2

	;on_frame .Screen/vector DEO2

	( init character )
	#50 ;c_pos/x STA
	#10 ;c_pos/y STA
	#00 ;c_speed/x STA
	#00 ;c_speed/y STA
	c_color_normal ;c_color STA
	;s_monitx_stepfront0 ;c_sprite STA2
	rst_animate

	anispeedmask_normal ;ani_speedmask STA

	( init toggler )
	#27 ;tog/x STA
	#27 ;tog/y STA
	#00 ;tog/state STA


	( init background )
	;init_bg JSR2
BRK


@on_frame ( -> )
	;f_count LDA INC DUP ;f_count STA ( increase frame counter )
	;ani_speedmask LDA ( mask with animation speed mask )
	AND #00 EQU ,update_frame JCN ( jump to update if it's time )
BRK

@update_frame
	( check keyboard )
	;check_keys JSR2

	( animate character sprite )
	;animate_c JSR2

	( clear sprites )
	;clear JSR2

	( update character vars )
	;update_c/run JSR2

	( update rocks + stand )
	;update_r/run JSR2

	( draw )
	;draw JSR2

BRK

@clear
	( clear rocks )
	;s_clear .Screen/addr DEO2

	nrocks #00
	&rocks_loop
		DUP ( get rocks_x[i] )
		;rocks_x ROT #00 SWP ADD2 out_screen_x

		DUP ( get rocks_y[i] )
		;rocks_y ROT #00 SWP ADD2 out_screen_y

		#40 .Screen/sprite DEO

		INC
		DUP2
		NEQ ,&rocks_loop JCN
	POP2

	( clear character )
	;clear_c JSR2
JMP2r

@draw
	( draw toggler )

	;tog/x out_screen_x
	;tog/x out_screen_y
	;s_stand .Screen/addr DEO2
	#03 .Screen/sprite DEO

	( draw rocks )
	;s_bola .Screen/addr DEO2

	nrocks #00

	&rocks_loop
		DUP ( get rocks_x[i] )
		;rocks_x ROT #00 SWP ADD2 out_screen_x

		DUP ( get rocks_y[i] )
		;rocks_y ROT #00 SWP ADD2 out_screen_y

		DUP ( get color )
		;r_color ROT #00 SWP ADD2 LDA #41 ADD .Screen/sprite DEO

		INC

		DUP2
		NEQ ,&rocks_loop JCN
	POP2

	( draw character )
	;draw_c JSR2
JMP2r

@check_keys
	#00 ;c_speed/x STA
	#00 ;c_speed/y STA

	.Controller/button DEI #07 is_bit_n_set ,&der JCN
	.Controller/button DEI #06 is_bit_n_set ,&izq JCN
	.Controller/button DEI #05 is_bit_n_set ,&aba JCN
	.Controller/button DEI #04 is_bit_n_set ,&arr JCN

	rst_animate

	JMP2r

	&der
		#01 ;c_speed/x STA
		set_animate
		c_color_normal ;c_color STA
		;s_monitx_stepside0 ;c_sprite STA2
	JMP2r

	&izq
		#ff ;c_speed/x STA
		set_animate
		c_color_flipx ;c_color STA
		;s_monitx_stepside0 ;c_sprite STA2
	JMP2r

	&aba
		#01 ;c_speed/y STA
		set_animate
		c_color_normal ;c_color STA
		;s_monitx_stepfront0 ;c_sprite STA2
	JMP2r

	&arr
		#ff ;c_speed/y STA
		set_animate
		c_color_normal ;c_color STA
		;s_monitx_stepback0 ;c_sprite STA2
	JMP2r

	&end
JMP2r

( sub-routines )

( in: sourcex, source y, index, rangex, rangey )
( puts in the stack the index of rock collisioned with )
@collision_rocks
	&range_y $1
	&range_x $1
	&src_i $1
	&src_x  $1
	&src_y $1

	&rock_x $1
	&rock_y $1

	&run
		,&range_y STR
		,&range_x STR
		,&src_i STR
		,&src_y STR
		,&src_x STR

		( check collision with rocks )
		( nrocks #00 )
		,&src_i LDR nrocks_mask AND DUP INC nrocks_mask AND

		&rocks_loop
			DUP ( get rocks_x[i] )
			;rocks_x ROT #00 SWP ADD2 LDA ,&rock_x STR

			DUP ( get rocks_y[i] )
			;rocks_y ROT #00 SWP ADD2 LDA ,&rock_y STR

			,&src_x LDR ,&rock_x LDR ,&range_x LDR SUB GTH ( if sx > rx - 8  )
			,&src_x LDR ,&rock_x LDR ,&range_x LDR ADD LTH ( if sx < rx + 8  )
			,&src_y LDR ,&rock_y LDR ,&range_y LDR SUB GTH ( if sy > ry - 8  )
			,&src_y LDR ,&rock_y LDR ,&range_y LDR ADD LTH ( if sy < ry + 8  )
			ADD ADD ADD #04 EQU ,&found JCN

			INC nrocks_mask AND
			DUP2
			NEQ ,&rocks_loop JCN
		POP2
		#ff
		JMP2r
	&found
		NIP ( remove loop limit )
		DUP ;&src_i LDA NEQ ,&end JCN ( check if result is the same as index )
		POP #ff
		JMP2r

	&end

JMP2r

@update_c ( update character position )
	&new_x $1
	&new_y $1

	&rock_i $1
	&rock_x $1
	&rock_y $1


	&run
		;c_speed/x LDA ;c_pos/x LDA ADD
		,&new_x STR
		;c_speed/y LDA ;c_pos/y LDA ADD
		,&new_y STR

		anispeedmask_normal ;ani_speedmask STA

	&check_x
		( check collision with borders )
		,&new_x LDR minposx EQU ;&noup_x JCN2
		,&new_x LDR maxposx EQU ;&noup_x JCN2


		( check collision with rocks )
		,&new_x LDR ,&new_y LDR index_norock #09 #06
		;collision_rocks/run JSR2

		( if it is colliding with rock, check further )
		DUP #ff NEQ ,&check_x_collision JCN
		POP
		,&update_x JMP

	&check_x_collision
		( DUP DEBUG )
		( slow down and save rock index )
		anispeedmask_slow ;ani_speedmask STA
		,&rock_i STR

		( check if rock collides with others )
		;rocks_x #00 ,&rock_i LDR ADD2 LDA ,&rock_x STR
		;rocks_y #00 ,&rock_i LDR ADD2 LDA ,&rock_y STR

		,&rock_x LDR ,&rock_y LDR ,&rock_i LDR #09 #06
		;collision_rocks/run JSR2

		( DUP DEBUG )

		( if it is colliding, then skip adding x )
		DUP #ff NEQ ,&check_y JCN
		POP


		( if not, check for borders )
		;&rock_x LDA minposx EQU ;&noup_x JCN2
		;&rock_x LDA maxposx EQU ;&noup_x JCN2

		( move rock with same speed as c )
		;&rock_x LDA ;c_speed/x LDA ADD
		;rocks_x #00 ;&rock_i LDA ADD2
		STA


	&update_x
		;&new_x LDA ;c_pos/x STA

	,&check_y JMP

	&noup_x

	&check_y
		( check collision with borders )
		;&new_y LDA minposy EQU ;&noup_y JCN2
		;&new_y LDA maxposy EQU ;&noup_y JCN2

		( check collision with rocks )
		;&new_x LDA ;&new_y LDA index_norock #06 #09
		;collision_rocks/run JSR2

		( if it is colliding with rock, check further )
		DUP #ff NEQ ,&check_y_collision JCN
		POP
		,&update_y JMP

	&check_y_collision
		( DUP DEBUG )
		anispeedmask_slow ;ani_speedmask STA
		;&rock_i STA

		( check if rock collides with others )
		;rocks_x #00 ;&rock_i LDA ADD2 LDA ;&rock_x STA
		;rocks_y #00 ;&rock_i LDA ADD2 LDA ;&rock_y STA

		;&rock_x LDA ;&rock_y LDA ;&rock_i LDA #06 #09
		;collision_rocks/run JSR2

		( DUP DEBUG )

		( if it is colliding, then skip adding y )
		DUP #ff NEQ ,&noup_y JCN
		POP

		( if not, check for borders )
		;&rock_y LDA minposx EQU ;&noup_y JCN2
		;&rock_y LDA maxposx EQU ;&noup_y JCN2

		( if not colliding, then move rock with same speed as c )
		;&rock_y LDA ;c_speed/y LDA ADD
		;rocks_y #00 ;&rock_i LDA ADD2
		STA


	&update_y
		;&new_y LDA ;c_pos/y STA
	JMP2r

	&noup_y
JMP2r

@update_r
	&rock_i $1

	&run

		( check collision with rocks )
		;tog/x LDA ;tog/y LDA index_norock #02 #02
		;collision_rocks/run JSR2

		( if it is colliding with rock, check if it needs to change state )
		DUP #ff NEQ ,&change_state JCN

		( DUP DEBUG )

		( if there's no collision, reset toggler )
		POP
		#00 ;tog/state STA
		JMP2r

	&change_state
		( DUP DEBUG )
		,&rock_i STR
		;tog/state LDA ,&done JCN ( don't toggle if state is active )

		;r_color #00 ,&rock_i LDR ADD2 DUP2 STH2
		LDA #01 EOR STH2r STA
		#01 ;tog/state STA
	&done

JMP2r

@animate_c
	( is bit0 -animate- on? )
	;c_state LDA DUP #00 get_bit_n #01 NEQ ,&s_no_animate JCN

	( increment and save animation pointer )
	&s_animate
		DUP
		get_nibble_h INC #03 AND #40 SFT
		SWP get_nibble_l ORA
		;c_state STA
	JMP2r

	&s_no_animate
		get_nibble_h #0f AND ;c_state STA
JMP2r

@draw_c ( draw character  )
	#00 ;c_state LDA get_nibble_h #30 SFT
	;c_sprite LDA2 ADD2 .Screen/addr DEO2
	;c_pos/x out_screen_x
	;c_pos/y out_screen_y
	;c_color LDA .Screen/sprite DEO
JMP2r

@clear_c ( clear character )
	;s_clear .Screen/addr DEO2
	;c_pos/x out_screen_x
	;c_pos/y out_screen_y
	#40 .Screen/sprite DEO
JMP2r

@init_bg
	( init bg )
	;s_border .Screen/addr DEO2

	.Screen/height DEI2 #0000 STH2
	&vertical0loop
		DUP2
		STH2r
		DUP2 .Screen/y DEO2


		.Screen/width DEI2 #0000 STH2
		&horizontal0loop
			DUP2
			STH2r
			DUP2 .Screen/x DEO2

			#03 .Screen/sprite DEO

			#0008 ADD2 DUP2 STH2
			GTH2 ,&horizontal0loop JCN

		STH2r POP2 POP2


		#0008 ADD2 DUP2 STH2
		GTH2 ,&vertical0loop JCN
	STH2r
	POP2 POP2

	( arena )

	;s_clear .Screen/addr DEO2

	 #00 maxposy  #00 minposy STH2
	&vertical0loop_clear
		DUP2
		STH2r
		DUP2 .Screen/y DEO2


		 #00 maxposx  #00 minposx  STH2
		&horizontal0loop_clear
			DUP2
			STH2r
			DUP2 .Screen/x DEO2

			#00 .Screen/sprite DEO

			#0008 ADD2 DUP2 STH2
			GTH2 ,&horizontal0loop_clear JCN

		STH2r POP2 POP2

		#0008 ADD2 DUP2 STH2 GTH2 ,&vertical0loop_clear JCN
	STH2r
	POP2 POP2

JMP2r

( rocks )
@rocks_x [ 25 30 42 50  67 90 98 e8  20 43 43 57  5a 7f bc a5
           e5 dd a2 20  b7 9b 38 e8  33 43 63 b7  aa cf bc    ]
@rocks_y [ 60 48 34 56  23 65 65 65  ba e9 24 22  72 91 22 c5
           25 30 42 50  67 90 98 e8  20 43 43 57  5a 7f bc    ]
@r_color [ 00 01 01 00  00 00 01 01  01 01 00 00  01 01 00 00
           01 00 01 00  00 01 00 01  01 01 01 01  00 00 00    ]

( sprites )

@s_clear          [ 0000 0000 0000 0000 ]
@s_border         [ 3288 7e83 780d e013 ]
@s_bola           [ 3c4e 9ffd f962 3c00 ]
@s_stand          [ 0000 0000 0024 7eff ]
@s_stand_original [ 0000 0000 0000 3c7e ]

@s_monitx      [ 3c7e 5a7f 1b3c 5a18 ]
@s_monitx_back [ 3c7e 7efe d83c 5a18 ]

@s_monitx_stepfront0 [ 3c7e 5a7f 1b3c 5a18 ]
@s_monitx_stepfront1 [ 3c7e 5a7f 1b3c 5a10 ]
@s_monitx_stepfront2 [ 3c7e 5a7f 1b3c 5a18 ]
@s_monitx_stepfront3 [ 3c7e 5a7f 1b3c 5a08 ]

@s_monitx_stepback0 [ 3c7e 7efe d83c 5a18 ]
@s_monitx_stepback1 [ 3c7e 7efe d83c 5a10 ]
@s_monitx_stepback2 [ 3c7e 7efe d83c 5a18 ]
@s_monitx_stepback3 [ 3c7e 7efe d83c 5a08 ]

@s_monitx_stepside0 [ 1c3c 7afc d81c 1818 ]
@s_monitx_stepside1 [ 1c3c 7afc d81c 1828 ]
@s_monitx_stepside2 [ 1c3c 7afc d81c 3810 ]
@s_monitx_stepside3 [ 1c3c 7afc d81c 1814 ]

( 
	a simple calculator
	uxnasm projects/software/calc.tal bin/calc.rom && uxnemu bin/calc.rom )

%+  { ADD } %-   { SUB }  %/   { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ }
%++ { ADD2 } %-- { SUB2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%!~ { NEQk NIP }

%2*   { #10 SFT } 
%4*   { #20 SFT } %4/ { #02 SFT }
%8*   { #30 SFT } %8/   { #03 SFT }
%2**  { #10 SFT2 } %2// { #01 SFT2 }
%4**  { #20 SFT2 }
%8**  { #30 SFT2 } %8// { #03 SFT2 }
%10** { #40 SFT2 } %10// { #04 SFT2 }
%20** { #50 SFT2 }

%2MOD2 { #0001 AND2 }
%4MOD { #03 AND } %4MOD2 { #0003 AND2 }
%8MOD { #07 AND }

%DEBUG  { ;print-hex/byte JSR2 #0a .Console/write DEO }
%DEBUG2 { ;print-hex/short JSR2 #0a .Console/write DEO }

%RELEASE-MOUSE { #0096 DEO }

%RTN { JMP2r }
%BRK? { #01 JCN BRK }
%RTN? { #01 JCN RTN }
%TOS { #00 SWP }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto  $1 &pad    $1 &x      $2 &y      $2 &addr $2 &pixel  $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel  $1 ]
|a0 @File       [ &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( variables )

|0000

@input
	&length $1 &value $2
@stack
	&length $1
	&items $10
@center
	&x $2 &y $2
@pointer
	&x $2 &y $2 &last $1
@keypad-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@modpad-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@bitpad-frame
	&x $2 &y $2 &x2 $2 &y2 $2
@input-frame
	&x $2 &y $2 &x2 $2 &y2 $2

( program )

|0100 ( -> )

	( theme ) 
	#0e7d .System/r DEO2 
	#0ec6 .System/g DEO2 
	#0e95 .System/b DEO2

	( size )
	#0090 .Screen/width DEO2
	#0100 .Screen/height DEO2

	( vectors )
	;on-mouse .Mouse/vector DEO2
	;on-button .Controller/vector DEO2

	( setup synth )
	#0110 .Audio0/adsr DEO2
	;sin-pcm .Audio0/addr DEO2
	#0100 .Audio0/length DEO2
	#dd .Audio0/volume DEO

	( center )
	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	.center/x LDZ2 #0020 -- 
		DUP2 .keypad-frame/x STZ2 #0040 ++ .keypad-frame/x2 STZ2
	.center/y LDZ2 #0018 -- 
		DUP2 .keypad-frame/y STZ2 #003f ++ .keypad-frame/y2 STZ2

	.keypad-frame/x LDZ2
		DUP2 .modpad-frame/x STZ2 #0040 ++ .modpad-frame/x2 STZ2
	.keypad-frame/y LDZ2 #0040 ++
		DUP2 .modpad-frame/y STZ2 #001f ++ .modpad-frame/y2 STZ2

	.keypad-frame/x LDZ2
		DUP2 .bitpad-frame/x STZ2 #0040 ++ .bitpad-frame/x2 STZ2
	.modpad-frame/y2 LDZ2 #0008 ++
		DUP2 .bitpad-frame/y STZ2 #000f ++ .bitpad-frame/y2 STZ2

	.center/x LDZ2 #0020 -- 
		DUP2 .input-frame/x STZ2 #0040 ++ .input-frame/x2 STZ2
	.center/y LDZ2 #002a -- 
		DUP2 .input-frame/y STZ2 #0010 ++ .input-frame/y2 STZ2

	( theme support )
	;load-theme JSR2

BRK

@on-button ( -> )

	.Controller/key DEI 
	( generics )
	#00 !~ ,&no-release JCN ;redraw JSR2 POP BRK &no-release
	#0d !~ ,&no-enter JCN ;do-push JSR2 POP BRK &no-enter
	#1b !~ ,&no-esc JCN ;do-pop JSR2 POP BRK &no-esc
	#08 !~ ,&no-backspace JCN
		.input/value LDZ2 #04 SFT2 .input/value STZ2
		#ff ;draw-input JSR2 POP BRK
		&no-backspace
	( arithmetic )
	LIT '+ !~ ,&no-add JCN ;do-add JSR2 POP BRK &no-add
	LIT '- !~ ,&no-sub JCN ;do-sub JSR2 POP BRK &no-sub
	LIT '* !~ ,&no-mul JCN ;do-mul JSR2 POP BRK &no-mul
	LIT '/ !~ ,&no-div JCN ;do-div JSR2 POP BRK &no-div
	( bitwise )
	LIT '& !~ ,&no-and JCN ;do-and JSR2 POP BRK &no-and
	LIT '| !~ ,&no-ora JCN ;do-ora JSR2 POP BRK &no-ora
	LIT '^ !~ ,&no-eor JCN ;do-eor JSR2 POP BRK &no-eor
	LIT '~ !~ ,&no-not JCN ;do-not JSR2 POP BRK &no-not
	( value )
	;key-value JSR2 ;push-input JSR2

BRK

@on-mouse ( -> )

	;pointer-icn .Screen/addr DEO2

	( clear last cursor )
	.pointer/x LDZ2 .Screen/x DEO2
	.pointer/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2
	#41 .Mouse/state DEI #01 = + .Screen/sprite DEO

	( handle events )
	.Mouse/state DEI .pointer/last LDZ
	DUP2 #0100 !! ,&no-down JCN
		.Mouse/state DEI .pointer/last STZ
		POP2
		.Mouse/x DEI2 .Mouse/y DEI2 
		OVR2 OVR2 .keypad-frame ;within-rect JSR2 ;click-keypad JCN2
		OVR2 OVR2 .input-frame ;within-rect JSR2 ;click-input JCN2
		OVR2 OVR2 .modpad-frame ;within-rect JSR2 ;click-modpad JCN2
		OVR2 OVR2 .bitpad-frame ;within-rect JSR2 ;click-bitpad JCN2
		POP2 POP2
		BRK
		&no-down
	DUP2 #0001 !! ,&no-up JCN
		.Mouse/state DEI .pointer/last STZ
		POP2 ;redraw JSR2 BRK
		&no-up
	POP2
	.Mouse/state DEI .pointer/last STZ

BRK

@click-keypad ( x* y* -> )

	( y ) .keypad-frame/y LDZ2 -- #24 SFT2
	( x ) SWP2 .keypad-frame/x LDZ2 -- 10// 4MOD2
	( value ) ++ ;keypad/layout ++ LDA 
		;push-input JSR2

	RELEASE-MOUSE

BRK

@click-modpad ( x* y* -> )

	( y ) .modpad-frame/y LDZ2 -- #24 SFT2 NIP STH
	( x ) .modpad-frame/x LDZ2 -- 10// 
	( lookup ) STHr + 2** ;keypad/ops ++ LDA2 JSR2
	;draw-bitpad JSR2
	RELEASE-MOUSE

BRK

@click-bitpad ( x* y* -> )

	( y ) .bitpad-frame/y LDZ2 -- 8// NIP 8* STH
	( x ) .bitpad-frame/x LDZ2 -- 8// NIP 
	( value ) STHr + STHk

	#30 + .Audio0/pitch DEO

	( toggle bit )
	.input/value LDZ2 #0001 
		[ STHr #0f SWP - ] #40 SFT SFT2 EOR2 
		.input/value STZ2

	;draw-bitpad JSR2
	RELEASE-MOUSE

BRK

@click-input ( x* y* -> )

	POP2
	.input-frame/x LDZ2 -- 8// NIP
	DUP #00 ! ,&no-push JCN
		;do-push JSR2
		&no-push
	DUP #01 ! ,&no-pop JCN
		;do-pop JSR2
		&no-pop
	POP
	RELEASE-MOUSE

BRK

@push-input ( key -- )

	DUP #50 + .Audio0/pitch DEO
	DUP TOS ;keypad/series ++ LDA ;draw-keypad JSR2
	TOS .input/value LDZ2 10** ++ .input/value STZ2
	( INCZ ) .input/length LDZk INC SWP STZ
	#ff ;draw-input JSR2
	;draw-bitpad JSR2

RTN

@push ( value* -- )

	( store ) .stack/length LDZ 2* .stack/items + STZ2
	( INCZ ) .stack/length LDZk INC SWP STZ
	( reset ) #0000 .input/value STZ2
	#00 ;draw-input JSR2
	;draw-stack JSR2

RTN

@pop ( -- value* )

	.stack/length LDZ #01 - 2* .stack/items + LDZ2
	( clear ) #0000 [ .stack/length LDZ #01 - 2* .stack/items + ] STZ2
	( DECZ ) .stack/length LDZk #01 - SWP STZ
	#01 ;draw-input JSR2
	;draw-stack JSR2

RTN

@do-push ( -- )

	.input/value LDZ2 ADD #00 > JMP RTN
	.stack/length LDZ #07 < JMP RTN

	#40 .Audio0/pitch DEO
	.input/value LDZ2 ;push JSR2

RTN

@do-pop ( -- )

	#0000 .input/value STZ2
	.stack/length LDZ #00 = ,&continue JCN
		#41 .Audio0/pitch DEO
		;pop JSR2 POP2
		;draw-stack JSR2
		&continue
	#01 ;draw-input JSR2

RTN

@do-add ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#42 .Audio0/pitch DEO
	#00 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 ADD2 ;push JSR2

RTN

@do-sub ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#43 .Audio0/pitch DEO
	#01 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 SUB2 ;push JSR2

RTN

@do-mul ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#44 .Audio0/pitch DEO
	#02 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 MUL2 ;push JSR2

RTN

@do-div ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#45 .Audio0/pitch DEO
	#03 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 DIV2 ;push JSR2

RTN

@do-and ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#46 .Audio0/pitch DEO
	#04 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 AND2 ;push JSR2

RTN

@do-ora ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#47 .Audio0/pitch DEO
	#05 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 ORA2 ;push JSR2

RTN

@do-eor ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #01 > RTN?

	#48 .Audio0/pitch DEO
	#06 ;draw-modpad JSR2
	;pop JSR2 ;pop JSR2 SWP2 EOR2 ;push JSR2

RTN

@do-not ( -- )

	.input/value LDZ2 #0000 == ,&no-push JCN
		;do-push JSR2
		&no-push

	( stack empty ) .stack/length LDZ #00 > RTN?

	#49 .Audio0/pitch DEO
	#07 ;draw-modpad JSR2
	;pop JSR2 #ffff EOR2  ;push JSR2

RTN

@key-value ( key -- value )

	DUP #2f > OVR #3a < #0101 !! ,&no-num JCN
		#30 - RTN
		&no-num
	DUP #60 > OVR #67 < #0101 !! ,&no-lc JCN
		#57 - RTN ( #61 - #0a + )
		&no-lc
	DUP #40 > OVR #47 < #0101 !! ,&no-uc JCN
		#37 - RTN ( #41 - #0a + )
		&no-uc
	POP #00

RTN

@redraw ( -- )

	#ff ;draw-keypad JSR2
	#ff ;draw-modpad JSR2
	#ff ;draw-input JSR2
	;draw-bitpad JSR2
	,draw-stack JSR

RTN

@draw-stack ( -- )

	#08 #00
	&loop
		( color ) DUP #08 .stack/length LDZ - #01 - > STH
		( value ) DUP 2* .stack/items + [ #10 .stack/length LDZ 2* - - ] LDZ2 STH2
		( y ) DUP TOS 8** .input-frame/y LDZ2 ++ #004c -- STH2
		( x ) .input-frame/x LDZ2 #0020 ++ STH2r STH2r STHr ,draw-short JSR
		INC GTHk ,&loop JCN
	POP2

RTN

@draw-short ( x* y* value* color -- )

	STH STH2
	.Screen/y DEO2
	#0020 ++ .Screen/x DEO2
	#0400
	&loop
		.Screen/x DEI2 #0008 -- .Screen/x DEO2
		( value ) DUP STH2kr ROT 4* SFT2 #000f AND2
		( value glyph ) 8** ;font-hex ++ .Screen/addr DEO2
		( get color ) ROTr STHkr 
		( place stack ) ROTr ROTr
		( no leading zeros )
		OVR STH2kr ,get-length JSR < ,&visible JCN
			POP #00
			&visible
		( draw ) .Screen/sprite DEO
		INC GTHk ,&loop JCN
	POP2
	POP2r POPr

RTN

@get-length ( short* -- length )

	DUP2 #1000 << ,&no4 JCN POP2 #04 RTN &no4
	DUP2 #0100 << ,&no3 JCN POP2 #03 RTN &no3
	DUP2 #0010 << ,&no2 JCN POP2 #02 RTN &no2
	#0000 !!

RTN

@draw-decimal ( -- )

	.bitpad-frame/y2 LDZ2 #0008 ++ .Screen/y DEO2
	.center/x LDZ2 #0014 -- .Screen/x DEO2
	#01 .Screen/auto DEO

	.input/value LDZ2
	( 10,000 ) #2710 DIV2k DUP2 NIP ,&digit JSR [ MUL2 SUB2 ]
	( 1,000 ) #03e8 DIV2k DUP2 NIP ,&digit JSR [ MUL2 SUB2 ]
	( 100 ) #0064 DIV2k DUP2 NIP ,&digit JSR [ MUL2 SUB2 NIP ]
	( 10 ) #0a DIVk DUP ,&digit JSR [ MUL SUB ]
	( 1 ) ,&digit JSR
	#00 .Screen/auto DEO

RTN
	&digit ( num -- )
		8* TOS ;font-hex ++ .Screen/addr DEO2
		#03 .Screen/sprite DEO
	RTN

@draw-input ( key -- )

	STH

	( draw value )
	.input-frame/x LDZ2 #0020 ++
	.input-frame/y LDZ2 #0003 ++
	.input/value LDZ2
	#02 
		;draw-short JSR2

	( controls )
	.input-frame/x LDZ2
	.input-frame/y LDZ2
	;stack-icns/push [ STHkr #00 = ] #02
		;draw-key-thin JSR2

	.input-frame/x LDZ2 #0008 ++
	.input-frame/y LDZ2
	;stack-icns/pop [ STHkr #01 = ] #03
		;draw-key-thin JSR2

	( line )
	.input-frame/x LDZ2 
	.input-frame/x2 LDZ2 
	.input-frame/y LDZ2 #0004 -- #02 
		;line-hor-dotted JSR2

	POPr

	;draw-decimal JSR2

RTN

@draw-keypad ( key -- )

	STH
	#10 #00
	&loop
		( color ) DUP TOS ;keypad/color ++ LDA STH
		( state ) DUP OVRr STHr = STH
		( layout ) DUP TOS ;keypad/layout ++ LDA 
			( layout addr ) TOS 8** ;font-hex ++ STH2
		( x ) DUP 4MOD TOS 10** STH2
		( y ) DUP 4/ TOS 10**
		( origin-x ) STH2r .keypad-frame/x LDZ2 ++ SWP2 
		( origin-y ) .keypad-frame/y LDZ2 ++
			STH2r STHr STHr ;draw-key JSR2
		INC GTHk ,&loop JCN
	POP2
	POPr

RTN

@draw-modpad ( key -- )

	STH
	#08 #00
	&loop
		( state ) DUP STHkr = STH
		( glyph ) DUP TOS 8** ;mod-icns ++ STH2
		( y ) DUP 4/ TOS 10** .modpad-frame/y LDZ2 ++ STH2
		( x ) DUP 4MOD TOS 10** .modpad-frame/x LDZ2 ++ STH2
		STH2r STH2r STH2r STHr #03 ;draw-key JSR2
		INC GTHk ,&loop JCN
	POP2
	POPr

RTN

@draw-bitpad ( -- )

	#10 #00
	&loop
		( y ) DUP 8/ TOS 8** .bitpad-frame/y LDZ2 ++ .Screen/y DEO2
		( x ) DUP 8MOD TOS 8** .bitpad-frame/x LDZ2 ++ .Screen/x DEO2
		( state ) DUP #0f SWP - .input/value LDZ2 ROT SFT2 2MOD2 
		( addr ) 8** ;bit-icns ++ .Screen/addr DEO2
		#01 .Screen/sprite DEO
		INC GTHk ,&loop JCN
	POP2

RTN

@draw-key ( x* y* glyph* state color -- )

	( auto x addr ) #05 .Screen/auto DEO
	( color ) ,&color STR
	( state ) ,&state STR
	( glyph ) ,&glyph STR2
	( state ) ;button-icns [ #00 ,&state LDR 20** ++ ] .Screen/addr DEO2 
	( y ) .Screen/y DEO2
	( x ) .Screen/x DEO2
	( draw background )
	,&color LDR .Screen/sprite DEO
	,&color LDR .Screen/sprite DEO
	.Screen/x DEI2 #0010 -- .Screen/x DEO2
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2
	,&color LDR .Screen/sprite DEOk DEO
	( glyph )
	,&glyph LDR2 .Screen/addr DEO2
	.Screen/x DEI2 #000c -- .Screen/x DEO2
	.Screen/y DEI2 #0005 -- .Screen/y DEO2
	,&color LDR [ ,&state LDR #09 MUL + ] .Screen/sprite DEO
	( auto none ) #00 .Screen/auto DEO

RTN
	&color $1 &state $1 &glyph $2

@draw-key-thin ( x* y* glyph* state color -- )

	( auto y addr ) #06 .Screen/auto DEO
	( color ) ,&color STR
	( state ) ,&state STR
	( glyph ) ,&glyph STR2
	( state ) ;button-thin-icns [ #00 ,&state LDR 10** ++ ] .Screen/addr DEO2 
	( y ) .Screen/y DEO2
	( x ) .Screen/x DEO2
	( draw background )
	,&color LDR .Screen/sprite DEOk DEO
	( glyph )
	,&glyph LDR2 .Screen/addr DEO2
	.Screen/y DEI2 #000c -- .Screen/y DEO2
	#05 .Screen/sprite DEO
	( auto none ) #00 .Screen/auto DEO

RTN
	&color $1 &state $1 &glyph $2

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2 
	#0006 .File/length DEO2 
	#fffa .File/read DEO2

	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore
	;redraw JSR2

RTN

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 LTH2 ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 GTH2 ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 LTH2 ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 GTH2 ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@line-hor-dotted ( x0* x1* y* color -- )
	
	STH .Screen/y DEO2
	SWP2
	&loop
		( save ) DUP2 .Screen/x DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@print-hex ( value* -- )
	
	&short ( value* -- )
		SWP ,&echo JSR 
	&byte ( value -- )
		,&echo JSR
	RTN

	&echo ( value -- )
	STHk #04 SFT ,&parse JSR .Console/write DEO
	STHr #0f AND ,&parse JSR .Console/write DEO
	RTN
	&parse ( value -- char )
		DUP #09 GTH ,&above JCN #30 + RTN &above #09 - #60 + RTN

RTN

@keypad
	&layout
		0708 090f
		0405 060e
		0102 030d
		000a 0b0c
	&series
		0c08 090a
		0405 0600
		0102 0d0e
		0f0b 0703
	&color
		0101 0102
		0101 0102
		0101 0102
		0102 0202
	&ops
		:do-add :do-sub :do-mul :do-div
		:do-and :do-ora :do-eor :do-not

@sin-pcm
	8083 8689 8c8f 9295 989b 9ea1 a4a7 aaad
	b0b3 b6b9 bbbe c1c3 c6c9 cbce d0d2 d5d7
	d9db dee0 e2e4 e6e7 e9eb ecee f0f1 f2f4
	f5f6 f7f8 f9fa fbfb fcfd fdfe fefe fefe
	fffe fefe fefe fdfd fcfb fbfa f9f8 f7f6
	f5f4 f2f1 f0ee eceb e9e7 e6e4 e2e0 dedb
	d9d7 d5d2 d0ce cbc9 c6c3 c1be bbb9 b6b3
	b0ad aaa7 a4a1 9e9b 9895 928f 8c89 8683
	807d 7a77 7471 6e6b 6865 625f 5c59 5653
	504d 4a47 4542 3f3d 3a37 3532 302e 2b29
	2725 2220 1e1c 1a19 1715 1412 100f 0e0c
	0b0a 0908 0706 0505 0403 0302 0202 0202
	0102 0202 0202 0303 0405 0506 0708 090a
	0b0c 0e0f 1012 1415 1719 1a1c 1e20 2225
	2729 2b2e 3032 3537 3a3d 3f42 4547 4a4d
	5053 5659 5c5f 6265 686b 6e71 7477 7a7d

@font-hex
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080

@mod-icns
	0010 1010 fe10 1010
	0000 0000 fe00 0000
	0010 5428 c628 5410
	0010 0000 fe00 0010

	0078 8484 4836 8876
	0010 1010 1010 1010
	0000 1028 4482 0000
	0000 0060 920c 0000

@button-icns
	( outline )
		3f40 8080 8080 8080
		f804 0202 0202 0202
		8080 8080 8040 3f00
		0202 0202 0204 f800
	( full )
		3f7f ffff ffff ffff
		f8fc fefe fefe fefe
		ffff ffff ff7f 3f00
		fefe fefe fefc f800

@button-thin-icns
	( outline )
		3844 8282 8282 8282
		8282 8282 8244 3800
	( full )
		387c fefe fefe fefe
		fefe fefe fe7c 3800

@bit-icns
	( outline )
		3844 8282 8244 3800
	( full )
		387c fefe fe7c 3800

@stack-icns
	&push
		0000 1028 1000 0000
	&pop
		0000 2810 2800 0000

@pointer-icn
	80c0 e0f0 f8e0 1000
( GUI Hover )

%RTN { JMP2r }
%GTS2 { #8000 ADD2 SWP2 #8000 ADD2 LTH2 }

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|90 @Mouse [ &vector $2 &x $2 &y $2 &state $1 &wheel $1 ]

( variables )

|0000

@color $1
@pointer [ &x $2 &y $2 &sprite $2 ]
@rect [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@r1 [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@r2 [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@r3 [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]

( program )

|0100

	( theme ) 
	#0f0f .System/r DEO2 
	#0fff .System/g DEO2 
	#0ff0 .System/b DEO2

	( vectors ) ;on-mouse .Mouse/vector DEO2
	
	#0020 #0030 #0060 #0060 .r1/y2 STZ2 .r1/x2 STZ2 .r1/y1 STZ2 .r1/x1 STZ2
	#0058 #0050 #0090 #0080 .r2/y2 STZ2 .r2/x2 STZ2 .r2/y1 STZ2 .r2/x1 STZ2
	#0048 #0048 #0080 #0098 .r3/y2 STZ2 .r3/x2 STZ2 .r3/y1 STZ2 .r3/x1 STZ2

( no BRK, run through to on-mouse )

@on-mouse
	
	;pointer_icn .pointer/sprite STZ2

	#01 .color STZ
	.Mouse/x DEI2 .Mouse/y DEI2 .r1 ;within-rect JSR2 #00 EQU ,&draw1 JCN 
		#02 .color STZ 
		;hand_icn .pointer/sprite STZ2
		&draw1 
	.r1/x1 LDZ2 .r1/y1 LDZ2 .r1/x2 LDZ2 .r1/y2 LDZ2 .color LDZ ;line-rect JSR2
	
	#01 .color STZ
	.Mouse/x DEI2 .Mouse/y DEI2 .r2 ;within-rect JSR2 #00 EQU ,&draw2 JCN 
		#03 .color STZ 
		;hand_icn .pointer/sprite STZ2
		&draw2 
	.r2/x1 LDZ2 .r2/y1 LDZ2 .r2/x2 LDZ2 .r2/y2 LDZ2 .color LDZ ;line-rect JSR2
	
	#01 .color STZ
	.Mouse/x DEI2 .Mouse/y DEI2 .r3 ;within-rect JSR2 #00 EQU ,&draw3 JCN 
		#02 .color STZ 
		;hand_icn .pointer/sprite STZ2
		&draw3 
	.r3/x1 LDZ2 .r3/y1 LDZ2 .r3/x2 LDZ2 .r3/y2 LDZ2 .color LDZ ;line-rect JSR2

	( clear last cursor )
	.pointer/x LDZ2 .Screen/x DEO2
	.pointer/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2
	.pointer/sprite LDZ2 .Screen/addr DEO2

	( draw new cursor )
	#41 .Screen/sprite DEO

BRK

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 LTH2 ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 GTH2 ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 LTH2 ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 GTH2 ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@line-rect ( x1* y1* x2* y2* color -- )

	( load ) .color STZ 
	STH2k .rect/y2 STZ2 .rect/x2 STZ2 
	STH2k .rect/y1 STZ2 .rect/x1 STZ2
	STH2r STH2r SWP2
	&ver
		( save ) DUP2 .Screen/y DEO2
		( draw ) .rect/x1 LDZ2 .Screen/x DEO2 .color LDZ DUP .Screen/pixel DEO
		( draw ) .rect/x2 LDZ2 .Screen/x DEO2 .Screen/pixel DEO
		( incr ) INC2
		OVR2 OVR2 GTS2 ,&ver JCN
	POP2 POP2
	.rect/x1 LDZ2 .rect/x2 LDZ2 SWP2
	&hor
		( save ) DUP2 .Screen/x DEO2
		( draw ) .rect/y1 LDZ2 .Screen/y DEO2 .color LDZ DUP .Screen/pixel DEO
		( draw ) .rect/y2 LDZ2 .Screen/y DEO2 .Screen/pixel DEO
		( incr ) INC2
		OVR2 OVR2 GTS2 ,&hor JCN
	POP2 POP2

RTN

@pointer_icn [ 80c0 e0f0 f8e0 1000 ]
@hand_icn    [ 4040 4070 f8f8 f870 ]
( pseudo-random number generator,
  based on two 16-bit xorshift algorithms by George Marsaglia
  http://www.jstatsoft.org/v08/i14/paper )

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr $2 &pixel  $1 &sprite $1 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

( program )

|0100 ( -> )
	( init )
	;on-frame .Screen/vector DEO2

	( seed prng (must be nonzero) )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour   DEI #c0 SFT2 EOR2 ;prng2/x STA2
	#00 .DateTime/hour   DEI #04 SFT2
	#00 .DateTime/day    DEI #10 SFT2 EOR2
	#00 .DateTime/month  DEI #60 SFT2 EOR2
	    .DateTime/year  DEI2 #a0 SFT2 EOR2 ;prng2/y STA2
	;prng2/x LDA2 ;prng2/y LDA2 EOR2
	ORAk ,&non-zero JCN INC2 &non-zero
	;prng/seed STA2

	( theme )
	#0fe5 .System/r DEO2
	#0fc5 .System/g DEO2
	#0f25 .System/b DEO2
	BRK

@on-frame ( -> )
	#c0
	&loop
		,draw-pixel JSR
		INC
		DUP ,&loop JCN
	POP
	BRK

@draw-pixel
	,prng2 JSR
	#00 SWP .Screen/x DEO2
	#00 SWP .Screen/y DEO2
	#01 .Screen/pixel DEO
	JMP2r

@prng ( -- number* )
	( returns the next number in a 65,535-long sequence,
	  which is never zero but every other 16-bit number
	  appears once before the sequence repeats )
	( http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html )
	,&seed LDR2
	DUP2 #70 SFT2 EOR2
	DUP2 #09 SFT2 EOR2
	DUP2 #80 SFT2 EOR2
	,&seed STR2k POP
	JMP2r

	&seed $2

@prng2 ( -- number* )
	( returns the next number in a (2^32-1)-long sequence )
	( http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html )
	,&x LDR2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	,&y LDR2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP
	JMP2r

	&x $2
	&y $2

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]

( variables )

|0000

@scroll [ &x $2 &y $2 &wait $1 ]

|0100 ( -> )
	#90ff .System/r DEO2 #9000 .System/g DEO2 #900f .System/b DEO2
	#08e0 .Screen/width DEI2 #01 SFT2 SUB2 .scroll/x STZ2
	#09b0 .scroll/y STZ2
	;frame .Screen/vector DEO2
	#30 .scroll/wait STZ
	BRK

@frame ( -> )
	#ffff
	&loop
	DUP2 ,row JSR
	INC2
	DUP2 .Screen/height DEI2 LTH2 ,&loop JCN
	POP2
	.scroll/wait LDZ ,&noscroll JCN
	.scroll/y LDZ2 INC2 .scroll/y STZ2
	BRK

	&noscroll
	.scroll/wait LDZ #01 SUB .scroll/wait STZ
	BRK

@row ( y* -- )
	DUP2 .Screen/y DEO2
	.scroll/y LDZ2 ADD2

	.Screen/width DEI2
	&loop
	#0001 SUB2
	OVR2 OVR2 .scroll/x LDZ2 ADD2 EOR2 DUP2 #0013 DIV2 #0013 MUL2 SUB2
	DUP #00 EQU ,&draw JCN
	DUP #05 EQU ,&draw JCN
	POP2
	&rest
	DUP2 ORA ,&loop JCN
	POP2 POP2
	JMP2r

	#15 .Screen/pixel DEO
	JMP2r

	&draw
	OVR2 .Screen/x DEO2
	#05 ADD .Screen/pixel DEO
	.Screen/y DEI2
	DUP2 INC2 .Screen/y DEO2
	#00 .Screen/pixel DEO
	.Screen/y DEO2
	POP
	,&rest JMP

( uxnasm projects/examples/demos/snake.tal bin/snake.rom && uxnemu bin/snake.rom )

%+  { ADD } %-   { SUB }              %/   { DIV }  
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ } 
%++ { ADD2 } %-- { SUB2 }              %// { DIV2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }  
%2/  { #01 SFT } %2* { #10 SFT }
%8//  { #03 SFT2 } %8**  { #30 SFT2 }
%MOD { DIVk MUL SUB }
%MAX { LTHk JMP SWP POP }
%RTN { JMP2r }
%TOS { #00 SWP }
%BRK? { #01 JCN BRK }


%DIFFICULTY { #06 }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr $2 &pixel  $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

( program )

@arena
	&w $1 &h $1 &timer $1
@apple
	&x $1 &y $1
@snake
	&direction $1 &length $1 &dead $1
	&x $1 &y $1
	&tail

|0100 ( -> )

	( theme ) 
	#0f7e .System/r DEO2 
	#0fe6 .System/g DEO2 
	#0f62 .System/b DEO2

	( vectors )
	;on-frame .Screen/vector DEO2
	;on-button .Controller/vector DEO2

	( resize )
	#00c8 .Screen/width DEO2
	#0100 .Screen/height DEO2

	( set arena )
	.Screen/width DEI2 8// NIP .arena/w STZ
	.Screen/height DEI2 8// NIP .arena/h STZ

	;reset JSR2

BRK

@on-frame ( -> )

	.arena/timer LDZ INC DUP .arena/timer STZ
		DIFFICULTY = BRK?

	( clear ) #00 ;draw-snake JSR2
	( update ) ;move JSR2
	( draw ) #02 .snake/dead LDZ + ;draw-snake JSR2
		#83 ;draw-apple JSR2
	( score ) .snake/length LDZ #41 ;draw-score JSR2
	( reset ) #00 .arena/timer STZ

BRK

@on-button ( -> )

	.Controller/button DEI 
	DUP #08 ! ,&no-escape JCN
		;reset JSR2
		&no-escape
	#04 SFT DUP #00 = ,&skip JCN
		DUP .snake/direction STZ
		&skip
	POP

BRK

@reset ( -- )

	#00 ;draw-snake JSR2
	#00 ;draw-apple JSR2

	.arena/w LDZ 2/ #01 - .snake/x STZ
	.arena/h LDZ 2/ #01 - .snake/y STZ
	#00 .snake/dead STZ
	#00 .snake/length STZ
	#00 .snake/direction STZ

	#03 ;draw-snake JSR2
	;add-apple JSR2

RTN

@move ( -- )

	( tail )
	.snake/x LDZ2 STH2
	.snake/length LDZ #00
	&loop
		( pop ) DUP 2* .snake/tail + LDZ2 STH2 SWP2r
		( push ) DUP 2* .snake/tail + STH2r ROT STZ2
		INC GTHk ,&loop JCN
	POP2
	POP2r

	.snake/dead LDZ #00 = JMP RTN

	.snake/direction LDZ
	DUP #01 ! ,&no-up JCN
		.snake/y LDZ #01 - 
			.arena/h LDZ MAX
			.snake/y STZ
		&no-up
	DUP #02 ! ,&no-down JCN
		.snake/y LDZ INC
			.arena/h LDZ MOD
			.snake/y STZ
		&no-down
	DUP #04 ! ,&no-left JCN
		.snake/x LDZ #01 - 
			.arena/w LDZ MAX
			.snake/x STZ
		&no-left
	DUP #08 ! ,&no-right JCN
		.snake/x LDZ INC 
			.arena/w LDZ MOD
			.snake/x STZ
		&no-right
	POP

	( detect collision with apple )
	.snake/x LDZ2 .apple/x LDZ2 NEQ2 ,&no-collision-apple JCN
		#00 ;draw-apple JSR2
		.snake/length LDZ INC .snake/length STZ
		;add-apple JSR2
		;move JSR2
		&no-collision-apple

	.snake/length LDZ #01
	&loop-body
		( pop ) DUP 2* .snake/tail + LDZ2 
		.snake/x LDZ2 NEQ2 ,&no-collision-body JCN
			#01 .snake/dead STZ
			#03 ;draw-snake JSR2
			&no-collision-body
		INC GTHk ,&loop-body JCN
	POP2

RTN

@add-apple ( -- )

	.DateTime/hour DEI2 .DateTime/minute DEI2 MUL2 #1234 MUL2 +
		.arena/w LDZ MOD .apple/x STZ
	.DateTime/hour DEI2 .DateTime/minute DEI2 MUL2 #abcd MUL2 +
		.arena/h LDZ MOD .apple/y STZ

RTN

@draw-snake ( color -- )

	STH
	( draw tail )
	;snake-icns .Screen/addr DEO2
	.snake/length LDZ #00
	&loop
		DUP 2* .snake/tail + LDZ TOS 8** .Screen/x DEO2
		DUP 2* .snake/tail + INC LDZ TOS 8** .Screen/y DEO2
		STHkr .Screen/sprite DEO
		INC GTHk ,&loop JCN
	POP2
	( draw head )
	.snake/x LDZ TOS 8** .Screen/x DEO2
	.snake/y LDZ TOS 8** .Screen/y DEO2
	;snake-icns/face .Screen/addr DEO2
	STHr .Screen/sprite DEO

RTN

@draw-apple ( color -- )

	.apple/x LDZ TOS 8** .Screen/x DEO2
	.apple/y LDZ TOS 8** .Screen/y DEO2
	;apple-chr .Screen/addr DEO2
	.Screen/sprite DEO

RTN

@draw-score ( score color -- )

	STH
	#0010 .Screen/x DEO2
	#0010 .Screen/y DEO2
	DUP #04 SFT TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		( draw ) STHr .Screen/sprite DEO

RTN

( assets )

@snake-icns
	7eff ffff ffff ff7e
	&face
	7eff ffdb ffe7 ff7e
@apple-chr
	0000 76ff ffff 7e3c
	1008 0000 0000 0000
@font-hex ( 0-F )
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080 

(dvd.tal by @marzhall - https://github.com/marzhall/dvd_screen)

( devices )
|00 @System  [ &vector $2 &pad      $6  &r      $2 &g     $2 &b      $2 ]
|20 @Screen  [ &vector $2 &width $2 &height $2 &pad   $2 &x $2 &y  $2 &addr $2 &pixel $1 &sprite $1 ]

( a -- a+1 )
%ADD-X {
    .Screen/x DEI2
    ADD2
    .Screen/x DEO2
}

( a -- a-1 )
%SUB-X {
    .Screen/x DEI2
    SWP2
    SUB2
    .Screen/x DEO2
}

( a -- a+1 )
%ADD-Y {
    .Screen/y DEI2
    ADD2
    .Screen/y DEO2
}

%RTN { JMP2r }

%color-clear { #40 } ( clear sprite from fg )

( zero page )
|0000
@dvd-loc [ &x $2 &y $2 ]
@dvd-direction [ &x $2 &y $2 ]

( main program )
|0100
      ( set system colors )
      #2ce9 .System/r DEO2
      #01c0 .System/g DEO2
      #2ce5 .System/b DEO2

      ( set initial dvd location )
      #000f .dvd-loc/x STZ2
      #00ff .dvd-loc/y STZ2

      ( set initial dvd direction )
      #0001 .dvd-direction/x STZ2
      #0001 .dvd-direction/y STZ2

      ;on-frame .Screen/vector DEO2
BRK

@on-frame ( -> )
    .dvd-loc/x LDZ2
    .Screen/x DEO2
    .dvd-loc/y LDZ2
    .Screen/y DEO2

    #00 ;draw-dvd JSR2

    ;handle-direction-change-x JSR2
    .dvd-loc/x LDZ2
    .dvd-direction/x LDZ2
    ;add2-signed JSR2
    DUP2
    .dvd-loc/x STZ2
    .Screen/x DEO2

    ;handle-direction-change-y JSR2
    .dvd-loc/y LDZ2
    .dvd-direction/y LDZ2
    ;add2-signed JSR2
    DUP2
    .Screen/y DEO2
    .dvd-loc/y STZ2

    #01 ;draw-dvd JSR2
BRK

@dee fcc6 c3c3 c3c3 c6fc
@vee c3c3 6666 243c 3c18
@line 0000 00ff ff00 0000

@draw-dvd ( a -- )
    ( draw the DVD symbol )
    DUP DUP DUP DUP DUP DUP
    ;dee .Screen/addr DEO2
    .Screen/sprite DEO

    #000a ADD-X
    ;vee .Screen/addr DEO2
    .Screen/sprite DEO

    #000a ADD-X
    ;dee .Screen/addr DEO2
    .Screen/sprite DEO

    ( draw the underscore line )
    #0015 SUB-X
    #0008 ADD-Y
    ;line .Screen/addr DEO2
    .Screen/sprite DEO
    #0008 ADD-X
    .Screen/sprite DEO
    #0008 ADD-X
    .Screen/sprite DEO
    #0005 ADD-X
    .Screen/sprite DEO
    RTN

@handle-direction-change-x ( -- )
    .dvd-loc/x LDZ2
    #001c ADD2 ( add padding for heigh of chars )
    .Screen/width DEI2
    GTH2 ,&must-flip-left JCN
        ,&check-flip-right JMP
    &must-flip-left
        .dvd-direction/x LDZ2
        #8000 ORA2
        .dvd-direction/x STZ2
        RTN

    &check-flip-right
    .dvd-loc/x LDZ2
    #0001
    LTH2 ,&must-flip-right JCN
        RTN
    &must-flip-right
        .dvd-direction/x LDZ2
        #8000 EOR2
        .dvd-direction/x STZ2
        RTN

@handle-direction-change-y ( -- )
    .dvd-loc/y LDZ2
    #0010 ADD2 ( add padding for heigh of chars )
    .Screen/height DEI2
    GTH2 ,&must-flip-up JCN
        ,&check-flip-down JMP
    &must-flip-up
        .dvd-direction/y LDZ2
        #8000 ORA2
        .dvd-direction/y STZ2
        RTN

    &check-flip-down
    .dvd-loc/y LDZ2
    #0001
    LTH2 ,&must-flip-down JCN
        RTN
    &must-flip-down
        .dvd-direction/y LDZ2
        #8000 EOR2
        .dvd-direction/y STZ2
        RTN

@add2-signed ( a [ signed b ] -- a +/- [ signed b ] )
    DUP2
    #8000 AND2
    POP
    ,&negative-add2 JCN
        ( if we're positive )
        ADD2
        RTN

    &negative-add2
        #8000 EOR2
        SUB2
        RTN
( Game Of Life
	Any live cell with fewer than two live neighbours dies, as if by underpopulation.
	Any live cell with two or three live neighbours lives on to the next generation.
	Any live cell with more than three live neighbours dies, as if by overpopulation.
	Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction. )

%+  { ADD } %-   { SUB } 
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ }
%++ { ADD2 } %-- { SUB2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%2/  { #01 SFT }
%8/  { #03 SFT }
%2//  { #01 SFT2 } %8//  { #03 SFT2 }
%2**  { #10 SFT2 } %8**  { #30 SFT2 }
%40** { #60 SFT2 }
%8MOD { #07 AND } %2MOD { #01 AND }

%TOS  { #00 SWP } 
%RTN  { JMP2r }   
%SFL  { #40 SFT SFT }

%WIDTH { #40 }   %HEIGHT { #40 }
%WIDTH-MOD { #3f AND }   %HEIGHT-MOD { #3f AND }
%IN-RANGE { INCk SWP SUB2 GTH }

%BANK1 { #8000 } %BANK2 { #a000 }

%GET-SIZE { WIDTH TOS 8// 40** }
%GET-ITERATORS { SWP2k POP NIP }
%GET-ITER { OVR2 NIP OVR SWP }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g     $2 &b      $2 ]
|10 @Console    [ &vector $2 &read $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr  $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel $1 ]

( variables )

|0000

@world   [ &frame $1 &count $2 ]
@anchor  [ &x $2 &y $2 ]
@pointer [ &x $2 &y $2 ]
@rle     [ &x $1 &y $1 &n $1 ]

( program )

|0100 ( -> )

	( theme ) 
	#02cf .System/r DEO2 
	#02ff .System/g DEO2 
	#024f .System/b DEO2

	( vectors )
	;on-input   .Console/vector DEO2
	;on-frame   .Screen/vector DEO2
	;on-mouse   .Mouse/vector DEO2
	;on-control .Controller/vector DEO2

	( glider )
	#07 #03 ;set-cell JSR2
	#07 #04 ;set-cell JSR2
	#05 #04 ;set-cell JSR2
	#07 #05 ;set-cell JSR2
	#06 #05 ;set-cell JSR2

	.Screen/width DEI2 2// WIDTH TOS -- .anchor/x STZ2
	.Screen/height DEI2 2// HEIGHT TOS -- .anchor/y STZ2

BRK

@on-frame-paused ( -> )

BRK

@on-frame ( -> )
	
	.Mouse/state DEI #00 = #01 JCN [ BRK ]

	( incr frame ) .world/frame LDZ INC [ DUP ] .world/frame STZ
	( reset count ) #0000 .world/count STZ2

	#03 AND #00 = #01 JCN [ BRK ] 

	( clear buffer )
	BANK2 STH2k GET-SIZE ++ STH2r
	&clear-loop
		DUP2 #0000 SWP2 STA2
		INC2 INC2 GTH2k ,&clear-loop JCN
	POP2 POP2

	( run grid )
	#00 HEIGHT
	&ver
		#00 WIDTH
		&hor
			GET-ITERATORS
			( x y ) DUP2
			( neighbours ) DUP2 ;get-neighbours JSR2
			( state ) ROT ROT ;get-cell JSR2
			,run-cell JSR
			SWP INC SWP
			LTHk ,&hor JCN
		POP2
		SWP INC SWP
		LTHk ,&ver JCN
	POP2

	( move buffer )
	BANK2 DUP2 GET-SIZE ++ SWP2
	&copy-loop
		DUP2 LDA2k
		SWP2 #2000 -- STA2
		INC2 INC2 GTH2k ,&copy-loop JCN
	POP2 POP2

	;draw-grid JSR2

BRK

@run-cell ( x y neighbours state -- )
	
	#00 = ,&dead JCN
	&alive
		DUP #02 < ,&dies JCN
		DUP #03 > ,&dies JCN
		&lives POP ,save-cell JSR RTN
		&dies POP POP2 RTN
	&dead
		DUP #03 = ,&birth JCN POP POP2 RTN
		&birth POP ,save-cell JSR RTN

RTN

@save-cell ( x y -- )
	
	( get index )
	HEIGHT-MOD SWP WIDTH-MOD SWP
	TOS 8** ROT 8/ TOS ++ [ BANK2 ++ ]
	( incr count )
	.world/count LDZ2 INC2 .world/count STZ2
	( save in buffer )
	STH2
	DUP2 POP 8MOD #01 SWP SFL 
	LDAkr STHr SWP ORA
	STH2r STA

RTN

@on-mouse ( -> )
	
	( clear last cursor )
	;cursor .Screen/addr DEO2 
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO

	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2 

	( colorize on state )
	#42 [ .Mouse/state DEI #00 ! ] + .Screen/sprite DEO

	.Mouse/state DEI #00 ! #01 JCN [ BRK ]

	.Mouse/x DEI2 DUP2 .anchor/x LDZ2 >> ROT ROT .anchor/x LDZ2 WIDTH DUP ADD TOS ++ INC2 << #0101 ==
	.Mouse/y DEI2 DUP2 .anchor/y LDZ2 >> ROT ROT .anchor/y LDZ2 HEIGHT DUP ADD TOS ++ << #0101 ==
	#0101 == #01 JCN [ BRK ]

	.Mouse/x DEI2 .anchor/x LDZ2 SUB2 2/ NIP
	.Mouse/y DEI2 .anchor/y LDZ2 SUB2 2/ NIP
	;set-cell JSR2
	
	;draw-grid JSR2

BRK

@on-control ( -> )

	.Controller/key DEI #00 ! #01 JCN [ BRK ]

	.Controller/key DEI #20 ! ,&no-toggle JCN
		;on-frame
		.Screen/vector DEI2 ;on-frame-paused == ,&swap JCN
			POP2 ;on-frame-paused
			&swap
		.Screen/vector DEO2
		&no-toggle

BRK

@draw-grid ( -- )
	
	( draw cell count )
	.anchor/x LDZ2 .Screen/x DEO2
	.anchor/y LDZ2 HEIGHT DUP ADD TOS ++ .Screen/y DEO2
	.world/count LDZ2 #03 ;draw-short JSR2

	HEIGHT #00
	&ver
		DUP TOS 2** .anchor/y LDZ2 ++ .Screen/y DEO2
		WIDTH #00
		&hor
			DUP TOS 2** .anchor/x LDZ2 ++ .Screen/x DEO2
			GET-ITER ,get-cell JSR INC .Screen/pixel DEO
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2

RTN

@get-index ( x y -- index* )
	
	HEIGHT-MOD SWP WIDTH-MOD SWP
	TOS 8** ROT 8/ TOS ++ [ BANK1 ++ ]

RTN

@set-cell ( x y -- )
	
	DUP2 ,get-index JSR STH2
	POP 8MOD #01 SWP SFL 
	LDAkr STHr SWP ORA
	STH2r STA

RTN

@unset-cell ( x y -- )
	
	DUP2 ,get-index JSR STH2
	POP 8MOD #01 SWP SFL #ff EOR
	LDAkr STHr SWP AND
	STH2r STA

RTN

@get-cell ( x y -- cell )
	
	DUP2 ,get-index JSR LDA 
	NIP SWP
	8MOD
	SFT 2MOD

RTN 

@get-neighbours ( x y -- neighbours )
	
	( -1,-1 ) DUP2 #01 - [ SWP #01 - SWP ] ,get-cell JSR STH
	(  0,-1 ) DUP2 #01 -      ,get-cell JSR STH ADDr
	( +1,-1 ) DUP2 #01 - [ SWP INC SWP ] ,get-cell JSR STH ADDr
	( -1, 0 ) DUP2       [ SWP #01 - SWP ] ,get-cell JSR STH ADDr
	( +1, 0 ) DUP2       [ SWP INC SWP ] ,get-cell JSR STH ADDr
	( -1,+1 ) DUP2 INC [ SWP #01 - SWP ] ,get-cell JSR STH ADDr
	(  0,+1 ) DUP2 INC      ,get-cell JSR STH ADDr
	( +1,+1 )      INC [ SWP INC SWP ] ,get-cell JSR STH ADDr
	STHr

RTN

@draw-short ( short* color -- )

	STH SWP 
	DUP #04 SFT TOS 8** ;font-hex ++ .Screen/addr DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	DUP #04 SFT TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	( draw ) STHr .Screen/sprite DEO

RTN

@on-input ( -> )
	,&main JSR
	BRK

	&main
	.Console/read DEI #20 GTH JMP JMP2r ( ignore whitespace )
	.Console/read DEI LIT 'b EQU ,unset-run JCN
	.Console/read DEI LIT 'o EQU ,set-run JCN
	.Console/read DEI LIT '$ EQU ,input-eol JCN
	.Console/read DEI LIT '! EQU ,input-eop JCN
	LIT2 '0 '9 .Console/read DEI IN-RANGE ,input-number JCN
	;on-ignore-until-eol .Console/vector DEO2
	JMP2r

@unset-run ( -- )
	;unset-cell ,run JMP ( tail call )

@set-run ( -- )
	;set-cell ( fall through )

@run ( cell-fn* -- )
	STH2
	;on-frame-paused .Screen/vector DEO2
	.rle/n LDZk #00 ROT STZ
	DUP #00 NEQ JMP INC
	&loop ( count / cell-fn* )
		DUP #00 EQU ,&end JCN
		.rle/x LDZ .rle/y LDZ STH2kr JSR2
		.rle/x LDZk INC SWP STZ
		#01 SUB
		,&loop JMP
	&end
	POP POP2r
	JMP2r

@input-number ( -- )
	.rle/n LDZk #0a MUL
		.Console/read DEI LIT '0 SUB
		ADD SWP STZ
	JMP2r

@input-eol ( -- )
	WIDTH .rle/x LDZ SUB .rle/n STZ
	,unset-run JSR
	#00 .rle/x STZ
	.rle/y LDZk INC SWP STZ
	JMP2r

@input-eop ( -- )
	,input-eol JSR
	HEIGHT .rle/y LDZ GTH ,input-eop JCN
	;on-frame .Screen/vector DEO2
	#00 .rle/y STZ
	BRK

@on-ignore-until-eol ( -> )
	.Console/read DEI #0a EQU JMP BRK
	;on-input .Console/vector DEO2
	BRK

@cursor 
	80c0 e0f0 f8e0 1000

@font-hex
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080
( Dev/Time )

%+  { ADD } %-   { SUB }  %*  { MUL } %/   { DIV }  
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ } 
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 } 

%4*   { #20 SFT }
%10*  { #40 SFT }
%2**  { #10 SFT2 } %2// { #01 SFT2 }
%4//  { #02 SFT2 }
%10** { #40 SFT2 }
%20** { #50 SFT2 }

%TOS     { #00 SWP }
%RTN     { JMP2r }
%MOD     { DUP2 DIV MUL SUB }
%ABS2    { DUP2 #0f SFT2 EQU #05 JCN #0000 SWP2 -- }
%LTS2    { #8000 ++ SWP2 #8000 ++ GTH2 }
%GTS2    { #8000 ++ SWP2 #8000 ++ LTH2 }

%RADIUS    { #0040 }
%SCALEX  { 2// .center/x LDZ2 ++ RADIUS -- }
%SCALEY  { 2// .center/y LDZ2 ++ RADIUS -- }
%12HOURS { #0c MOD }

%IS-UC { DUP #40 > SWP #5b < AND }
%IS-LC { DUP #60 > SWP #7b < AND }
%IS-NUM { DUP #2f > SWP #3a < AND }

( devices )

|00 @System     [ &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto  $1 &pad    $1 &x      $2 &y      $2 &addr $2 &pixel $1 &sprite $1 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 ]

( variables )

|0000

@last 
	&day $1 &sec $1
@center
	&x $2 &y $2
@date
	&x $2 &y $2
@time
	&x $2 &y $2
@needles
	&hx $2 &hy $2 
	&mx $2 &my $2 
	&sx $2 &sy $2
	&zx $2 &zy $2
@buf
	&d $3 &h $2 &s1 $1 &m $2 &s2 $1 &s $3
@line
	&x0 $2 &y0 $2 &x $2 &y $2 &sx $2 &sy $2 
	&dx $2 &dy $2 &e1 $2 &e2 $2 &color $1

( program )

|0100 ( -> )
	
	( theme ) 
	#0ff8 .System/r DEO2 
	#0f08 .System/g DEO2 
	#0f08 .System/b DEO2

	( resize )
	#00f0 .Screen/width DEO2
	#0120 .Screen/height DEO2

	( vectors ) 
	;on-frame .Screen/vector DEO2

	( center )
	.Screen/width DEI2 2// 
		DUP2 .center/x STZ2
		DUP2 #0028 -- .date/x STZ2
		#0020 -- .time/x STZ2
	.Screen/height DEI2 2// 
		DUP2 .center/y STZ2
		DUP2 #0078 -- .date/y STZ2
		#006c ++ .time/y STZ2

	;draw-watchface JSR2

	( time buffer )
	LIT ': 
		DUP .buf/s1 STZ
		.buf/s2 STZ

( continue )

@on-frame ( -> )

	( once per second )
	.DateTime/second DEI 
	DUP .last/sec LDZ = ,&same-sec JCN
		( make time )
		.DateTime/hour DEI .buf/h ;decimal JSR2
		.DateTime/minute DEI .buf/m ;decimal JSR2
		DUP .buf/s ;decimal JSR2
		( draw label )
		.time/x LDZ2 .Screen/x DEO2
		.time/y LDZ2 .Screen/y DEO2
		;buf/h ;draw-text JSR2
		( draw needles )
		#00 ;draw-needles JSR2
		;make-needles JSR2
		#01 ;draw-needles JSR2
		DUP .last/sec STZ
		&same-sec
	POP

	( once per day )
	.DateTime/day DEI 
	DUP .last/day LDZ = ,&same-day JCN
		( make date )
		DUP .buf/d ;decimal JSR2
		( draw label )
		.date/x LDZ2 .Screen/x DEO2
		.date/y LDZ2 .Screen/y DEO2
		.DateTime/dotw DEI 4* TOS ;week-txt ++ ;draw-text JSR2
		.DateTime/month DEI 4* TOS ;month-txt ++ ;draw-text JSR2
		;buf/d ;draw-text JSR2
		DUP .last/day STZ
		&same-day
	POP

BRK

@draw-needles ( draw -- )

	STH
	.center/x LDZ2 .center/y LDZ2 
		OVR2 OVR2
		.needles/zx LDZ2 .needles/zy LDZ2 #02 STHkr * ;draw-line JSR2
		OVR2 OVR2
		.needles/sx LDZ2 .needles/sy LDZ2 #02 STHkr * ;draw-line JSR2
		OVR2 OVR2
		.needles/mx LDZ2 .needles/my LDZ2 #01 STHkr * ;draw-line JSR2
		OVR2 OVR2
		.needles/hx LDZ2 .needles/hy LDZ2 #01 STHr * ;draw-line JSR2
		( middle )
		#0001 -- .Screen/y DEO2 #0001 -- .Screen/x DEO2
		;middle-icn .Screen/addr DEO2
		#0a .Screen/sprite DEO

RTN

@draw-text ( addr* -- )

	( auto addr ) #06 .Screen/auto DEO
	&while
		LDAk
		DUP IS-LC ,&lc JCN
		DUP IS-UC ,&uc JCN
		DUP IS-NUM ,&num JCN
		DUP LIT '/ = ,&slash JCN
		DUP LIT ': = ,&colon JCN
		POP ;font/blank
		&end
		.Screen/addr DEO2
		#0303 .Screen/sprite DEO .Screen/sprite DEO
		.Screen/y DEI2 #0010 -- .Screen/y DEO2
		.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		INC2 LDAk ,&while JCN
	POP2
	( auto none ) #00 .Screen/auto DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2

RTN
	&lc #61 - TOS 10** ;font/lc ++ ,&end JMP
	&uc #41 - TOS 10** ;font/uc ++ ,&end JMP
	&num #30 - TOS 10** ;font/num ++ ,&end JMP
	&slash POP ;font/slash ,&end JMP
	&colon POP ;font/colon ,&end JMP

@draw-line ( x1* y1* x2* y2* color -- )
	
	( load ) .line/color STZ .line/y0 STZ2 .line/x0 STZ2 .line/y STZ2 .line/x STZ2
	.line/x0 LDZ2 .line/x LDZ2 -- ABS2 .line/dx STZ2
	.line/y0 LDZ2 .line/y LDZ2 -- ABS2 #0000 SWP2 -- .line/dy STZ2
	#ffff #00 .line/x LDZ2 .line/x0 LDZ2 LTS2 2** ++ .line/sx STZ2
	#ffff #00 .line/y LDZ2 .line/y0 LDZ2 LTS2 2** ++ .line/sy STZ2
	.line/dx LDZ2 .line/dy LDZ2 ++ .line/e1 STZ2
	&loop
		.line/x LDZ2 .Screen/x DEO2 
		.line/y LDZ2 .Screen/y DEO2 
		.line/color LDZ .Screen/pixel DEO
		[ .line/x LDZ2 .line/x0 LDZ2 == ] 
		[ .line/y LDZ2 .line/y0 LDZ2 == ] AND ,&end JCN
		.line/e1 LDZ2 2** .line/e2 STZ2
		.line/e2 LDZ2 .line/dy LDZ2 LTS2 ,&skipy JCN
			.line/e1 LDZ2 .line/dy LDZ2 ++ .line/e1 STZ2
			.line/x LDZ2 .line/sx LDZ2 ++ .line/x STZ2
		&skipy
		.line/e2 LDZ2 .line/dx LDZ2 GTS2 ,&skipx JCN
			.line/e1 LDZ2 .line/dx LDZ2 ++ .line/e1 STZ2
			.line/y LDZ2 .line/sy LDZ2 ++ .line/y STZ2
		&skipx
		;&loop JMP2
	&end

RTN

@draw-watchface ( -- )

	#3c00 
	&loop
		( dots )
		DUP TOS 2** ;table ++ LDA2 
			#0018 ;circle JSR2
			.Screen/x DEO2 .Screen/y DEO2 #01 .Screen/pixel DEO
		( markers )
		DUP #05 MOD ,&no-marker JCN
			DUP TOS 2** ;table ++ LDA2 
			STH2k #0018 ;circle JSR2 SWP2
			STH2r #001c ;circle JSR2 SWP2
				#01 ;draw-line JSR2
			&no-marker
		INC GTHk ;&loop JCN2
	POP2

RTN

@make-needles ( -- )

	[ #00 .DateTime/second DEI #1e + #3c MOD ] 2** ;table ++ LDA2
		#00a0 ,circle JSR .needles/zx STZ2 .needles/zy STZ2
	[ #00 .DateTime/second DEI ] 2** ;table ++ LDA2
		#0020 ,circle JSR .needles/sx STZ2 .needles/sy STZ2 
	[ #00 .DateTime/minute DEI ] 2** ;table ++ LDA2
		#0022 ,circle JSR .needles/mx STZ2 .needles/my STZ2 
	[ #00 .DateTime/hour DEI 12HOURS #20 SFTk NIP ADD ]
	( minute offset ) [ #00 .DateTime/minute DEI #0f / ++ ] 2** ;table ++ LDA2
		#002a ,circle JSR .needles/hx STZ2 .needles/hy STZ2

RTN

@circle ( cx cy radius* -- y* x* )

	STH2 SWP
	TOS 10** STH2kr // .center/x LDZ2 ++ #0080 10** STH2kr // -- 
	STH2 SWP2r
	TOS 10** STH2kr // .center/y LDZ2 ++  #0080 10** STH2kr // --
	POP2r STH2r

RTN

@decimal ( value* zp-label -- )

	STH
	DUP #0a DIV #30 + STHkr STZ
	#0a MOD #30 + STHr INC STZ

RTN

@week-txt
	"Sun $1 "Mon $1 "Tue $1 "Wed $1 "Thu $1 "Fri $1 
	"Sat $1

@month-txt
	"Jan $1 "Feb $1 "Mar $1 "Apr $1 "May $1 "Jun $1
	"Jul $1 "Aug $1 "Sep $1 "Oct $1 "Nov $1 "Dec $1

@table ( 60 positions on a circle )
	8000 8d00 9a02 a706 b40b c011 cb18 d520
	df2a e734 ee40 f44b f958 fd65 ff72 ff80
	ff8d fd9a f9a7 f4b4 eec0 e7cb dfd5 d5df
	cbe7 c0ee b4f4 a7f9 9afd 8dff 80ff 72ff
	65fd 58f9 4bf4 40ee 34e7 2adf 20d5 18cb
	11c0 0bb4 06a7 029a 008d 0080 0072 0265
	0658 0b4b 113f 1834 202a 2a20 3418 3f11
	4b0b 5806 6502 7200

@middle-icn
	40e0 4000 0000 0000

@font
	&num
	0018 2442 4242 4242 4242 4242 4224 1800
	0008 1828 0808 0808 0808 0808 0808 1c00
	0018 2442 4202 0202 0408 1020 4040 7e00
	0018 2442 0202 0438 0402 0202 0204 7800
	000c 0c14 1414 2424 2444 447e 0404 0e00
	007e 4040 4040 5864 4202 0202 0204 7800
	000c 1020 4040 5864 4242 4242 4224 1800
	007e 4202 0204 0404 0808 0810 1010 1000
	0018 2442 4242 2418 2442 4242 4224 1800
	0018 2442 4242 4242 261a 0202 0408 3000
	&uc
	0010 1028 2844 4444 8282 fe82 8282 0000
	00f8 4442 4242 4478 4442 4242 44f8 0000
	003c 4282 8280 8080 8080 8282 423c 0000
	00f8 4442 4242 4242 4242 4242 44f8 0000
	00fc 4240 4040 4878 4840 4040 42fc 0000
	80fe 4240 4040 447c 4440 4040 40e0 0000
	003a 4682 8080 8e82 8282 8282 463a 0000
	00ee 4444 4444 447c 4444 4444 44ee 0000
	0038 1010 1010 1010 1010 1010 1038 0000
	000e 0404 0404 0404 0404 4444 2810 0000
	00ee 4448 4850 5060 5050 4848 44ee 0000
	00e0 4040 4040 4040 4040 4040 42fe 0000
	0082 c6c6 c6aa aaaa 9292 9282 8282 0000
	00e2 4262 6262 5252 4a4a 4646 42e2 0000
	0038 4482 8282 8282 8282 8282 4438 0000
	00f8 4442 4242 4244 7840 4040 40f0 0000
	0038 4482 8282 8282 8282 829a 643a 0000
	00f8 4442 4242 4478 4844 4442 42e2 0000
	0010 2844 4440 2010 0804 4444 2810 0000
	00fe 9210 1010 1010 1010 1010 1038 0000
	00ee 4444 4444 4444 4444 4444 4438 0000
	0082 8282 8282 8244 4444 2828 1010 0000
	0082 8292 9292 9292 92ba aa44 4444 0000
	0042 4242 2424 1818 1824 2442 4242 0000
	0082 8282 4444 2828 1010 1010 1038 0000
	007e 4204 0408 0810 1020 2040 427e 0000
	&lc
	0000 0000 0030 0808 3848 4848 4834 0000
	0060 2020 202c 3222 2222 2222 322c 0000
	0000 0000 001c 2240 4040 4040 221c 0000
	000c 0404 0434 4c44 4444 4444 4c36 0000
	0000 0000 0018 2424 3c20 2020 2418 0000
	000c 1210 1038 1010 1010 1010 1038 0000
	0000 0000 0034 4a48 4830 4038 4444 4438
	00c0 4040 4058 6444 4444 4444 44ee 0000
	0010 0000 0030 1010 1010 1010 1038 0000
	0008 0000 0018 0808 0808 0808 0808 2810
	0060 2020 2022 2224 2438 2424 2272 0000
	0030 1010 1010 1010 1010 1010 1038 0000
	0000 0000 00a4 da92 9292 9292 9292 0000
	0000 0000 00d8 6444 4444 4444 44ee 0000
	0000 0000 0038 4482 8282 8282 4438 0000
	0000 0000 00d8 6442 4242 4242 6458 40e0
	0000 0000 0034 4c84 8484 8484 4c34 040e
	0000 0000 0068 3420 2020 2020 2070 0000
	0000 0000 0018 2424 1008 0424 2418 0000
	0010 1010 107c 1010 1010 1010 1408 0000
	0000 0000 00cc 4444 4444 4444 4c36 0000
	0000 0000 00ee 4444 4428 2828 1010 0000
	0000 0000 0092 9292 9292 92aa 4444 0000
	0000 0000 00ee 4428 1010 1028 44ee 0000
	0000 0000 00ee 4444 4448 2828 1010 2040
	0000 0000 007c 4408 0810 2020 447c 0000
	&colon
	0000 0000 0010 1000 0000 0000 1010 0000
	&slash
	0202 0404 0808 1010 2020 4040 8080 0000
	&blank
	0000 0000 0000 0000 0000 0000 0000 0000

( dev/controller/buttons )

%++ { INC2 } 
%-- { #0001 SUB2 }
%2// { #01 SFT2 }

( devices )

|00 @System     [ &vector $2 &pad    $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width  $2 &height $2 &pad   $2 &x      $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button $1 &key    $1 ] 

( variables )

|0000

@slime $1

( init )

|0100 ( -> )
	
	( theme ) 
	#0daf .System/r DEO2 
	#02ff .System/g DEO2 
	#035f .System/b DEO2

	( vectors ) 
	;on-frame .Screen/vector DEO2
	
	( set origin )
	.Screen/width DEI2 2// .Screen/x DEO2
	.Screen/height DEI2 2// .Screen/y DEO2

	;default_icn .Screen/addr DEO2
	#41 .Screen/sprite DEO
	#0a .slime STZ

BRK

@on-frame ( -> )

	#0a .slime STZ
	;default_icn .Screen/addr DEO2

	( hold ctrl key to change slime color )
	.Controller/button DEI #0f AND
		DUP #01 NEQ ,&no-ctrl JCN #05 .slime STZ &no-ctrl
		DUP #02 NEQ ,&no-alt JCN #0f .slime STZ &no-alt
	POP

	( clear ) #40 .Screen/sprite DEO

	( detect movement )
	.Controller/button DEI #f0 AND
		DUP #04 SFT #01 AND #01 NEQ ,&no-up JCN 
			( move ) 
			.Screen/y DEI2 -- .Screen/y DEO2 
			;up_icn .Screen/addr DEO2 &no-up
		DUP #05 SFT #01 AND #01 NEQ ,&no-down JCN 
			( move ) 
			.Screen/y DEI2 ++ .Screen/y DEO2 
			;down_icn .Screen/addr DEO2 &no-down
		DUP #06 SFT #01 AND #01 NEQ ,&no-left JCN 
			( move ) 
			.Screen/x DEI2 -- .Screen/x DEO2 
			;left_icn .Screen/addr DEO2 &no-left
		DUP #07 SFT #01 AND #01 NEQ ,&no-right JCN 
			( move ) 
			.Screen/x DEI2 ++ .Screen/x DEO2 
			;right_icn .Screen/addr DEO2 &no-right
	POP

	( draw face )
	#41 .Screen/sprite DEO

	( draw slime )
	;slime_icn .Screen/addr DEO2
	.slime LDZ .Screen/sprite DEO

BRK

@default_icn [ 3c7e ffdb ffe7 7e3c ]
@up_icn      [ 2466 e7db ffff 7e3c ]
@down_icn    [ 3c7e ffff dbe7 6624 ]
@left_icn    [ 3c7e ef1f 1fef 7e3c ]
@right_icn   [ 3c7e f7f8 f8f7 7e3c ]
@slime_icn   [ 0000 183c 3c18 0000 ]

( dev/controller/keys )

%+  { ADD } %-   { SUB }               %/  { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 }              %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%RTN { JMP2r }
%TOS { #00 SWP }
%LTS2  { #8000 ++ SWP2 #8000 ++ >> } 

( devices )

|00 @System     [ &vector $2 &pad    $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width  $2 &height $2 &pad   $2 &x      $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button $1 &key    $1 ]

( variables )

|0000

@center
	&x $2
	&y $2
@frame
	&w $2 &h $2
	&x0 $2 &y0 $2
	&x1 $2 &y1 $2
@color $1
@rect
	&x1 $2 &y1 $2 
	&x2 $2 &y2 $2

( init )

|0100 ( -> )

	( theme ) 
	#0ff7 .System/r DEO2 
	#0f07 .System/g DEO2 
	#0f07 .System/b DEO2

	( find center )
	.Screen/width DEI2 #01 SFT2 .center/x STZ2
	.Screen/height DEI2 #01 SFT2 .center/y STZ2

	( place controller )
	#0068 .frame/w STZ2
	#0030 .frame/h STZ2
	.center/x LDZ2 .frame/w LDZ2 #0002 // -- .frame/x0 STZ2
	.center/y LDZ2 .frame/h LDZ2 #0002 // -- .frame/y0 STZ2
	.frame/x0 LDZ2 .frame/w LDZ2 ++ .frame/x1 STZ2
	.frame/y0 LDZ2 .frame/h LDZ2 ++ .frame/y1 STZ2

	( vectors ) 
	;on-button .Controller/vector DEO2

	;draw-controller JSR2

BRK

@on-button ( -> )

	;draw-controller JSR2

BRK

@draw-controller ( -- )

	.Controller/button DEI STH

	( frame )
	.frame/x0 LDZ2 .frame/y0 LDZ2
	.frame/x1 LDZ2 .frame/y1 LDZ2
		#01 ;line-rect JSR2
	( d-pad )
	.frame/x0 LDZ2 #0010 ++ .Screen/x DEO2
	.frame/y0 LDZ2 #0010 ++ .Screen/y DEO2
	;controller-icn/dpad-up .Screen/addr DEO2
	#03 [ STHkr #04 SFT #01 AND DUP + - ] .Screen/sprite DEO
	.Screen/y DEI2 #0010 ++ .Screen/y DEO2
	;controller-icn/dpad-down .Screen/addr DEO2
	#03 [ STHkr #05 SFT #01 AND DUP + - ] .Screen/sprite DEO
	.Screen/y DEI2 #0008 -- .Screen/y DEO2
	.Screen/x DEI2 #0008 -- .Screen/x DEO2
	;controller-icn/dpad-left .Screen/addr DEO2
	#03 [ STHkr #06 SFT #01 AND DUP + - ] .Screen/sprite DEO
	.Screen/x DEI2 #0010 ++ .Screen/x DEO2
	;controller-icn/dpad-right .Screen/addr DEO2
	#03 [ STHkr #07 SFT #01 AND DUP + - ] .Screen/sprite DEO
	.Screen/x DEI2 #0008 -- .Screen/x DEO2
	;controller-icn/dpad .Screen/addr DEO2
	#03 .Screen/sprite DEO

	( options )
	.center/y LDZ2 #0009 ++ .Screen/y DEO2
	.center/x LDZ2 #0009 -- .Screen/x DEO2
	;controller-icn/option .Screen/addr DEO2
	#03 [ STHkr #02 SFT #01 AND DUP + - ] .Screen/sprite DEO
	.center/x LDZ2 #0004 ++ .Screen/x DEO2
	;controller-icn/option .Screen/addr DEO2
	#03 [ STHkr #03 SFT #01 AND DUP + - ] .Screen/sprite DEO

	( buttons )
	.center/y LDZ2 #0000 ++ .Screen/y DEO2
	.center/x LDZ2 #0018 ++ .Screen/x DEO2
	;controller-icn/button .Screen/addr DEO2
	#03 [ STHkr #01 SFT #01 AND - ] .Screen/sprite DEO
		.Screen/y DEI2 #000a ++ .Screen/y DEO2
		;font-hex #000b #30 SFT2 ++ .Screen/addr DEO2
		#03 .Screen/sprite DEO

	.center/y LDZ2 #0000 ++ .Screen/y DEO2
	.center/x LDZ2 #0024 ++ .Screen/x DEO2
	;controller-icn/button .Screen/addr DEO2
	#03 [ STHr #01 AND - ] .Screen/sprite DEO
		.Screen/y DEI2 #000a ++ .Screen/y DEO2
		;font-hex #000a #30 SFT2 ++ .Screen/addr DEO2
		#03 .Screen/sprite DEO

	.center/x LDZ2 #0010 -- .Screen/x DEO2
	.center/y LDZ2 #0010 -- .Screen/y DEO2
	.Controller/button DEI2 #03 ;draw-short JSR2

RTN

( generics )

@draw-short ( short* color -- )

	STH SWP 
	DUP #04 SFT TOS #30 SFT2 ;font-hex ++ .Screen/addr DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS #30 SFT2 ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	DUP #04 SFT TOS #30 SFT2 ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS #30 SFT2 ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	( draw ) STHr .Screen/sprite DEO

RTN

@line-rect ( x1* y1* x2* y2* color -- )

	( load ) .color STZ DUP2 STH2 .rect/y2 STZ2 .rect/x2 STZ2 DUP2 STH2 .rect/y1 STZ2 .rect/x1 STZ2
	STH2r INC2 STH2r
	&ver
		( save ) OVR2 .Screen/y DEO2
		( draw ) .rect/x1 LDZ2 .Screen/x DEO2 .color LDZ DUP .Screen/pixel DEO
		( draw ) .rect/x2 LDZ2 .Screen/x DEO2 .Screen/pixel DEO
		( incr ) SWP2 INC2 SWP2
		OVR2 OVR2 LTS2 ,&ver JCN
	POP2 POP2
	.rect/x1 LDZ2 INC2 .rect/x2 LDZ2 #0001 --
	&hor
		( save ) OVR2 .Screen/x DEO2
		( draw ) .rect/y1 LDZ2 .Screen/y DEO2 .color LDZ DUP .Screen/pixel DEO
		( draw ) .rect/y2 LDZ2 .Screen/y DEO2 .Screen/pixel DEO
		( incr ) SWP2 INC2 SWP2
		OVR2 OVR2 INC2 LTS2 ,&hor JCN
	POP2 POP2

RTN

@controller-icn
	&dpad       ffff ffff ffff ffff
	&dpad-up    7eff e7c3 ffff ffff
	&dpad-down  ffff ffff c3e7 ff7e
	&dpad-left  7fff efcf cfef ff7f
	&dpad-right feff f7f3 f3f7 fffe
	&option     0000 7eff ff7e 0000
	&button     3c7e ffff ffff 7e3c

@font-hex 
	003c 4242 4242 3c00 0018 0808 0808 1c00
	003c 4202 3c40 7e00 003c 421c 0242 3c00
	000c 1424 447e 0400 007e 407c 0242 3c00
	003c 407c 4242 3c00 007e 0204 0810 1000
	003c 423c 4242 3c00 003c 4242 3e02 3c00
	003c 4242 7e42 4200 007c 427c 4242 7c00
	003c 4240 4042 3c00 007c 4242 4242 7c00
	007e 4078 4040 7e00 007e 4078 4040 4000
( art by @ritualdust )

%+  { ADD } %-   { SUB }              %/   { DIV }  
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ } 
%++ { ADD2 } %-- { SUB2 }              %// { DIV2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }  

%8** { #30 SFT2 }
%10** { #40 SFT2 }

%DEBUG  { ;print-hex JSR2 #0a .Console/write DEO }
%DEBUG2 { SWP ;print-hex JSR2 ;print-hex JSR2 #0a .Console/write DEO }

%RTN { JMP2r }
%TOS { #00 SWP }
%DEC { #01 - }

%MOUSE { #82 }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr $2 &pixel  $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|40 @Audio1     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|50 @Audio2     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|60 @Audio3     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel  $1 ]
|a0 @File       [ &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]


|0000
	@room
		&x $2 &y $2
	@player
		&x $1 &y $1 &d $1

|0100

	( theme ) 
	#067f .System/r DEO2 
	#036f .System/g DEO2 
	#003f .System/b DEO2

	.Screen/width DEI2 #01 SFT2 #0040 -- .room/x STZ2
	.Screen/height DEI2 #01 SFT2 #0040 -- .room/y STZ2

	( vectors )
	;on-frame .Screen/vector DEO2
	;on-button .Controller/vector DEO2

	;entrance ;draw-dungeon JSR2

	#05 .player/x STZ
	#06 .player/y STZ
	
	MOUSE ;draw-mouse JSR2

BRK

@on-button ( -> )

	.Controller/button DEI
	DUP #00 ! ,&no-null JCN
		POP BRK
		&no-null
	DUP #10 ! ,&no-up JCN
		#00 .player/d STZ
		#00 ;draw-mouse JSR2
		.player/y LDZk DEC SWP STZ
		MOUSE ;draw-mouse JSR2
		&no-up
	DUP #20 ! ,&no-down JCN
		#01 .player/d STZ
		#00 ;draw-mouse JSR2
		.player/y LDZk INC SWP STZ
		MOUSE ;draw-mouse JSR2
		&no-down
	DUP #40 ! ,&no-left JCN
		#02 .player/d STZ
		#00 ;draw-mouse JSR2
		.player/x LDZk DEC SWP STZ
		MOUSE ;draw-mouse JSR2
		&no-left
	DUP #80 ! ,&no-right JCN
		#03 .player/d STZ
		#00 ;draw-mouse JSR2
		.player/x LDZk INC SWP STZ
		MOUSE ;draw-mouse JSR2
		&no-right
	POP

BRK

@on-frame ( -> )

	

BRK

@draw-mouse ( color -- )

	;spritesheet #29 .player/d LDZ + TOS DUP2 DEBUG2 10** ++ .Screen/addr DEO2
	.player/x LDZ TOS 8** .room/x LDZ2 ++ .Screen/x DEO2
	.player/y LDZ TOS 8** .room/y LDZ2 ++ .Screen/y DEO2
	#40 + .Screen/sprite DEO

RTN

@draw-dungeon ( stage* -- )

	STH2
	#1000
	&ver
		DUP TOS 8** .room/y LDZ2 ++ .Screen/y DEO2
		#1000
		&hor
			DUP TOS 8** .room/x LDZ2 ++ .Screen/x DEO2
			( get id ) STH2 DUP STH2r ROT OVR SWP #40 SFT + TOS
				( tile ) DUP2 STH2kr ++ LDA TOS 10** ;spritesheet ++ .Screen/addr DEO2
				( color ) STH2kr #0100 ++ ++ LDA .Screen/sprite DEO
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r

RTN

@print-hex ( value -- )
	
	STHk #04 SFT ,&parse JSR .Console/write DEO
	STHr #0f AND ,&parse JSR .Console/write DEO
	RTN
	&parse ( value -- char )
		DUP #09 GTH ,&above JCN #30 ADD RTN &above #09 SUB #60 ADD RTN

RTN

@mouse-icn
	ffff ffff ffff ffff 0000 0000 0000 0000

@spritesheet
	1111 11f1 1111 111f eeee ee0e eeee eee0
	f5bb 55bb 51b1 51ff 0a44 aa44 ae4e ae00
	55bb 55bb 1111 1111 aa44 aa44 eeee eeee
	ff11 11f1 1111 111f 00ee ee0e eeee eee0
	1111 1111 1111 1111 eeee eeee eeee eeee
	ff80 8080 80ff 8080 00ff ffff ffff ffff
	ff01 0101 01ff 0101 00fe fefe fefe fefe
	ffff 11ff 0ffd 71ff 00ee ee00 fa02 ee00
	ffff 11ff cffd f9ff 00ee ee00 7a02 6600
	ff8c 8f9f 9f8e ff00 0cff fcfe fefd ffff
	ff82 820a 390a ff00 007d 7df5 c6f5 ffff
	ff7d 7f6f 3d01 ff01 38fe d4fc fafe fefe
	0000 0000 0007 0808 0000 0000 0007 0f0f
	0000 0000 00ff 9191 0000 0000 006e 6e6e
	0000 0000 00ff 1111 0000 0000 00ee eeee
	0000 0000 00c0 0000 0000 0000 00c0 e0e0
	1111 1111 1111 111f eeee eeee eeee eee0
	51b1 51bf 51b1 51f1 ae4e ae40 ae4e ae0e
	bb55 3b15 111f 1111 44aa c4ea eee0 eeee
	bf55 bb55 1111 1111 40aa 44aa eeee eeee
	51b1 51b1 51b1 51f1 ae4e ae4e ae4e ae0e
	dfba afbf bfbf 9f80 a0c5 d5d5 d5c0 ffff
	f5fd cdfd 8dfd f901 0a06 7606 7606 fefe
	ffff 11ff f785 87ff 00ee ee00 7a7a 7800
	ffff 11ff cffd fdff 00ee ee00 7a02 6200
	381f 0520 2038 7000 0020 3a38 3800 7c00
	00ff 0000 0000 0000 0000 ff00 0000 0000
	1cec 2010 101c 3800 0010 dc1c 1c00 3e00
	0808 0000 0000 0000 0f0f 0700 0000 0000
	ff91 9100 0000 0000 6e6e 6e00 0000 0000
	ff11 1100 0000 0000 eeee ee00 0000 0000
	8000 0000 0000 0000 e0e0 c000 0000 0000
	1111 11f1 1111 11ff eeee ee0e eeee ee00
	51b1 51b1 1111 1111 ae4e ae4e eeee eeee
	aa55 ab95 8181 817f 55aa d4ea fefe fe80
	ffab 55ab 51a1 51ff 0054 aa54 ae5e ae00
	d5ab d5ab d1a1 d1ff 2a54 2a54 2e5e 2e00
	ffbe aaaa bf9f 80bf 80d5 d5d5 c0ff ffc0
	fdfd 6d2d fdf9 01f9 0216 96d6 06fe fe06
	ffff 817e ffff ffff 007e ff81 0000 0000
	ffff 91ff cffd f9ff 006e 6e00 7a02 6600
	0000 1c04 1830 303a 0a0e 1f0e 1e2e 2e55
	2838 3878 004c 4c00 283a 297d 3e7a 32ff
	1070 7878 0123 1200 1172 5375 1c3c 0c7e
	080e 1e1e 98c4 4800 884e caae 203c 307e
	80e0 8080 80e7 8888 e000 e0e0 e007 efef
	0000 0000 00c7 0808 0000 0000 00c7 efef
	080e 0808 08ce 0808 0e00 0e0e 0ec0 eeee
	55ab 55ab 51a1 51ff aa54 aa54 ae5e ae00
	ab55 ab55 8181 817f 54aa 54aa fefe fe80
	ab55 ab55 8181 817f 54aa 54aa fefe fe80
	bf7f bf77 9f81 817f 5cbe 6abe fcfe fe80
	ab55 ab95 8181 817f 54aa d4ea fefe fe80
	ffc0 8083 80c0 ffff ffff ffff ffff ff00
	ff00 80ff 8000 ffff ffff ffff ffff ff00
	ff07 03c3 0307 ffff fefe fefe fefe fe00
	ffff 91ff f785 ffd9 006e 6e00 7a7a 006e
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	080e 0808 080e 0808 0e00 0e0e 0e00 0e0e
	80e0 8080 80e0 8080 e000 e0e0 e000 e0e0
	ee88 88ee 8890 8000 00ee ee00 eefe fe7c
	0000 0000 0000 0000 0000 0000 0000 0000
	5ea1 51a1 51a1 51ae af5e ae5e ae5e ae5f
	7e81 8181 8181 817f fffe fefe fefe fe80
	7e81 41a1 51a1 51ff ff7e be5e ae5e ae00
	7e81 8185 8783 817f fffe fefa fcfe fefe
	7e81 8185 8783 817f fffe fefa fcfe fe80
	eaea eaea ffea ffaa 5555 5555 00ff 0055
	aaaa aaaa ff00 ffaa 5555 5555 00ff 0055
	afaf afaf ff17 ffab 5454 5454 00fe 0054
	ffff 11ff cffd c5ff 00ee ee00 7a02 7a00
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0e0e 040a 040e 0808 0000 0a04 0a00 0e0e
	e0e0 40a0 40e0 8080 0000 a040 a000 e0e0
	80e0 8080 e09f 9191 e000 e0e0 00ee ee6e
	080e 0808 0ef0 1012 0e00 0e0e 00ee eeec
	5ea1 51a1 51a1 51fe af5e ae5e ae5e ae01
	7f80 8080 8080 807f ffff ffff ffff ffff
	7e8d 8f9f f1e1 817f f7f6 f0ee 1efe fe80
	5ea1 51a1 51a1 51ff af5e ae5e ae5e ae00
	7e81 41a1 51a9 51fe ff7e be5e ae56 ae07
	ffff 18ff 7873 7474 00e7 e700 c7cc cbcb
	ffff 14ff 00ff 0000 00eb eb00 ff00 ffff
	ffff 18ff 1ece 2e2e 00e7 e700 e333 d3d3
	ffff 11ff ff85 ffd9 00ee ee00 7a7a 006e
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	ff91 91e0 8080 e080 6eee ee00 e0e0 00e0
	fe10 100e 0808 0e08 ecee ee00 0e0e 000e
	0000 0000 0000 55aa 0000 0000 0000 aa55
	552a ff80 efff 80ff aad5 00ff ff00 ffff
	55aa ff00 ffff 00ff aa55 00ff ff00 ffff
	55ab ff01 dfff 01ff aa54 00fe fe00 fefe
	ffff d700 00ff ffff 0000 ffff ff00 7ce2
	7474 7474 7000 00ff cbcb cbcb cfff ff00
	0000 0000 0000 00ff ffff ffff ffff ff00
	2e2e 2e2e 2e0e 0cff d3d3 d3d3 d3f3 f300
	ffff 817e ffff fbeb 007e ff81 0004 1414
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	00ff 4444 00ff 4444 00bb bbbb 00bb bbbb
	00fc 4848 00fc 4848 00b4 b6b6 02b6 b6b4
	ff01 1fff 011f ff01 00fe fe00 fefe 00fe
	ff80 ffff 80ff ffff 00ff ff00 ffff 0000
	ff00 afff 00fd ffff 00ff ff00 ffff 0000
	ff01 ffff 01ff ffff 00fe fe00 fefe 0000
	ffff ffff ffff ffff 3e2e ab3d efff d8f7
	ffa0 ffa8 58ff a8ff 005f 0057 a700 5700
	ff81 ff09 09ff 81ff 007e 00f6 f600 7e00
	ff57 5617 270c 0cff 00a9 a9e8 d9f3 f300
	ffff b9ef e9ef ffe7 0046 5610 5610 3c18
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	007f 8484 e080 8080 007b fbfb 00e0 e0e0
	00ff 4444 0003 0404 00bb bbbb 0003 0707
	0000 0000 0000 0000 0000 0000 0000 0000
	1fff 011f ff01 1dff fe00 fefe 00fe fe00
	5ea3 55ab 55ab 55ff af5c aa54 aa54 aa00
	7e81 55ab 55ab 55ff fffe aa54 aa54 aa00
	0101 ffff ffff ffff fefe 00ff c7b9 ff67
	81c1 ffff ffff ffff 7e3e 00ff 1de7 fff9
	ffff 8080 8080 ff55 00ff ffff ffff 00aa
	fffe 0101 0101 ff55 00ff fefe fefe 00aa
	3f18 181f 4e4e 26ff c7e7 e7e0 b3b1 d900
	efef adef efed fdff 185a 5a18 5a1a 5200
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 8080 00e0 8000 8101
	0000 0000 0000 0000 0000 0606 3636 b6b6
	1e01 0181 8181 817f fffe fefe fefe fe80
	ffff ffff ffff ffff ffff ae71 ffff c7fb
	ffff ffff ffff ffff fefe fe1c eefe c2be
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	ffff 817e ffff ffff 007e ff81 0008 347e
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	817e ff00 ff18 0081 7eff ffff 00e7 ffff
	fe81 c1a1 c1a1 c1ff 7f7e 3e5e 3e5e 3e00
	aa55 ab55 01c3 7d01 55aa 54aa febe 82fe
	0101 ffff ffff ffff fefe 00fe 78a6 fefa
	55ab f51b 11e1 817f aa54 eae4 ee1e fe80
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	ff55 ab81 8181 817f 00aa d4fe fefe fe80
	be41 a181 8181 817f 5fbe 5efe fefe fe80
	7d7d 017d 7d01 7dff 8282 fe82 82fe 8200
	7d7d 017d 7d01 7d7d 8282 fe82 82fe 8282
	d5ab 5db0 908f 837f 2a54 af4f eff0 fc80
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	ff88 ce96 f4f0 f695 fff8 def7 fdf1 f7b5
	ff0e a634 8270 32c1 ff4f ffff 9ff9 fff7
	898d 38fd 4f53 44d1 9fff fdff 7fff dffd
	017d 7d01 7d7d 017d fe82 82fe 8282 fe82
	ffff ffff ffff ffff ffaa ff55 ffaa 55aa
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	8d85 90b8 f2b7 848d bfc7 91f8 f6ff 9fef
	ffff ffff ffff ffff 5fbf 5fa7 59bf 47b8
	ffff ffff ffff ffff 55aa 55ff fff9 cfff
	ffff ffff ffff ffff 55aa 55bf 53bc 5fbf
	ffff ffff ffff ffff feaa fe54 feaa 54aa
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	ffff ffff ffff ffff 5faa 5fb5 5faa 55aa
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	42ff 7d41 82fa 6100 7cfc 027e fcfc 7e00


@sewers
	0c0d 0ea2 0e0e 0f00 0000 0000 0000 0000
	3c07 58b3 3858 3d00 0000 0000 0000 0000
	3c17 18c3 3828 3d00 0000 0000 0000 0000
	3c30 3132 3231 4e0e 0e0e 0e0e 0e0e 0f00
	3c50 8483 a344 2858 1858 6838 6828 3d00
	1c1d 1e5f 9441 0718 2718 5818 1858 3d00
	0000 003c 9441 22b4 64a4 3232 3232 3d00
	0000 003c 93a3 4183 9383 8383 8341 3d00
	0000 001c 5f94 5294 7d7e 6e6e 6f41 3d00
	000c 0e0e 4f94 4194 3d3c 5858 1841 3d00
	003c 1758 1894 4194 3d3c 1818 1850 3d00
	003c 1898 1894 4194 3d3c a024 33b1 3d00
	003c d374 d294 4494 3d3c 23b1 4144 3d00
	003c d193 9394 4194 3d3c 5052 4141 3d00
	004c e0c4 c4d4 82d4 4d1c 1d1e 1e1e 1f00
	00bc 0000 0000 00ca 0000 0000 0000 0000
	&colors
	8080 8080 8080 8000 0000 0000 0000 0000
	8080 8080 8080 8000 0000 0000 0000 0000
	8080 8080 8080 8000 0000 0000 0000 0000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	0000 0080 8080 8080 8080 8080 8080 8000
	0000 0080 8080 8080 8080 8080 8080 8000
	0000 0080 8080 80a0 8080 8080 8080 8000
	0080 8080 8080 80a0 8080 8080 8080 8000
	0080 8080 8080 80a0 8080 8080 8080 8000
	0080 8080 8080 80a0 8080 8080 8080 8000
	0080 8080 8080 80a0 8080 8080 8080 8000
	0080 8080 8080 80a0 8080 8080 8080 8000
	00a0 8080 8080 8080 a080 8080 8080 8000
	00a0 0000 0000 0080 0000 0000 0000 0000

@crypt
	0000 0c0d 0e0e 0f00 0000 0000 0000 0000
	0c0d 4f55 5657 4e0e 0f00 0000 0000 0000
	3c55 5765 6667 5557 3d00 0000 0000 0000
	3c65 6732 3232 6567 3d00 0000 0000 0000
	3c30 3235 3637 3233 3d00 0000 0000 0000
	3c40 4345 4647 5451 3d00 0000 0000 0000
	3c75 7661 6263 7576 3d4c 604d 0000 0000
	3c30 3171 7273 3232 3d3c 703d 0000 0000
	3c50 4441 4141 4141 4e4f 803d 0000 0000
	3c50 ff41 4152 4141 9091 923d 0000 0000
	3c50 4141 4141 4141 5e1e 1e1f 0000 0000
	3c50 5241 4141 4441 3d00 0000 0000 0000
	1c1d 1e5f 415e 1e1e 1f00 0000 0000 0000
	0000 004c 824d 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	&colors
	0000 8080 8080 8000 0000 0000 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	8080 8080 8080 8080 8080 8080 0000 0000
	8080 8080 8080 8080 8080 8080 0000 0000
	8080 8080 8080 8080 8080 8080 0000 0000
	8080 8080 8080 8080 8080 8080 0000 0000
	8080 8080 8080 8080 8080 8080 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	8080 8080 8080 8080 8000 0000 0000 0000
	0000 00a0 80a0 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000

@entrance
	0c0d 0e0e 0e0e 0e0e 0f0c 0d0e 0e0f 0000
	3c07 0727 2807 0506 3d3c 1717 173d 0000
	3c17 287b 0728 1516 4e4f 1717 173d 0000
	3c30 3131 3131 2526 1717 31a2 313d 0000
	3c50 a0a1 4141 3432 1717 41b2 443d 0000
	3c50 b0b1 5241 4144 3431 4141 413d 0000
	3c50 4141 4141 4141 4141 5241 413d 0000
	1c1d 1e1e 5f41 5e1e 1e1e 1e1e 1e1f 0000
	0000 0000 4c81 4d00 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 9d00 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	&colors
	8080 8080 8080 8080 8080 8080 8080 0000
	8080 8080 8080 8080 8080 8080 8080 0000
	8080 8081 8080 8080 8080 8080 8080 0000
	8080 8080 8080 8080 8080 8080 8080 0000
	8080 8080 8080 8080 8080 8080 8080 0000
	8080 8080 8080 8080 8080 8080 8080 0000
	8080 8080 8080 8080 8080 8080 8080 0000
	8080 8080 8080 8080 8080 8080 8080 0000
	0000 0000 a080 a000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 8000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000

@upper
	007b 7b7b 7b7b 7b7b 7b0c 0e0e 0e0e 0f7b
	cfcf cfcf cfcf cfcf 7b3c 7758 7858 3d00
	0c0d 0e2e 0d0e 0e0e 0e2f 8707 8808 3d00
	3c05 063e 3868 3807 283e 0102 0202 3d00
	3c15 1628 090a 0b17 2828 1100 0010 3d00
	3c25 2628 191a 1b01 a028 1100 0020 3d00
	3c01 1313 1213 1321 1312 2100 5e1e 1f00
	3c14 c0c1 c1c1 c000 1010 1004 3dcf 7e00
	3c14 d0c2 c2c2 d010 1000 1041 3d00 0000
	3c11 c0c1 c1c1 c004 1010 0419 3d00 0000
	3c11 0404 0400 1004 0004 0412 3d00 0000
	3c85 8685 865e 5f70 5e5f 8586 3d00 0000
	1c1d 1e1e 1e1f 3c80 3d1c 1d1e 1f00 0000
	8e8e 8e8e 8e8e 4c60 4d00 0000 0000 0000
	0000 0000 00ef efef 0000 0000 0000 0000
	&colors
	0000 0000 0000 0000 0000 0000 0000 0000
	0080 8080 8080 8080 8080 8080 8080 8080
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 8080 8080 8080 8080 8000
	8080 8080 8080 9080 8080 8080 8080 8000
	8080 80a0 80a0 9080 8080 8080 8000 0000
	8080 a0a0 a0a0 b080 8080 8080 8000 0000
	8080 8080 8080 8080 8080 8080 8000 0000
	8080 8080 8080 8080 8080 8080 8000 0000
	8080 8080 8080 8080 8080 8080 8000 0000
	8080 8080 8080 a0b0 a000 0000 0000 0000
	0000 0000 0080 8080 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 0000 0000
( dev/audio )

%2// { #01 SFT2 }
%4** { #20 SFT2 }
%8** { #30 SFT2 }
%20MOD { #1f AND }
%RTN { JMP2r }

%GET-NOTE { #00 SWP ;melody ADD2 LDA }
%GET-HEXCHAR  { #00 SWP 8** ;font-hex ADD2 .Screen/addr DEO2 }

( devices )

|00 @System     [ &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y    $2 &addr  $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button $1 &key    $1 ]

( variables )

|0000

@timer     $1
@progress  $1
@selection $1
@offset
	&x $2 &y $2

|0100 ( -> )
	
	( theme )
	#0f8f .System/r DEO2 
	#0f8f .System/g DEO2 
	#0f80 .System/b DEO2 

	( vectors )
	;on-frame .Screen/vector DEO2
	;on-button .Controller/vector DEO2

	( setup synth )
	#0208 .Audio0/adsr DEO2
	;saw .Audio0/addr DEO2
	#0100 .Audio0/length DEO2
	#dd .Audio0/volume DEO ( TODO: turn ON )

	( center )
	.Screen/width DEI2 2// #0080 SUB2 .offset/x STZ2
	.Screen/height DEI2 2// #0040 SUB2 .offset/y STZ2

	;draw JSR2
	#02 ;draw-selector JSR2

BRK

@on-button ( -> )

	.Controller/button DEI #04 SFT
	[ #01 ] NEQk NIP ,&no-up JCN 
		.selection LDZ STHk 
		#00 ;draw-note JSR2
		[ STHkr GET-NOTE INC ] #00 STHkr ;melody ADD2 STA
		STHr #01 ;draw-note JSR2
		#02 ;draw-selector JSR2
		&no-up
	[ #02 ] NEQk NIP ,&no-down JCN 
		.selection LDZ STHk 
		#00 ;draw-note JSR2
		[ STHkr GET-NOTE #01 SUB ] #00 STHkr ;melody ADD2 STA
		STHr #01 ;draw-note JSR2
		#02 ;draw-selector JSR2
		&no-down
	[ #04 ] NEQk NIP ,&no-left JCN 
		#00 ;draw-selector JSR2
		.selection LDZ #01 SUB 20MOD .selection STZ
		#02 ;draw-selector JSR2
		&no-left
	[ #08 ] NEQk NIP ,&no-right JCN 
		#00 ;draw-selector JSR2
		.selection LDZ INC 20MOD .selection STZ
		#02 ;draw-selector JSR2
		&no-right
	POP
	
BRK

@on-frame ( -> )

	( incr ) .timer LDZ INC .timer STZ 
	( skip ) .timer LDZ #10 EQU #01 JCN [ BRK ]
	.progress LDZ 
	( play note )    DUP GET-NOTE .Audio0/pitch DEO
	( erase last )   DUP #01 SUB 20MOD #01 ,draw-note JSR
	( draw current ) #01 ,draw-note JSR
	( incr ) .progress LDZ INC 20MOD .progress STZ
	#00 .timer STZ

BRK

@draw ( -- )

	#20 #00
	&loop
		DUP #01 ,draw-note JSR
		INC GTHk ,&loop JCN
	POP2

RTN

@draw-note ( id color -- )

	STH STH
	( set x ) [ #00 STHkr ] 8** .offset/x LDZ2 ADD2 .Screen/x DEO2
	( set y ) [ #00 #00 STHkr ;melody ADD2 LDA ] 4** #0100 SWP2 SUB2 .offset/y LDZ2 ADD2 #0080 ADD2 .Screen/y DEO2
	( set addr ) ;marker-icn [ #00 .progress LDZ STHr EQU #08 MUL ADD2 ] .Screen/addr DEO2
	( draw ) STHr .Screen/sprite DEO

RTN

@draw-selector ( color -- )
	
	STH
	[ #00 .selection LDZ ] 8** .offset/x LDZ2 ADD2 .Screen/x DEO2
	#0070 .offset/y LDZ2 ADD2 .Screen/y DEO2
	;selector-icn .Screen/addr DEO2
	STHkr .Screen/sprite DEO

	.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
	.selection LDZ GET-NOTE STHr ,draw-byte JSR

RTN

@draw-byte ( byte color -- )
	
	STH 
	DUP 
		#04 SFT GET-HEXCHAR 
		( draw ) STHkr .Screen/sprite DEO
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
		#0f AND GET-HEXCHAR 
		( draw ) STHr .Screen/sprite DEO

RTN

@melody 
	54 52 54 4f 4b 4f 48 ff
	54 52 54 4f 4b 4f 48 ff
	54 56 57 56 57 54 56 54 
	56 52 54 52 54 50 54 ff 

@selector-icn
	0000 0010 387c 0000

@marker-icn
	3844 8282 8244 3800
	387c fefe fe7c 3800

@saw 
	0003 0609 0c0f 1215 181b 1e21 2427 2a2d
	3033 3639 3b3e 4143 4649 4b4e 5052 5557
	595b 5e60 6264 6667 696b 6c6e 7071 7274
	7576 7778 797a 7b7b 7c7d 7d7e 7e7e 7e7e
	7f7e 7e7e 7e7e 7d7d 7c7b 7b7a 7978 7776
	7574 7271 706e 6c6b 6967 6664 6260 5e5b
	5957 5552 504e 4b49 4643 413e 3b39 3633
	302d 2a27 2421 1e1b 1815 120f 0c09 0603
	00fd faf7 f4f1 eeeb e8e5 e2df dcd9 d6d3
	d0cd cac7 c5c2 bfbd bab7 b5b2 b0ae aba9
	a7a5 a2a0 9e9c 9a99 9795 9492 908f 8e8c
	8b8a 8988 8786 8585 8483 8382 8282 8282
	8182 8282 8282 8383 8485 8586 8788 898a
	8b8c 8e8f 9092 9495 9799 9a9c 9ea0 a2a5
	a7a9 abae b0b2 b5b7 babd bfc2 c5c7 cacd
	d0d3 d6d9 dcdf e2e5 e8eb eef1 f4f7 fafd 

@font-hex ( 0-F )
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080( dev/mouse )

%RTN   { JMP2r }
%ABS2  { DUP2 #0f SFT2 EQU #05 JCN #0000 SWP2 SUB2 }
%LTS2  { #8000 ADD2 SWP2 #8000 ADD2 GTH2 }
%GTS2  { #8000 ADD2 SWP2 #8000 ADD2 LTH2 }
%2** { #10 SFT2 }

( devices )

|00 @System     &vector $2 &wst      $1 &rst    $1 &pad    $4 &r      $2 &g      $2 &b      $2 &debug  $1 &halt $1
|20 @Screen     &vector $2 &width    $2 &height $2 &pad    $2 &x      $2 &y      $2 &addr   $2 &pixel  $1 &sprite $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state  $1 &pad    $3 &modx   $2 &mody   $2

|0000

@color $1
@line    
	&x0 $2 &y0 $2 &x     $2 &y     $2 &sx    $2 &sy $2 &dx $2 &dy $2 &e1 $2 &e2 $2
@pointer 
	&x  $2 &y  $2 &lastx $2 &lasty $2 &state $1

( program )

|0100 ( -> )

	( theme ) 
	#f030 .System/r DEO2 
	#f04f .System/g DEO2 
	#f050 .System/b DEO2

	( vectors ) 
	;on-mouse .Mouse/vector DEO2

BRK

@on-mouse ( -> )

	;draw-cursor JSR2

	( on down )
	.Mouse/state DEI #00 NEQ .pointer/state LDZ #00 EQU #0101 EQU2 ,on-mouse-down JCN

	( on drag )
	.Mouse/state DEI ,on-mouse-drag JCN
	.Mouse/state DEI .pointer/state STZ

BRK 

@on-mouse-down ( -> )

	( record start position )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .pointer/lastx STZ2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .pointer/lasty STZ2
	.Mouse/state DEI .pointer/state STZ

BRK

@on-mouse-drag ( -> )
	
	( draw line )
	.pointer/lastx LDZ2 
	.pointer/lasty LDZ2 
	.pointer/x LDZ2 
	.pointer/y LDZ2 
	#01 [ .Mouse/state DEI #10 EQU DUP ADD ADD ] 
	;draw-line JSR2

	( record last position )
	.Mouse/x DEI2 .pointer/lastx STZ2 
	.Mouse/y DEI2 .pointer/lasty STZ2
	.Mouse/state DEI .pointer/state STZ

BRK

@draw-cursor ( -- )
	
	;pointer-icn .Screen/addr DEO2

	( clear last cursor )
	.pointer/x LDZ2 .Screen/x DEO2
	.pointer/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2
	#43 .Mouse/state DEI #00 NEQ DUP ADD SUB .Screen/sprite DEO

RTN

@draw-line ( x1 y1 x2 y2 color -- )
	
	( load ) .color STZ .line/y0 STZ2 .line/x0 STZ2 .line/y STZ2 .line/x STZ2
	.line/x0 LDZ2 .line/x LDZ2 SUB2 ABS2 .line/dx STZ2
	.line/y0 LDZ2 .line/y LDZ2 SUB2 ABS2 #0000 SWP2 SUB2 .line/dy STZ2
	#ffff #00 .line/x LDZ2 .line/x0 LDZ2 LTS2 2** ADD2 .line/sx STZ2
	#ffff #00 .line/y LDZ2 .line/y0 LDZ2 LTS2 2** ADD2 .line/sy STZ2
	.line/dx LDZ2 .line/dy LDZ2 ADD2 .line/e1 STZ2
	&loop
		.line/x LDZ2 .Screen/x DEO2 
		.line/y LDZ2 .Screen/y DEO2 
		.color LDZ .Screen/pixel DEO
		[ .line/x LDZ2 .line/x0 LDZ2 EQU2 ] 
		[ .line/y LDZ2 .line/y0 LDZ2 EQU2 ] #0101 EQU2 ,&end JCN
		.line/e1 LDZ2 2** .line/e2 STZ2
		.line/e2 LDZ2 .line/dy LDZ2 LTS2 ,&skipy JCN
			.line/e1 LDZ2 .line/dy LDZ2 ADD2 .line/e1 STZ2
			.line/x LDZ2 .line/sx LDZ2 ADD2 .line/x STZ2
		&skipy
		.line/e2 LDZ2 .line/dx LDZ2 GTS2 ,&skipx JCN
			.line/e1 LDZ2 .line/dx LDZ2 ADD2 .line/e1 STZ2
			.line/y LDZ2 .line/sy LDZ2 ADD2 .line/y STZ2
		&skipx
		;&loop JMP2
	&end

RTN

@pointer-icn 80c0 e0f0 f8e0 1000
( piano )

%+  { ADD } %-   { SUB }  %*  { MUL } %/   { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }
%!~ { NEQk NIP }

%HALT { #01 #0f DEO }

%RTN  { JMP2r }
%TOS  { #00 SWP }
%MOD  { DUP2 / * - }
%GTS2 { #8000 ++ SWP2 #8000 ++ << }
%2/   { #01 SFT }
%2//  { #01 SFT2 }
%4//  { #02 SFT2 }
%8//  { #03 SFT2 }
%8**  { #30 SFT2 }

( devices )

|00 @System     &vector $2 &wst      $1 &rst    $1 &pad    $4 &r      $2 &g      $2 &b      $2 &debug  $1 &halt $1
|10 @Console    &vector $2 &read     $1 &pad    $5 &write  $1 &error  $1
|20 @Screen     &vector $2 &width    $2 &height $2 &pad    $2 &x      $2 &y      $2 &addr   $2 &pixel  $1 &sprite $1
|30 @Audio0     &vector $2 &position $2 &output $1 &pad    $3 &adsr   $2 &length $2 &addr   $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button   $1 &key    $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state  $1 &pad    $3 &modx   $2 &mody   $2
|a0 @File       &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name   $2 &length $2 &read   $2 &write $2

( variables )

|0000

@last-note   $1
@octave      $1
@pointer     
	&x $2 &y $2
@center      
	&x $2 &y $2
@adsr-view   
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
@wave-view   
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
@octave-view 
	&x1 $2 &y1 $2 &x2 $2 &y2 $2

( program )

|0100 ( -> )
	
	( theme ) 
	#0fe5 .System/r DEO2 
	#0fc5 .System/g DEO2 
	#0f25 .System/b DEO2

	( vectors ) 
	;on-frame   .Screen/vector DEO2
	;on-control .Controller/vector DEO2
	;on-mouse   .Mouse/vector DEO2
	;on-message .Console/vector DEO2

	( find center )
	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	( place octave )
	.center/x LDZ2 #0080 -- .octave-view/x1 STZ2
	.center/y LDZ2 #0008 ++ .octave-view/y1 STZ2
	.octave-view/x1 LDZ2 #0050 ++ .octave-view/x2 STZ2
	.octave-view/y1 LDZ2 #0018 ++ .octave-view/y2 STZ2

	( place adsr )
	.center/x LDZ2 #0020 -- .adsr-view/x1 STZ2
	.center/y LDZ2 #0008 ++ .adsr-view/y1 STZ2
	.adsr-view/x1 LDZ2 #00a0 ++ .adsr-view/x2 STZ2
	.adsr-view/y1 LDZ2 #0018 ++ .adsr-view/y2 STZ2

	( place waveform )
	.center/x LDZ2 #0080 -- .wave-view/x1 STZ2
	.center/y LDZ2 #0020 -- .wave-view/y1 STZ2
	.wave-view/x1 LDZ2 #0100 ++ .wave-view/x2 STZ2
	.wave-view/y1 LDZ2 #0020 ++ .wave-view/y2 STZ2

	( default settings )
	#ff .last-note STZ
	#041c .Audio0/adsr DEO2
	#dd .Audio0/volume DEO
	;sin-pcm .Audio0/addr DEO2
	#0100 .Audio0/length DEO2

	( inital drawing ) 
	;draw-octave JSR2
	;draw-adsr JSR2
	;draw-wave JSR2

BRK

@on-frame ( -> )
	
	.adsr-view/y2 LDZ2 #0020 -- .Screen/y DEO2

	#10 #00 
	&loop
		.adsr-view/x2 LDZ2 #003a -- .Screen/x DEO2
		#10 OVR - .Audio0/output DEI #0f AND < .Screen/pixel DEO
		.adsr-view/x2 LDZ2 #003a -- INC2 INC2 .Screen/x DEO2
		#10 OVR - .Audio0/output DEI #04 SFT < .Screen/pixel DEO
		.Screen/y DEI2 INC2 INC2 .Screen/y DEO2
		INC GTHk ,&loop JCN
	POP2

BRK

@on-control ( -> )

	( clear last cursor )
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO

	.Controller/key DEI
	[ LIT 'a ] !~ ,&no-c JCN
		#30 .octave LDZ #0c * + ;play JSR2 &no-c
	[ LIT 's ] !~ ,&no-d JCN
		#32 .octave LDZ #0c * + ;play JSR2 &no-d
	[ LIT 'd ] !~ ,&no-e JCN
		#34 .octave LDZ #0c * + ;play JSR2 &no-e
	[ LIT 'f ] !~ ,&no-f JCN
		#35 .octave LDZ #0c * + ;play JSR2 &no-f
	[ LIT 'g ] !~ ,&no-g JCN
		#37 .octave LDZ #0c * + ;play JSR2 &no-g
	[ LIT 'h ] !~ ,&no-a JCN
		#39 .octave LDZ #0c * + ;play JSR2 &no-a
	[ LIT 'j ] !~ ,&no-b JCN
		#3b .octave LDZ #0c * + ;play JSR2 &no-b
	[ LIT 'k ] !~ ,&no-c2 JCN
		#3c .octave LDZ #0c * + ;play JSR2 &no-c2
	[ #1b ] !~ ,&no-esc JCN HALT &no-esc
	POP

	( release )
	#00 .Controller/key DEO

	.Controller/button DEI 
	DUP #11 ! ,&cu JCN #3c ;play JSR2 &cu
	DUP #21 ! ,&cd JCN #3d ;play JSR2 &cd
	DUP #41 ! ,&cl JCN #3e ;play JSR2 &cl
	DUP #81 ! ,&cr JCN #3f ;play JSR2 &cr
	DUP #12 ! ,&au JCN #40 ;play JSR2 &au
	DUP #22 ! ,&ad JCN #41 ;play JSR2 &ad
	DUP #42 ! ,&al JCN #42 ;play JSR2 &al
	DUP #82 ! ,&ar JCN #43 ;play JSR2 &ar
	DUP #14 ! ,&su JCN #44 ;play JSR2 &su
	DUP #24 ! ,&sd JCN #45 ;play JSR2 &sd
	DUP #44 ! ,&sl JCN #46 ;play JSR2 &sl
	DUP #84 ! ,&sr JCN #47 ;play JSR2 &sr
	DUP #40 ! ,&l JCN .Audio0/addr DEI2 #0010 -- .Audio0/addr DEO2 &l
	DUP #80 ! ,&r JCN .Audio0/addr DEI2 #0010 ++ .Audio0/addr DEO2 &r
	POP

	;draw-octave JSR2
	;draw-wave JSR2

BRK

@on-message ( -> )
	
	.Console/read DEI ;play JSR2
	;draw-octave JSR2

BRK

@on-mouse ( -> )

	;draw-cursor JSR2 
	
	.Mouse/state DEI #00 ! #01 JCN [ BRK ]

	.Mouse/x DEI2 .Mouse/y DEI2 .wave-view ;within-rect JSR2 
		;on-touch-wave-view JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .adsr-view ;within-rect JSR2 
		;on-touch-adsr-view JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .octave-view ;within-rect JSR2 
		;on-touch-octave-view JCN2

BRK

@on-touch-wave-view ( -> )

	.Mouse/x DEI2 .wave-view/x1 LDZ2 -- .Audio0/length DEO2
	;draw-wave JSR2
	;draw-cursor JSR2 

BRK

@on-touch-octave-view ( -> )

	.Mouse/x DEI2 .octave-view/x1 LDZ2 -- 8// NIP #09 ! ,&no-mod JCN
		.Mouse/y DEI2 .octave-view/y1 LDZ2 -- 8// NIP 
		[ #00 ] !~ ,&no-incr JCN
			.octave LDZ #03 = ,&no-incr JCN
			.octave LDZ INC .octave STZ &no-incr
		[ #02 ] !~ ,&no-decr JCN
			.octave LDZ #ff = ,&no-decr JCN
			.octave LDZ #01 - .octave STZ &no-decr
		POP
		( release ) #00 .Mouse/state DEO
		;draw-octave JSR2
		BRK
	&no-mod

	.Mouse/x DEI2 .octave-view/x1 LDZ2 -- 8// NIP #06 > ,&no-key JCN
		.Mouse/x DEI2 .octave-view/x1 LDZ2 -- 8// ;notes ++ LDA .octave LDZ #0c * + ;play JSR2
		( release ) #00 .Mouse/state DEO
		;draw-octave JSR2
	&no-key

BRK 

@on-touch-adsr-view ( -> )

	.Mouse/x DEI2 .adsr-view/x1 LDZ2 -- 8// NIP #03 /
	[ #00 ] !~ ,&no-a JCN
		.Audio0/adsr DEI
		#10 .Mouse/state DEI #10 = #e0 * + +
		.Audio0/adsr DEO &no-a
	[ #01 ] !~ ,&no-d JCN
		.Audio0/adsr DEI
		DUP #f0 AND STH #01 .Mouse/state DEI #10 = #0e * + + #0f AND STHr +
		.Audio0/adsr DEO &no-d
	[ #02 ] !~ ,&no-s JCN
		.Audio0/adsr INC DEI
		#10 .Mouse/state DEI #10 = #e0 * + +
		.Audio0/adsr INC DEO &no-s
	[ #03 ] !~ ,&no-r JCN
		.Audio0/adsr INC DEI
		DUP #f0 AND STH #01 .Mouse/state DEI #10 = #0e * + + #0f AND STHr +
		.Audio0/adsr INC DEO &no-r
	[ #05 ] !~ ,&no-left JCN
		.Audio0/volume DEI 
		#10 .Mouse/state DEI #10 = #e0 * + +
		.Audio0/volume DEO &no-left
	[ #06 ] !~ ,&no-right JCN
		.Audio0/volume DEI
		DUP #f0 AND STH #01 .Mouse/state DEI #10 = #0e * + + #0f AND STHr +
		.Audio0/volume DEO &no-right
	POP

	( release ) #00 .Mouse/state DEO
	;draw-adsr JSR2
	;draw-cursor JSR2 

BRK

@play ( pitch -- )
	
	DUP #0c MOD .last-note STZ 
	.Audio0/pitch DEO

RTN

@draw-cursor ( -- )
	
	( clear last cursor )
	;cursor .Screen/addr DEO2 
	.pointer/x LDZ2 .Screen/x DEO2 
	.pointer/y LDZ2 .Screen/y DEO2 
	#40 .Screen/sprite DEO
	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2  
	( colorize on state )
	#41 [ .Mouse/state DEI #00 ! ] + .Screen/sprite DEO

RTN

@draw-octave ( -- )
	
	.octave-view/x1 LDZ2 .octave-view/y1 LDZ2

	OVR2 OVR2 ;keys-left-icns .last-note LDZ #00 = INC ;draw-key JSR2
	OVR2 #0008 ++ OVR2 ;keys-middle-icns .last-note LDZ #02 = INC ;draw-key JSR2
	OVR2 #0010 ++ OVR2 ;keys-right-icns .last-note LDZ #04 = INC ;draw-key JSR2
	OVR2 #0018 ++ OVR2 ;keys-left-icns .last-note LDZ #05 = INC ;draw-key JSR2
	OVR2 #0020 ++ OVR2 ;keys-middle-icns .last-note LDZ #07 = INC ;draw-key JSR2
	OVR2 #0028 ++ OVR2 ;keys-middle-icns .last-note LDZ #09 = INC ;draw-key JSR2
	SWP2 #0030 ++ SWP2 ;keys-right-icns .last-note LDZ #0b = INC ;draw-key JSR2

	.octave-view/x1 LDZ2 #0048 ++ .Screen/x DEO2

	;arrow-icns .Screen/addr DEO2
	.octave-view/y1 LDZ2 .Screen/y DEO2
	#01 .Screen/sprite DEO

	;arrow-icns #0008 ++ .Screen/addr DEO2
	.octave-view/y1 LDZ2 #0010 ++ .Screen/y DEO2
	#01 .Screen/sprite DEO

	;font-hex .octave LDZ #03 + #00 SWP 8** ++ .Screen/addr DEO2
	.octave-view/y1 LDZ2 #0008 ++ .Screen/y DEO2
	#03 .Screen/sprite DEO

RTN

@draw-key ( x* y* addr* color -- )
		
	STH
	.Screen/addr DEO2 
	SWP2 .Screen/x DEO2
	DUP2 #0018 ++ SWP2
	&loop
		( move ) DUP2 .Screen/y DEO2
		( draw ) STHkr .Screen/sprite DEO
		( incr ) .Screen/addr DEI2 #0008 ++ .Screen/addr DEO2  
		#0008 ++ GTH2k ,&loop JCN
	POP2 POP2 
	POPr

RTN

@draw-adsr ( -- )
	
	( adsr )
	.adsr-view/x1 LDZ2 .adsr-view/y1 LDZ2
		.Audio0/adsr DEI #04 SFT
		;draw-knob JSR2
	.adsr-view/x1 LDZ2 #0018 ++ .adsr-view/y1 LDZ2
		.Audio0/adsr DEI #0f AND
		;draw-knob JSR2
	.adsr-view/x1 LDZ2 #0030 ++ .adsr-view/y1 LDZ2
		.Audio0/adsr INC DEI #04 SFT
		;draw-knob JSR2
	.adsr-view/x1 LDZ2 #0048 ++ .adsr-view/y1 LDZ2
		.Audio0/adsr INC DEI #0f AND
		;draw-knob JSR2
	( volume )
	.adsr-view/x2 LDZ2 #0028 -- .adsr-view/y1 LDZ2
		.Audio0/volume DEI #04 SFT
		;draw-knob JSR2
	.adsr-view/x2 LDZ2 #0010 -- .adsr-view/y1 LDZ2
		.Audio0/volume DEI #0f AND
		;draw-knob JSR2

RTN

@draw-wave ( -- )
	
	( clear )
	.wave-view/x1 LDZ2
	.wave-view/y1 LDZ2
	.wave-view/x2 LDZ2 INC2
	.wave-view/y2 LDZ2
	#00 ;fill-rect JSR2

	#01 ;draw-wave-length JSR2

	.wave-view/x1 LDZ2 .Screen/x DEO2

	( waveform )
	#ff #00 
	&loop
		( dotted line )
		DUP #01 AND ,&no-dot JCN 
			.wave-view/y1 LDZ2 #0010 ++ .Screen/y DEO2
			#03 .Screen/pixel DEO
		&no-dot
		DUP TOS .Audio0/addr DEI2 ++ LDA 
		2/
		TOS 4// .wave-view/y1 LDZ2 ++ .Screen/y DEO2
		.Screen/x DEI2 INC2 .Screen/x DEO2
		( draw ) DUP 
			.Audio0/length DEI2 NIP > 
			.Audio0/length DEI2 #0100 !! #0101 == DUP ADD INC .Screen/pixel DEO
		INC GTHk ,&loop JCN
	POP2

	( range )
	.wave-view/x1 LDZ2 .Screen/x DEO2
	.wave-view/y1 LDZ2 #0010 -- .Screen/y DEO2
	.Audio0/addr DEI2 #02 ;draw-short JSR2
	.wave-view/x2 LDZ2 #0020 -- .Screen/x DEO2
	.Audio0/length DEI2 #02 ;draw-short JSR2

RTN

@draw-wave-length ( color -- )
	
	STH
	.wave-view/x1 LDZ2 .Audio0/length DEI2 ++ .Screen/x DEO2
	.wave-view/y1 LDZ2 DUP2 #0020 ++ SWP2
	&loop
		DUP2 .Screen/y DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POPr

RTN

@draw-knob ( x* y* value -- )

	( load ) STH .Screen/y DEO2  .Screen/x DEO2
	;knob-icns .Screen/addr DEO2 
		( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2 
	;knob-icns #0008 ++ .Screen/addr DEO2 
		( draw ) #01 .Screen/sprite DEO
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2 
	;knob-icns #0018 ++ .Screen/addr DEO2 
		( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0008 -- .Screen/x DEO2 
	;knob-icns #0010 ++ .Screen/addr DEO2 
		( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0004 ++ .Screen/x DEO2
	.Screen/y DEI2 #0008 ++ .Screen/y DEO2
	;font-hex #00 STHkr #30 SFT ++ .Screen/addr DEO2
		( draw ) #01 .Screen/sprite DEO
	.Screen/x DEI2 #0004 -- #00 #00 STHkr ;knob-offsetx ++ LDA ++ .Screen/x DEO2
	.Screen/y DEI2 #0010 -- #00 #00 STHr ;knob-offsety ++ LDA ++ .Screen/y DEO2
	;knob-icns #0020 ++ .Screen/addr DEO2
		( draw ) #05 .Screen/sprite DEO

RTN

@draw-short ( short* color -- )

	STH SWP 
	DUP #04 SFT TOS 8** ;font-hex ++ .Screen/addr DEO2
		( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		( draw ) STHkr .Screen/sprite DEO
	DUP #04 SFT TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		( draw ) STHkr .Screen/sprite DEO
	#0f AND TOS 8** ;font-hex ++ .Screen/addr DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		( draw ) STHr .Screen/sprite DEO

RTN

@fill-rect ( x1* y1* x2* y2* color -- )
	
	,&color STR
	( x1 x2 y1 y2 ) ROT2
	&ver
		( save ) DUP2 .Screen/y DEO2
		STH2 STH2 OVR2 OVR2 SWP2
		&hor
			( save ) DUP2 .Screen/x DEO2
			( draw ) ,&color LDR .Screen/pixel DEO
			( incr ) INC2
			OVR2 OVR2 GTS2 ,&hor JCN
		POP2 POP2 STH2r STH2r
		( incr ) INC2
		OVR2 OVR2 GTS2 ,&ver JCN
	POP2 POP2 POP2 POP2

RTN
	&color $1

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 LTH2 ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 GTH2 ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 LTH2 ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 GTH2 ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@cursor 
	80c0 e0f0 f8e0 1000 

@arrow-icns 
	0010 387c fe10 1000
	0010 1010 fe7c 3810 

@notes 
	30 32 34 35
	37 39 3b 3c

@keys-left-icns 
	7c7c 7c7c 7c7c 7c7c
	7c7c 7c7c 7c7c 7e7f
	7f7f 7f7f 7f7f 3e00 

@keys-middle-icns 
	1c1c 1c1c 1c1c 1c1c
	1c1c 1c1c 1c1c 3e7f
	7f7f 7f7f 7f7f 3e00 

@keys-right-icns 
	1f1f 1f1f 1f1f 1f1f
	1f1f 1f1f 1f1f 3f7f
	7f7f 7f7f 7f7f 3e00 

@knob-icns 
	0003 0c10 2020 4040
	00c0 3008 0404 0202
	4040 2020 100c 0300
	0202 0404 0830 c000
	0000 183c 3c18 0000 

@knob-offsetx 
	01 00 00 00 00 01 02 03
	05 06 07 08 08 08 08 07 

@knob-offsety 
	07 06 05 03 02 01 00 00
	00 00 01 02 03 05 06 07 

@font-hex ( 0-F )
	007c 8282 8282 827c 0030 1010 1010 1010
	007c 8202 7c80 80fe 007c 8202 1c02 827c
	000c 1424 4484 fe04 00fe 8080 7c02 827c
	007c 8280 fc82 827c 007c 8202 1e02 0202
	007c 8282 7c82 827c 007c 8282 7e02 827c
	007c 8202 7e82 827e 00fc 8282 fc82 82fc
	007c 8280 8080 827c 00fc 8282 8282 82fc
	007c 8280 f080 827c 007c 8280 f080 8080 

@piano-pcm
	8182 8588 8d91 959b a1a6 aaad b2b5 b8bd
	c1c7 cbd0 d5d9 dde1 e5e5 e4e4 e1dc d7d1
	cbc5 bfb8 b2ac a6a2 9c97 928d 8884 807c
	7977 7574 7372 7272 7273 7372 706d 6964
	605b 5650 4d49 4643 4342 4244 4548 4a4d
	5052 5556 5758 5554 5150 4c4a 4744 423f
	3d3c 3a38 3835 3431 3030 2f31 3336 393e
	4449 4e54 5a60 666b 7175 7b82 8990 989e
	a6ab b1b6 babd bebf bfbe bbb9 b6b3 b0ae
	aaa8 a6a3 a19e 9c9a 9997 9696 9798 9b9e
	a1a4 a6a9 a9ac adad adae aeaf b0b0 b1b1
	b3b3 b4b4 b4b3 b3b1 b0ad abab a9a9 a8a8
	a7a5 a19d 9891 8b84 7e77 726e 6b6b 6b6c
	6f71 7477 7776 7370 6c65 5e56 4e48 423f
	3d3c 3b3a 3a39 3838 3839 393a 3c3e 4146
	4a50 575b 6064 686a 6e70 7274 7677 7a7d

@violin-pcm
	8186 8d94 9ba0 a3a7 acb1 b5bc c2c7 cacc
	cecf d0d1 d3d5 d8db dee1 e3e5 e6e5 e5e3
	dfdc d7d0 c8c2 bbb2 a99f 968c 847c 746e
	675f 5851 4b43 3e3a 3533 312e 2c2b 2826
	2422 2122 2327 2d34 3c44 4c57 5f68 7075
	7b80 8487 8789 8a8c 8d90 9397 999c 9ea0
	a2a2 a2a0 9c97 9491 8f8e 908f 918f 8e88
	827a 726a 6058 5047 423f 3f40 4245 4748
	4949 4746 4545 4a4f 5863 717f 8b9a a6b1
	b8be c1c1 bfbd bab5 b1af acac aeb1 b7bc
	c2c9 cfd3 d5d4 d3d3 d1ce cbc6 c0ba b3ab
	a39a 8f85 7b72 6c67 6462 605f 5e5d 5b58
	5550 4d49 4848 4949 4a4d 5052 5558 5b5e
	6164 686c 7074 7677 7979 7a7b 7b7a 7977
	7473 6f6e 6b69 696b 6f72 7576 7574 716b
	655d 554e 4742 3f3f 4045 4b52 5a62 6b74

@sin-pcm
	8083 8689 8c8f 9295 989b 9ea1 a4a7 aaad
	b0b3 b6b9 bbbe c1c3 c6c9 cbce d0d2 d5d7
	d9db dee0 e2e4 e6e7 e9eb ecee f0f1 f2f4
	f5f6 f7f8 f9fa fbfb fcfd fdfe fefe fefe
	fffe fefe fefe fdfd fcfb fbfa f9f8 f7f6
	f5f4 f2f1 f0ee eceb e9e7 e6e4 e2e0 dedb
	d9d7 d5d2 d0ce cbc9 c6c3 c1be bbb9 b6b3
	b0ad aaa7 a4a1 9e9b 9895 928f 8c89 8683
	807d 7a77 7471 6e6b 6865 625f 5c59 5653
	504d 4a47 4542 3f3d 3a37 3532 302e 2b29
	2725 2220 1e1c 1a19 1715 1412 100f 0e0c
	0b0a 0908 0706 0505 0403 0302 0202 0202
	0102 0202 0202 0303 0405 0506 0708 090a
	0b0c 0e0f 1012 1415 1719 1a1c 1e20 2225
	2729 2b2e 3032 3537 3a3d 3f42 4547 4a4d
	5053 5659 5c5f 6265 686b 6e71 7477 7a7d

@tri-pcm
	8082 8486 888a 8c8e 9092 9496 989a 9c9e
	a0a2 a4a6 a8aa acae b0b2 b4b6 b8ba bcbe
	c0c2 c4c6 c8ca ccce d0d2 d4d6 d8da dcde
	e0e2 e4e6 e8ea ecee f0f2 f4f6 f8fa fcfe
	fffd fbf9 f7f5 f3f1 efed ebe9 e7e5 e3e1
	dfdd dbd9 d7d5 d3d1 cfcd cbc9 c7c5 c3c1
	bfbd bbb9 b7b5 b3b1 afad aba9 a7a5 a3a1
	9f9d 9b99 9795 9391 8f8d 8b89 8785 8381
	7f7d 7b79 7775 7371 6f6d 6b69 6765 6361
	5f5d 5b59 5755 5351 4f4d 4b49 4745 4341
	3f3d 3b39 3735 3331 2f2d 2b29 2725 2321
	1f1d 1b19 1715 1311 0f0d 0b09 0705 0301
	0103 0507 090b 0d0f 1113 1517 191b 1d1f
	2123 2527 292b 2d2f 3133 3537 393b 3d3f
	4143 4547 494b 4d4f 5153 5557 595b 5d5f
	6163 6567 696b 6d6f 7173 7577 797b 7d7f

@saw-pcm
	8282 8183 8384 8685 8888 8889 8a8b 8c8c
	8e8e 8f90 9092 9193 9494 9596 9699 9899
	9b9a 9c9c 9c9d 9ea0 a1a0 a2a2 a3a5 a4a6
	a7a7 a9a8 a9aa aaac adad aeae b0b0 b1b3
	b2b4 b5b5 b6b7 b9b8 b9bb babc bdbc bdbe
	bfc1 bfc1 c3c1 c4c5 c5c6 c6c7 c9c7 cbca
	cbcc cdcd cfcf d2d0 d2d2 d2d5 d4d5 d6d7
	d8d8 d9dc d9df dadf dce1 dde5 dce6 dceb
	cb1f 1b1e 1c21 1c21 1f23 2025 2127 2329
	2529 2829 2a2b 2b2e 2d2f 302f 3231 3234
	3334 3536 3836 3939 3a3b 3b3d 3e3d 3f40
	4042 4242 4444 4646 4748 474a 4a4b 4d4c
	4e4e 4f50 5052 5252 5554 5557 5759 5959
	5b5b 5c5d 5d5f 5e60 6160 6264 6365 6566
	6867 6969 6a6c 6c6d 6d6e 706f 7071 7174
	7475 7576 7777 797a 7a7c 7b7c 7e7d 7f7f
@load-rom ( filename* -- )
(
	Attempts to load the ROM from filename* and executes it. If the file exists
	and has non-zero length, this function does not return, because the new ROM
	is executing in its place.

	The screen and both stacks are cleared and all the device vectors are
	written to zero as a convenience. All other device bytes are left
	untouched, so they could introduce a device state to the next ROM that
	it's not expecting.
)

	.File/name DEO2

	( clear wst )
	#ab
	&wst-loop
	POP
	.System/wst STH DEIr STHr ,&wst-loop JCN

	( clear rst )
	LITr ab
	&rst-loop
	POPr
	.System/rst DEI ,&rst-loop JCN

	( clear screen )
	#01 .Screen/auto DEO
	#0000 .Screen/y DEO2
	.Screen/width DEI2 #0007 ADD2 #03 SFT2 #ffff MUL2 STH2
	&screen-yloop
		#0000 .Screen/x DEO2
		STH2kr
		&screen-xloop-bg
			#00 .Screen/sprite DEO
			INC2
			ORAk ,&screen-xloop-bg JCN
		POP2
		#0000 .Screen/x DEO2
		STH2kr
		&screen-xloop-fg
			#40 .Screen/sprite DEO
			INC2
			ORAk ,&screen-xloop-fg JCN
		POP2
		.Screen/y DEI2 #0008 ADD2
		DUP2 .Screen/y DEO2
		.Screen/height DEI2 LTH2 ,&screen-yloop JCN
	POP2r
	#00 .Screen/auto DEO

	( reset device vectors )
	LIT2r 0000 #00
	&device-vector-loop
	DUP2r STHk DEO2r
	#10 ADD
	DUP ,&device-vector-loop JCN
	POP POP2r

	( copy the zero-page-loader into f0-ff )
	;&zero-page-loader LITr f0
	&copy-loop
	LDAk STHkr STZ
	INC2 INCr
	STHkr ,&copy-loop JCN
	POP2 ( leave 00 on return stack )

	( prepare the stack for the zero-page-loader )
	( the more we prepare here in advance, the less we'll have to overwrite )
	STHkr #00fe ( arguments for STZ2 at ff )
	STHkr ( argument for JMP at fe (carry on) )
	DUPk #fcfe ( arguments for STZ2 at fd and JMP (repeat) )
	OVR2 #fafe ( arguments for STZ2 at fd and JMP (repeat) )
	OVR2 #f8fe ( arguments for STZ2 at fd and JMP (repeat) )
	OVR2 #f6fe ( arguments for STZ2 at fd and JMP (repeat) )
	OVR2 #f401 ( arguments for STZ2 at fd, plus an extra 01 )
	STHkr ( first argument for ADD2 )
	.File/success ( argument for DEI2 )
	#0100 .File/read ( arguments for DEO2 )
	#ff00 .File/length DEO2
	#00f0 JMP2

	&zero-page-loader
	( f0 ) DEO2
	( f1 ) DEI2
	( f2 ) ADD2
	( f3 ) &loop DUPr
	( f4 ) STH2k
	( f5 ) STAr
	( f6 ) INC2
	( f7 ) NEQ2k
	( f8 ) ,&loop
	( f9 )
	( fa ) JCN
	( fb ) POPr
	( fc ) POP2
	( fd ) STZ2 ( deletes f4-fd through looping )
	( fe ) JMP
	( ff ) STZ2 ( deletes fe-ff )

	&tmp $1

(
	app/neralie : clock with arvelie date

	TODO
		- use splash screen when FPS calculation is unstable
)

%+  { ADD } %-   { SUB }              %/   { DIV }  
%<  { LTH } %>   { GTH }  %=  { EQU } %!   { NEQ } 
%++ { ADD2 } %-- { SUB2 }              %// { DIV2 } 
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }  

%2*  { #10 SFT } %2/  { #01 SFT }
%4*  { #20 SFT } %4/  { #02 SFT }
%8*  { #30 SFT } %8/  { #03 SFT }
%10* { #40 SFT } %10/ { #04 SFT }
%20* { #50 SFT } %20/ { #05 SFT }

%2**  { #10 SFT2 } %2//  { #01 SFT2 }
%4**  { #20 SFT2 } %4//  { #02 SFT2 }
%8**  { #30 SFT2 } %8//  { #03 SFT2 }
%10** { #40 SFT2 } %10// { #04 SFT2 }
%20** { #50 SFT2 } %20// { #05 SFT2 }

%MOD  { DUP2 DIV MUL SUB }
%MOD2 { DIV2k MUL2 SUB2 }
%TOS { #00 SWP }

%h { .DateTime/hour   DEI }
%m { .DateTime/minute DEI }
%s { .DateTime/second DEI }

%1-- { #0001 -- }

%PAD { #0018 }
%RTN { JMP2r }

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|b0 @DateTime [ &year $2 &month $1 &day $1 &hour $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 ]

( variables )

|0000

@fps [ &current $1 &next $1 &second $1 ]
@number [ &started $1 &count $1 ]
@lines [ &addr $1 ]
@neralie [ &n0123 $2 &n4 $1 &n5 $1 &n6 $1 &n7 $1 &n8 $1 &n9 $1 &color $1 &x $2 &y $2 &w $2 &h $2 ]
@mul [ &ahi $1 &alo $1 &bhi $1 &blo $1 ]
@frame
	&x1 $2 &x2 $2 &y1 $2 &y2 $2

( program )

|0100

	( theme )  
	#0f3d .System/r DEO2 
	#0fe3 .System/g DEO2 
	#0fb2 .System/b DEO2

	( vectors )  
	;on-screen .Screen/vector DEO2

	( window )
	#0160 .Screen/width DEO2
	#0110 .Screen/height DEO2

	#01 .fps/current STZ

	( set size )
	PAD
	DUP2 .frame/x1 STZ2
	DUP2 .frame/y1 STZ2
	DUP2 .Screen/width DEI2 SWP2 -- #0001 -- .frame/x2 STZ2
	     .Screen/height DEI2 SWP2 -- .frame/y2 STZ2

	#01 .neralie/color STZ

	.frame/x1 LDZ2 .frame/x2 LDZ2
	OVR2 OVR2 .frame/y1 LDZ2 ;h JSR2
	          .frame/y2 LDZ2 ;h JSR2
	.frame/y1 LDZ2 #0001 -- .frame/y2 LDZ2 INC2
	OVR2 OVR2 .frame/x1 LDZ2 ;v JSR2
	          .frame/x2 LDZ2 ;v JSR2

@on-screen ( -> )

	;update-fps JSR2

	#00 .neralie/color STZ
	;draw-clock JSR2
	;neralie-calc JSR2

	#01 .neralie/color STZ
	;draw-date JSR2
	;draw-clock JSR2

BRK

@neralie-calc ( -- )

	( add up fractions of a pulse, store tenths in n6 )
	#0120 #00 h MUL2
	#00c0 #00 m MUL2 ADD2
	#00f8 #00 s MUL2 ADD2
	#0271 #00 .fps/next LDZ MUL2 #00 .fps/current LDZ DIV2 8** ADD2
	#01b0 ;modf JSR2 SWP2 #0017 MUL2 #03e8 DIV2 .neralie/n6 STZ POP

	( add up units and tens of pulses, store in n5 and n4 )
	#0042 #00 h MUL2 ADD2
	#005e #00 m MUL2 ADD2
	#000b #00 s MUL2 ADD2
	#000a ;modf JSR2 SWP2 .neralie/n5 STZ POP
	#000a ;modf JSR2 SWP2 .neralie/n4 STZ POP

	( add up hundreds of pulses + 10 x beats, store in n0123 )
	#01a0 #00 h MUL2 ADD2
	#0006 #00 m MUL2 ADD2 .neralie/n0123 STZ2

RTN

@draw-date ( -- )

	( auto x ) #01 .Screen/auto DEO

	.Screen/width DEI2 2// #0034 -- .Screen/x DEO2
	.Screen/height DEI2 #0010 -- .Screen/y DEO2

	( arvelie )
	.DateTime/year DEI2 #07d6 -- NIP 
		DUP #0a DIV TOS 8** ;font-numbers ++ .Screen/addr DEO2
			#01 .Screen/sprite DEO
		#0a MOD TOS 8** ;font-numbers ++ .Screen/addr DEO2
			#01 .Screen/sprite DEO
	.DateTime/doty DEI2
		DUP2 #000e DIV2 8** ;font-letters ++ .Screen/addr DEO2
			#01 .Screen/sprite DEO
		#000e MOD2
		DUP2 #000a DIV2 ,digit JSR
		#000a MOD2 ,digit JSR

	.Screen/x DEI2 #0008 ++ .Screen/x DEO2

	( neralie )
	.neralie/n0123 LDZ2 
	#03e8 ;modf JSR2 ,digit JSR
	#0064 ;modf JSR2 ,digit JSR
	#000a ;modf JSR2 ,digit JSR
	           #000b ,digit JSR ( the colon )
	                 ,digit JSR
	#00 .neralie/n4 LDZ  ,digit JSR
	#00 .neralie/n5 LDZ  ,digit JSR

	( auto none ) #00 .Screen/auto DEO

RTN

@digit ( index* -- )

	8** ;font-numbers ++ .Screen/addr DEO2
	.neralie/color LDZ .Screen/sprite DEO
	
RTN

@draw-clock ( -- )

	.frame/x2 LDZ2 .frame/x1 LDZ2 
		DUP2 .neralie/x STZ2 SUB2 .neralie/w STZ2
	.frame/y2 LDZ2 .frame/y1 LDZ2 
		DUP2 .neralie/y STZ2 SUB2 .neralie/h STZ2

	;neralie/n4 NIP .neralie/n0123 LDZ2

	DUP2 ;&h JSR2

	;&next JSR2 #0008 .Screen/x DEO2 .neralie/y LDZ2 #0003 SUB2 .Screen/y DEO2 ,digit JSR

	DUP2 ;&v JSR2
	#04 ;v/spacing STA
	.frame/y1 LDZ2 #0003 SUB2 .neralie/y LDZ2 .neralie/x LDZ2 ;v JSR2
	#01 ;v/spacing STA
	,&next JSR #0008 .Screen/y DEO2 .neralie/x LDZ2 #0003 SUB2 .Screen/x DEO2 ;digit JSR2
	DUP2 ,&h JSR
	,&next JSR .Screen/width DEI2 #0010 SUB2 .Screen/x DEO2 .neralie/y LDZ2 #0003 SUB2 .Screen/y DEO2 ;digit JSR2
	DUP2 ,&v JSR
	,&next JSR POP2
	DUP2 ,&h JSR
	,&next JSR POP2
	DUP2 ,&v JSR
	POP2 POP
	JMP2r

	&next ( digit-addr number* -- next-digit-addr next-number* prev-digit* )
	#03e8 ;modf JSR2 STH2 #000a MUL2
	ROT DUP STH INC ROT ROT
	#00 STHr LDZ ADD2
	STH2r
	JMP2r

	&h ( number* -- )
	,scale JSR
	.neralie/h LDZ2 ;mul2hi JSR2
	ORAk #02 JCN POP2 JMP2r
	DUP2 .neralie/y LDZ2 ADD2 .neralie/y STZ2
	.neralie/h LDZ2 SWP2 SUB2 .neralie/h STZ2
	.neralie/x LDZ2 DUP2 .neralie/w LDZ2 ADD2 .neralie/y LDZ2 ,h JMP

	&v ( number* -- )
	,scale JSR
	.neralie/w LDZ2 ;mul2hi JSR2
	ORAk #02 JCN POP2 JMP2r
	DUP2 .neralie/x LDZ2 ADD2 .neralie/x STZ2
	.neralie/w LDZ2 SWP2 SUB2 .neralie/w STZ2
	.neralie/y LDZ2 DUP2 .neralie/h LDZ2 ADD2 .neralie/x LDZ2 ,v JMP

@scale ( 0..10000* -- 0..65535* )
	DUP2 #8db8 ;mul2hi JSR2
	SWP2 #0006 MUL2 ADD2
	JMP2r

@h ( x1* x2* y* -- )
	.Screen/y DEO2
	.Screen/x .lines/addr STZ
	,v/draw-line JMP

@v ( y1* y2* x* -- )
	.Screen/x DEO2
	.Screen/y .lines/addr STZ

	&draw-line ( v1* v2* -- )
	OVR2 OVR2 LTH2 #01 JCN SWP2
	STH2

	&loop
	LIT2 [ 00 ] &spacing [ 01 ] ADD2
	DUP2 DUP2r STH2r LTH2 ,&keep-going JCN
	POP2 POP2r
	JMP2r

	&keep-going
	DUP2 .lines/addr LDZ DEO2
	.neralie/color LDZ .Screen/pixel DEO
	,&loop JMP

@update-fps ( -- )
	.fps/next LDZ INC .fps/next STZ
	s .fps/second LDZ NEQ JMP JMP2r
	s .fps/second STZ
	.fps/next LDZ .fps/current STZ

	#00 .fps/next STZ
	JMP2r

@modf ( dividend* divisor* -- remainder* quotient* )
	OVR2 OVR2 DIV2 DUP2 STH2 MUL2 SUB2 STH2r JMP2r

@mul2hi ( a* b* -- product-top-16-bits* )
	(
		Multiplying two 16-bit numbers yields a 32-bit number.
		MUL2 returns the lowest 16 bits, we want the highest.

		We split each short into hi and lo bytes, then sum
		the following multiplications:

		31..24 23..16 15..08 07..00
		{ ahi * bhi }
		       { alo * bhi }
		       { ahi * blo }
		              { alo * blo }

		Bits 07..00 can be ignored, but each sum in bits 23..16
		can end up overflowing into bit 24.
	)
	
	;mul/bhi STA2 ;mul/ahi STA2
	#00
		#00
			#00 .mul/alo LDZ #00 .mul/blo LDZ MUL2
		POP
		#00 .mul/ahi LDZ #00 .mul/blo LDZ MUL2 ,&adc JSR
		#00 .mul/alo LDZ #00 .mul/bhi LDZ MUL2 ,&adc JSR
	POP
	#00 .mul/ahi LDZ #00 .mul/bhi LDZ MUL2 ADD2
	JMP2r

	&adc ( 31..24 a* b* -- 31..24 sum* )
	OVR2 ADD2 SWP2 OVR2
	GTH2 ,&carry JCN
	JMP2r
	&carry
	ROT INC ROT ROT
	JMP2r

@font-numbers
	7cc6 ced6 e6c6 7c00 1838 1818 1818 7e00 3c66 063c 6066 7e00
	3c66 061c 0666 3c00 1c3c 6ccc fe0c 1e00 7e62 607c 0666 3c00
	3c66 607c 6666 3c00 7e66 060c 1818 1800 3c66 663c 6666 3c00
	3c66 663e 0666 3c00 7cc6 ced6 e6c6 7c00 0018 1800 1818 0000

@font-letters
	183c 6666 7e66 6600 fc66 667c 6666 fc00 3c66 c0c0 c066 3c00
	f86c 6666 666c f800 fe62 6878 6862 fe00 fe62 6878 6860 f000
	3c66 c0c0 ce66 3e00 6666 667e 6666 6600 7e18 1818 1818 7e00
	1e0c 0c0c cccc 7800 e666 6c78 6c66 e600 f060 6060 6266 fe00
	c6ee fefe d6c6 c600 c6e6 f6de cec6 c600 386c c6c6 c66c 3800
	fc66 667c 6060 f000 386c c6c6 dacc 7600 fc66 667c 6c66 e600
	3c66 603c 0666 3c00 7e5a 1818 1818 3c00 6666 6666 6666 3c00
	6666 6666 663c 1800 c6c6 c6d6 feee c600 c66c 3838 6cc6 c600
	6666 663c 1818 3c00 fec6 8c18 3266 fe00 0018 187e 1818 0000
( dev/console )

%RTN { JMP2r }
%PRINT { ;print JSR2 }
%BR { #0a .Console/write DEO }

( devices )

|10 @Console    [ &pad $8 &write $1 ]

( variables )

|0000

@number [ &started $1 ]

( init )

|0100 ( -> )
		
	;char-txt PRINT #42 .Console/write DEO BR
	;byte-txt PRINT #ab ;print-byte JSR2 BR
	;short-txt PRINT #cdef ;print-short JSR2 BR
	;string-txt PRINT ;hello-word ;print JSR2 BR

	;hello-word ;print JSR2
	#ffff ;print-short JSR2
	;is-word ;print JSR2
	#ffff ;print-short-decimal JSR2
	
BRK

@print ( addr* -- )
	
	&loop
		( send ) LDAk .Console/write DEO
		( incr ) INC2
		( loop ) LDAk ,&loop JCN
	POP2

RTN

@print-short ( short* -- )
	LIT '0 .Console/write DEO
	LIT 'x .Console/write DEO
	OVR #04 SFT ,&hex JSR
	SWP #0f AND ,&hex JSR
	DUP #04 SFT ,&hex JSR
	    #0f AND ,&hex JMP

	&hex
	#30 ADD DUP #3a LTH ,&not-alpha JCN
	#27 ADD
	&not-alpha
	.Console/write DEO
RTN

@print-byte ( byte -- )
	LIT '0 .Console/write DEO
	LIT 'x .Console/write DEO
	DUP #04 SFT ,&hex JSR
	    #0f AND ,&hex JMP

	&hex
	#30 ADD DUP #39 GTH #27 MUL ADD .Console/write DEO
RTN

@print-short-decimal ( short -- )
	#00 .number/started STZ
	DUP2 #2710 DIV2 DUP2 ,&digit JSR #2710 MUL2 SUB2
	DUP2 #03e8 DIV2 DUP2 ,&digit JSR #03e8 MUL2 SUB2
	DUP2 #0064 DIV2 DUP2 ,&digit JSR #0064 MUL2 SUB2
	DUP2 #000a DIV2 DUP2 ,&digit JSR #000a MUL2 SUB2
	                     ,&digit JSR
	.number/started LDZ ,&end JCN
	LIT '0 .Console/write DEO
	&end
RTN

	&digit
	NIP
	DUP .number/started LDZ ORA #02 JCN
	POP JMP2r
	LIT '0 ADD .Console/write DEO
	#01 .number/started STZ
RTN

@char-txt "char: 20 $1
@byte-txt "byte: 20 $1
@short-txt "short: 20 $1
@string-txt "string: 20 $1

@hello-word "hello 20 "World! 0a 00
@is-word 20 "is 20 00
( gui/terminal )

%+  { ADD }  %-  { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH }  %>  { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

( devices )

|00 @System     [ &vector $2 &pad    $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller [ &vector $2 &button $1 &key    $1 ]

( variables )

|0000

@buffer $80

( init )

|0100 ( -> )

	( theme ) 
	#0f0f .System/r DEO2 
	#0ff0 .System/g DEO2 
	#00ff .System/b DEO2

	( vectors ) 
	;on-button .Controller/vector DEO2

	( AUTO-Y-ADDR )
	#06 .Screen/auto DEO

	#01 ;draw-input JSR2

BRK

@on-button ( -> )

	.Controller/key DEI
	DUP #00 ! ,&no-null JCN
		POP BRK
		&no-null
	DUP #0d ! ,&no-enter JCN
		#00 ;draw-input JSR2
		;validate JSR2
		;buffer #0080 ;mclr JSR2
		#01 ;draw-input JSR2
		&no-enter
	DUP #08 ! ,&no-backspace JCN
		#00 ;draw-input JSR2
		;buffer ;spop JSR2
		#01 ;draw-input JSR2
		&no-backspace
	DUP STHk #1f > STHr #7b < #0101 !! ,&no-valid JCN
	;buffer ;slen JSR2 #007f >> ,&no-valid JCN
		STHk ;buffer STHr ;sput JSR2
		#01 ;draw-input JSR2
		&no-valid
	POP

BRK

@validate ( -- )

	#0010 .Screen/x DEO2
	.Screen/height DEI2 #0040 -- .Screen/y DEO2

	( clear )
	#8000
	&loop
		#30 #00 ;draw-char JSR2
		INC GTHk ,&loop JCN
	POP2
	#0010 .Screen/x DEO2

	( respond )
	;strings/you-said #02 ;draw-str JSR2
	LIT 22 #02 ;draw-char JSR2
	;buffer #03 ;draw-str JSR2
	LIT 22 #02 ;draw-char JSR2
	LIT '. #02 ;draw-char JSR2

JMP2r

@draw-input ( color -- )

	STH
	#0010 .Screen/x DEO2
	.Screen/height DEI2 #0020 -- .Screen/y DEO2

	( marker ) LIT '> #03 ;draw-char JSR2

	;buffer STHr ;draw-str JSR2

JMP2r

@draw-str ( str* color -- )

	STH
	&while
		LDAk STHkr ,draw-char JSR
		INC2 LDAk ,&while JCN
	POP2
	POPr

JMP2r

@draw-char ( char color -- )

	SWP
	[ #20 - #00 SWP #40 SFT2 ;font ++ ] .Screen/addr DEO2
	.Screen/sprite DEOk DEO
	.Screen/y DEI2 #0010 -- .Screen/y DEO2
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2

JMP2r

( utils )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

JMP2r

@scap ( str* -- str-end* )

	( clamp ) LDAk #00 ! JMP JMP2r
	&while INC2 LDAk ,&while JCN

JMP2r

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

JMP2r

@spop ( str* -- )

	( clamp ) LDAk #00 ! JMP JMP2r
	#00 ROT ROT ,scap JSR #0001 -- STA

JMP2r

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

JMP2r

@strings
	&you-said "You 20 "said 20 $1

@font ( terminus01x02 )
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 183c 3c3c 1818 1800 1818 0000 0000
	0066 6666 2400 0000 0000 0000 0000 0000
	0000 006c 6cfe 6c6c 6cfe 6c6c 0000 0000
	1818 7cc6 c2c0 7c06 0686 c67c 1818 0000
	0000 0000 c2c6 0c18 3060 c686 0000 0000
	0000 386c 6c38 76dc cccc cc76 0000 0000
	0030 3030 6000 0000 0000 0000 0000 0000
	0000 0c18 3030 3030 3030 180c 0000 0000
	0000 3018 0c0c 0c0c 0c0c 1830 0000 0000
	0000 0000 0066 3cff 3c66 0000 0000 0000
	0000 0000 0018 187e 1818 0000 0000 0000
	0000 0000 0000 0000 0018 1818 3000 0000
	0000 0000 0000 00fe 0000 0000 0000 0000
	0000 0000 0000 0000 0000 1818 0000 0000
	0000 0000 0206 0c18 3060 c080 0000 0000
	0000 386c c6c6 d6d6 c6c6 6c38 0000 0000
	0000 1838 7818 1818 1818 187e 0000 0000
	0000 7cc6 060c 1830 60c0 c6fe 0000 0000
	0000 7cc6 0606 3c06 0606 c67c 0000 0000
	0000 0c1c 3c6c ccfe 0c0c 0c1e 0000 0000
	0000 fec0 c0c0 fc06 0606 c67c 0000 0000
	0000 3860 c0c0 fcc6 c6c6 c67c 0000 0000
	0000 fec6 0606 0c18 3030 3030 0000 0000
	0000 7cc6 c6c6 7cc6 c6c6 c67c 0000 0000
	0000 7cc6 c6c6 7e06 0606 0c78 0000 0000
	0000 0000 1818 0000 0018 1800 0000 0000
	0000 0000 1818 0000 0018 1830 0000 0000
	0000 0006 0c18 3060 3018 0c06 0000 0000
	0000 0000 007e 0000 7e00 0000 0000 0000
	0000 0060 3018 0c06 0c18 3060 0000 0000
	0000 7cc6 c60c 1818 1800 1818 0000 0000
	0000 007c c6c6 dede dedc c07c 0000 0000
	0000 1038 6cc6 c6fe c6c6 c6c6 0000 0000
	0000 fc66 6666 7c66 6666 66fc 0000 0000
	0000 3c66 c2c0 c0c0 c0c2 663c 0000 0000
	0000 f86c 6666 6666 6666 6cf8 0000 0000
	0000 fe66 6268 7868 6062 66fe 0000 0000
	0000 fe66 6268 7868 6060 60f0 0000 0000
	0000 3c66 c2c0 c0de c6c6 663a 0000 0000
	0000 c6c6 c6c6 fec6 c6c6 c6c6 0000 0000
	0000 3c18 1818 1818 1818 183c 0000 0000
	0000 1e0c 0c0c 0c0c cccc cc78 0000 0000
	0000 e666 666c 7878 6c66 66e6 0000 0000
	0000 f060 6060 6060 6062 66fe 0000 0000
	0000 c6ee fefe d6c6 c6c6 c6c6 0000 0000
	0000 c6e6 f6fe dece c6c6 c6c6 0000 0000
	0000 7cc6 c6c6 c6c6 c6c6 c67c 0000 0000
	0000 fc66 6666 7c60 6060 60f0 0000 0000
	0000 7cc6 c6c6 c6c6 c6d6 de7c 0c0e 0000
	0000 fc66 6666 7c6c 6666 66e6 0000 0000
	0000 7cc6 c660 380c 06c6 c67c 0000 0000
	0000 7e7e 5a18 1818 1818 183c 0000 0000
	0000 c6c6 c6c6 c6c6 c6c6 c67c 0000 0000
	0000 c6c6 c6c6 c6c6 c66c 3810 0000 0000
	0000 c6c6 c6c6 d6d6 d6fe ee6c 0000 0000
	0000 c6c6 6c7c 3838 7c6c c6c6 0000 0000
	0000 6666 6666 3c18 1818 183c 0000 0000
	0000 fec6 860c 1830 60c2 c6fe 0000 0000
	0000 3c30 3030 3030 3030 303c 0000 0000
	0000 0080 c0e0 7038 1c0e 0602 0000 0000
	0000 3c0c 0c0c 0c0c 0c0c 0c3c 0000 0000
	1038 6cc6 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 00ff 0000
	3030 1800 0000 0000 0000 0000 0000 0000
	0000 0000 0078 0c7c cccc cc76 0000 0000
	0000 e060 6078 6c66 6666 667c 0000 0000
	0000 0000 007c c6c0 c0c0 c67c 0000 0000
	0000 1c0c 0c3c 6ccc cccc cc76 0000 0000
	0000 0000 007c c6fe c0c0 c67c 0000 0000
	0000 386c 6460 f060 6060 60f0 0000 0000
	0000 0000 0076 cccc cccc cc7c 0ccc 7800
	0000 e060 606c 7666 6666 66e6 0000 0000
	0000 1818 0038 1818 1818 183c 0000 0000
	0000 0606 000e 0606 0606 0606 6666 3c00
	0000 e060 6066 6c78 786c 66e6 0000 0000
	0000 3818 1818 1818 1818 183c 0000 0000
	0000 0000 00ec fed6 d6d6 d6c6 0000 0000
	0000 0000 00dc 6666 6666 6666 0000 0000
	0000 0000 007c c6c6 c6c6 c67c 0000 0000
	0000 0000 00dc 6666 6666 667c 6060 f000
	0000 0000 0076 cccc cccc cc7c 0c0c 1e00
	0000 0000 00dc 7666 6060 60f0 0000 0000
	0000 0000 007c c660 380c c67c 0000 0000
	0000 1030 30fc 3030 3030 361c 0000 0000
	0000 0000 00cc cccc cccc cc76 0000 0000
	0000 0000 0066 6666 6666 3c18 0000 0000
	0000 0000 00c6 c6d6 d6d6 fe6c 0000 0000
	0000 0000 00c6 6c38 3838 6cc6 0000 0000
	0000 0000 00c6 c6c6 c6c6 c67e 060c f800
	0000 0000 00fe cc18 3060 c6fe 0000 0000
	0000 0e18 1818 7018 1818 180e 0000 0000
	0000 1818 1818 0018 1818 1818 0000 0000
	0000 7018 1818 0e18 1818 1870 0000 0000
( devices )

( uxnasm rule110.tal rule110.rom && uxnemu rule110.rom )

%+  { ADD }  %-  { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH }  %>  { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%2*  { #10 SFT } %2/  { #01 SFT } %2**  { #10 SFT2 } %2//  { #01 SFT2 }
%4*  { #20 SFT } %4/  { #02 SFT } %4**  { #20 SFT2 } %4//  { #02 SFT2 }
%8*  { #30 SFT } %8/  { #03 SFT } %8**  { #30 SFT2 } %8//  { #03 SFT2 }
%10* { #40 SFT } %10/ { #04 SFT } %10** { #40 SFT2 } %10// { #04 SFT2 }
%20* { #50 SFT } %20/ { #05 SFT } %20** { #50 SFT2 } %20// { #05 SFT2 }

%2MOD  { #01 AND } %2MOD2  { #0001 AND2 }
%4MOD  { #03 AND } %4MOD2  { #0003 AND2 }
%8MOD  { #07 AND } %8MOD2  { #0007 AND2 }
%10MOD { #0f AND } %10MOD2 { #000f AND2 }

%ROL2 { DUP2 #0f SFT2 SWP2 #10 SFT2 ++ }
%ROR2 { DUP2 #f0 SFT2 SWP2 #01 SFT2 ++ }

%DEBUG      { ;print-hex/byte JSR2 #0a18 DEO }
%DEBUG2     { ;print-hex JSR2 #0a18 DEO }
%RTN        { JMP2r }

%WIDTH { #0020 }
%STEPS { #30 }

|00 @System  [ &vector $2 &pad  $6  &r $2  &g $2  &b $2 ]
|20 @Screen  [ &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y  $2 &addr $2 &pixel $1 &sprite $1 ]
|90 @Mouse      [ &vector $2 &x        $2 &y      $2 &state $1 &wheel $1 ]

|0000

@input 

|0100

	( set system colors )
	#0ff7 .System/r DEO2
	#0f0e .System/g DEO2
	#0f0c .System/b DEO2

	;on-mouse   .Mouse/vector DEO2

	( set size )
	#0080 .Screen/width DEO2
	#0180 .Screen/height DEO2

	( seed ) #0001 ;input STA2

	,render JSR

BRK

@render ( -- )

	STEPS #00
	&loop
		( update )
		DUP 2* LDZ2k 
		;rule-110 JSR2 
		ROT INC INC STZ2
		( draw )
		DUP ,draw-line JSR
		INC GTHk ,&loop JCN
	POP2

RTN

@draw-line ( line -- )

	STHk #00 SWP 8** .Screen/y DEO2
	#1000
	&loop
		DUP #00 SWP 8** .Screen/x DEO2
		( shift ) INCk #10 SWP -
		( get address ) STHkr 2* LDZ2
		( bit ) ROT SFT2 #0001 AND2 
		( get sprite ) 8** ;cell-icns ++ .Screen/addr DEO2
		#01 STHkr #00 = + .Screen/sprite DEO
		INC GTHk ,&loop JCN
	POP2
	POPr

RTN

@rule-110 ( value* -- value* )

	#0000 ,&res STR2
	ROL2 STH2
	#1000
	&loop
		( get 3-bits ) STH2kr #e000 AND2 #0d SFT2 ;rule ++ LDA STH
		( get result ) DUP #40 SFT #00 STHr ROT SFT2
		( reset ) ROR2 ROR2 ROR2
		( save ) ,&res LDR2 ++ ,&res STR2
		STH2r ROR2 STH2
		INC GTHk ,&loop JCN
	POP2
	POP2r

	,&res LDR2

RTN
	&res $2

@rule
	00 01 01 01 00 01 01 00

@on-mouse ( -> )
	
	( clear last cursor )
	;mouse-icn .Screen/addr DEO2 
	,&x LDR2 .Screen/x DEO2 
	,&y LDR2 .Screen/y DEO2 
	#40 .Screen/sprite DEO

	( record pointer positions )
	.Mouse/x DEI2 DUP2 ,&x STR2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 ,&y STR2 .Screen/y DEO2 

	( colorize on state )
	#43 [ .Mouse/state DEI #00 ! ] - .Screen/sprite DEO

	( on click )
	.Mouse/state DEI #00 ! JMP BRK

	( toggle bit )
	.input LDZ2k
		#0001 .Mouse/x DEI2 8// #000f SWP2 -- NIP #40 SFT SFT2 EOR2 
		ROT STZ2
	;render JSR2
	( release ) #00 .Mouse/state DEO

BRK
	&x $2 &y $2

@print-hex ( value* -- )
	
	SWP ,&byte JSR 
	&byte ( byte -- )
		STHk #04 SFT ,&parse JSR #18 DEO
		STHr #0f AND ,&parse JSR #18 DEO
	RTN
	&parse ( byte -- char ) DUP #09 GTH ,&above JCN #30 + RTN 
	&above #57 + RTN

RTN

@mouse-icn
	80c0 e0f0 f8e0 1000

@cell-icns
	7c82 8282 8282 7c00
	7cfe fefe fefe 7c00

( GUI Proportional font )

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]

( variables )

|0000

( program )

|0100
	
	( theme ) #0f9f .System/r DEO2 #0f3f .System/g DEO2 #0f30 .System/b DEO2
	
	#0000 ;draw JSR2
	#0001 ;draw JSR2
	#0002 ;draw JSR2
	
BRK

@draw ( extra-spacing* -- )
	STH2
	;text
	&loop
	LDAk
	DUP #00 EQU ,&end JCN
	DUP #0a EQU ,&linefeed JCN
	#0005 SFT2 ;font ADD2
	DUP2 .Screen/addr DEO2
	#09 .Screen/sprite DEO
	,get-x-advance JSR .Screen/x DEI2 ADD2 STH2kr ADD2 .Screen/x DEO2
	&next
	INC2
	,&loop JMP

	&linefeed
	POP
	#0000 .Screen/x DEO2
	#0008 .Screen/y DEI2 ADD2 STH2kr ADD2 .Screen/y DEO2
	,&next JMP

	&end
	POP POP2 POP2r
	JMP2r

@get-x-advance ( font-char-addr* -- advance* )
	( Save two 00 bytes for later use )
	#0000 SWP2
	( First, load the eight bytes that make up the character )
	LDA2k SWP2 #0002 ADD2
	LDA2k SWP2 #0002 ADD2
	LDA2k SWP2 #0002 ADD2
	LDA2
	( OR all the bytes together, so we know which columns contain filled pixels )
	ORA2 ORA2 ORA2 ORA
	( Find the lowest set bit (using one of the 00 bytes at the top, but not consuming it) )
	SUBk AND
	( Convert the nine possible values (00-80) into an offset into the magic table (00-08). )
	( They get jumbled up with these two operations, but each possible value remains unique )
	#a3 MUL #16 DIV
	( Load the byte from the magic table, return a short (consuming/returning the 00 bytes at the top) )
	;&magic ADD2 LDA
	JMP2r
	( The magic table performs the last bit of arithmetic we want:
	  * the advance in x should be one more than the number of columns with filled pixels,
	  * with a maximum of 8, and
	  * a minimum of 3. )
	&magic
		03 ( lowest set bit is 00, 0 columns wide )
		06 ( lowest set bit is 08, 5 columns wide )
		05 ( lowest set bit is 10, 4 columns wide )
		08 ( lowest set bit is 02, 7 columns wide )
		04 ( lowest set bit is 20, 3 columns wide )
		03 ( lowest set bit is 80, 1 column wide )
		07 ( lowest set bit is 04, 6 columns wide )
		08 ( lowest set bit is 01, 8 columns wide )
		03 ( lowest set bit is 40, 2 columns wide )

@font ( spectrum-zx font, with each character moved to be flush left in its cell )
[
	0000 0000 0000 0000 0000 4800 fc78 0000 0000 4800 7884 0000 0000 d8f8 f870 2000
	0020 70f8 f870 2000 0070 70f8 d820 7000 0020 70f8 f820 7000 0000 00c0 c000 0000
	00fc 8484 8484 fc00 0000 6090 9060 0000 0030 4884 8448 3000 003c 0c74 9490 6000
	0070 88d8 20f8 2000 0030 2020 20e0 e000 007c 4444 44cc cc00 0000 2088 0088 2000
	0000 80c0 e0c0 8000 0000 2060 e060 2000 0040 e000 00e0 4000 00a0 a0a0 a000 a000
	007c 9494 7414 1400 0018 608c c418 6000 0000 0000 0000 ffff 0040 e000 e040 00e0
	0020 70a8 2020 2000 0020 2020 a870 2000 0000 1008 fc08 1000 0000 2040 fc40 2000
	0000 8080 fc00 0000 0000 0048 cc48 0000 0000 2070 f800 0000 0000 00f8 7020 0000
	0000 0000 0000 0000 0080 8080 8000 8000 00a0 a000 0000 0000 0048 fc48 48fc 4800
	0020 78a0 7028 f020 0084 0810 2040 8400 0060 9064 9888 7400 0040 8000 0000 0000
	0040 8080 8080 4000 0080 4040 4040 8000 0000 5020 f820 5000 0000 2020 f820 2000
	0000 0000 0040 4080 0000 0000 f000 0000 0000 0000 0000 8000 0000 0810 2040 8000
	0078 8c94 a4c4 7800 0060 a020 2020 f800 0078 8404 7880 fc00 0078 8438 0484 7800
	0010 3050 90fc 1000 00fc 80f8 0484 7800 0078 80f8 8484 7800 00fc 0408 1020 2000
	0078 8478 8484 7800 0078 8484 7c04 7800 0000 0080 0000 8000 0000 4000 0040 4080
	0000 2040 8040 2000 0000 00f8 00f8 0000 0000 8040 2040 8000 0078 8404 1800 1000
	0078 84b4 a884 7800 0030 4884 fc84 8400 00f8 84f8 8484 f800 0078 8480 8084 7800
	00f0 8884 8488 f000 00fc 80f8 8080 fc00 007c 8080 f880 8000 0078 8480 9c84 7800
	0084 84fc 8484 8400 00f8 2020 2020 f800 0004 0404 8484 7800 0088 90e0 9088 8400
	0080 8080 8080 fc00 0084 ccb4 8484 8400 0084 c4a4 948c 8400 0078 8484 8484 7800
	00f8 8484 f880 8000 0078 8484 a494 7800 00f8 8484 f888 8400 0078 8078 0484 7800
	00fe 1010 1010 1000 0084 8484 8484 7800 0084 8484 8448 3000 0084 8484 b4cc 8400
	0084 4830 3048 8400 0082 4428 1010 1000 00fc 0810 2040 fc00 00c0 8080 8080 c000
	0080 4020 1008 0400 00c0 4040 4040 c000 0020 5088 0000 0000 0000 0000 0000 fc00
	0080 4000 0000 0000 0000 7008 7888 7800 0080 80f0 8888 f000 0000 7880 8080 7800
	0008 0878 8888 7800 0000 7088 f080 7800 0060 80e0 8080 8000 0000 7088 8878 0870
	0080 80b0 c888 8800 0040 00c0 4040 2000 0010 0010 1010 9060 0080 90a0 c0a0 9000
	0080 8080 8080 6000 0000 d0a8 a8a8 a800 0000 b0c8 8888 8800 0000 7088 8888 7000
	0000 f088 88f0 8080 0000 7888 8878 080c 0000 b0c0 8080 8000 0000 7080 7008 f000
	0040 40f0 4040 3000 0000 8888 8888 7000 0000 8888 5050 2000 0000 88a8 a8a8 5000
	0000 8850 2050 8800 0000 8888 8878 0870 0000 f810 2040 f800 0060 4080 8040 6000
	0080 8080 8080 8000 00c0 4020 2040 c000 0000 0064 9800 0000 3c42 99a1 a199 423c
]

@text "Are 20 "proportional 20 "fonts 20 "a 20 "good 20 "idea? 0a 0a
	"The 20 "jury 20 "is 20 "still 20 "out, 20 "but 20 "one 20 "thing 20 "is 20 "certain: 0a
	"it 20 "is 20 "possible 20 "to 20 "print 20 "with 20 "these 20 "fonts 20 "in 20 "Uxn. 0a 0a 0a 00

( GUI Animation )

%2// { #01 SFT2 }

( devices )

|00 @System     [ &vector $2 &pad    $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width  $2 &height $2 &pad   $2 &x      $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]

|0000

@dvd [ &x $2 &y $2 &dx $1 &dy $1 ]

( program )

|0100 ( -> )
	
	( theme ) 
	#4cfd .System/r DEO2 
	#4cf3 .System/g DEO2 
	#dcf2 .System/b DEO2

	( vectors )
	;on-frame .Screen/vector DEO2

	( starting position )
	.Screen/width DEI2 2// .dvd/x STZ2
	.Screen/height DEI2 2// .dvd/y STZ2
	
	#01 ;draw-dvd JSR2
	
BRK

@on-frame ( -> )

	( clear ) #00 ;draw-dvd JSR2
	( case: hit-right ) .dvd/x LDZ2 .Screen/width DEI2 #0020 SUB2 EQU2
	( case: hit-left ) .dvd/x LDZ2 #0000 EQU2 
	#0000 EQU2 ,&no-flipx JCN 
		.dvd/dx LDZ #00 EQU .dvd/dx STZ &no-flipx
	( case: hit-bottom ) .dvd/y LDZ2 .Screen/height DEI2 #0010 SUB2 EQU2
	( case: hit-top ) .dvd/y LDZ2 #0000 EQU2 
	#0000 EQU2 ,&no-flipy JCN 
		.dvd/dy LDZ #00 EQU .dvd/dy STZ &no-flipy
	( incr ) .dvd/x LDZ2 #0001 #00 .dvd/dx LDZ #00 EQU DUP2 ADD2 SUB2 ADD2 .dvd/x STZ2
	( incr ) .dvd/y LDZ2 #0001 #00 .dvd/dy LDZ #00 EQU DUP2 ADD2 SUB2 ADD2 .dvd/y STZ2
	( draw ) #01 ;draw-dvd JSR2

BRK

@draw-dvd ( color -- )
	
	( stash ) STH 
	;dvd_icn .Screen/addr DEO2
	[ .dvd/y LDZ2 #0010 ADD2 ] .dvd/y LDZ2 
	&ver
		DUP2 .Screen/y DEO2
		[ .dvd/x LDZ2 #0020 ADD2 ] .dvd/x LDZ2 
		&hor
			DUP2 .Screen/x DEO2
			( draw ) STHkr .Screen/sprite DEO
			( next ) .Screen/addr DEI2 #0008 ADD2 .Screen/addr DEO2
			( incr ) #0008 ADD2
			GTH2k ,&hor JCN
		POP2 POP2
		( incr ) #0008 ADD2
		GTH2k ,&ver JCN
	POP2 POP2
	( destroy ) POPr

JMP2r

@dvd_icn [
	001f 3f38 3838 787f 00fe fe7e 7777 e3c3
	000f 1f3b 7b77 e7c7 00fc fe8f 8707 0efc
	7f00 000f ff7f 0700 0301 00ff f0f8 ff00
	8700 00ff 7f7f ff00 f000 00e0 fcfc 8000
]( Dev/Screen )

%RTN { JMP2r }
%++  { INC2 }
%2// { #01 SFT2 }
%4// { #02 SFT2 }
%4** { #20 SFT2 }
%8** { #30 SFT2 }
%8+  { #0008 ADD2 }
%STEP8 { #33 SFT2 }

( devices )

|00 @System [ &vector $2 &pad   $6 &r      $2 &g     $2 &b     $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad   $2 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|90 @Mouse  [ &vector $2 &x     $2 &y      $2 &state $1 &wheel $1 ]

( variables )

|0000

@color     $1
@selection $1

@center  [ &x $2 &y $2 ]
@pointer [ &x $2 &y $2 ]
@rect    [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 ]
@window  [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 &w $2 &h $2 ]
@slider  [ &x1 $2 &y $2 &x2 $2 &pos $2 ]

@theme [
	&r1 $1 &r2 $1 &r3 $1 &r4 $1
	&g1 $1 &g2 $1 &g3 $1 &g4 $1
	&b1 $1 &b2 $1 &b3 $1 &b4 $1
]

( program )

|0100 ( -> )

	( theme ) 
	#027f .System/r DEO2 
	#04e7 .System/g DEO2 
	#06c4 .System/b DEO2

	( vectors ) 
	;on-mouse .Mouse/vector DEO2
	
	( size window )
	#00b0 .window/w STZ2
	#0050 .window/h STZ2

	( center window )
	.Screen/width DEI2 2// .window/w LDZ2 2// SUB2 .window/x1 STZ2
	.Screen/height DEI2 2// .window/h LDZ2 2// SUB2 .window/y1 STZ2

	#01 .theme/r1 STZ #02 .theme/g1 STZ #03 .theme/b1 STZ
	#04 .theme/r2 STZ #06 .theme/g2 STZ #07 .theme/b2 STZ
	#0a .theme/r3 STZ #09 .theme/g3 STZ #08 .theme/b3 STZ
	#0c .theme/r4 STZ #0b .theme/g4 STZ #0d .theme/b4 STZ

	( find screen center )
	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	;update-theme JSR2
	;draw-background JSR2
	;draw-window JSR2

BRK

@on-mouse ( -> )
	
	;draw-cursor JSR2

	.Mouse/state DEI #01 JCN [ BRK ]

	.Mouse/y DEI2 .window/y1 LDZ2 SUB2 STEP8
	DUP2 #0010 NEQ2 ,&no-touch-red JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #0060 ADD2 LTH2 ,&no-touch-red JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #009c ADD2 GTH2 ,&no-touch-red JCN
		( get new value ) .Mouse/x DEI2 .window/x1 LDZ2 SUB2 #0060 SUB2 4// NIP ;theme/r1 #00 .selection LDZ ADD2 STA
	&no-touch-red
	DUP2 #0020 NEQ2 ,&no-touch-green JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #0060 ADD2 LTH2 ,&no-touch-green JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #009c ADD2 GTH2 ,&no-touch-green JCN
		( get new value ) .Mouse/x DEI2 .window/x1 LDZ2 SUB2 #0060 SUB2 4// NIP ;theme/g1 #00 .selection LDZ ADD2 STA
	&no-touch-green
	DUP2 #0030 NEQ2 ,&no-touch-blue JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #0060 ADD2 LTH2 ,&no-touch-blue JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #009c ADD2 GTH2 ,&no-touch-blue JCN
		( get new value ) .Mouse/x DEI2 .window/x1 LDZ2 SUB2 #0060 SUB2 4// NIP ;theme/b1 #00 .selection LDZ ADD2 STA
	&no-touch-blue
	DUP2 #0040 NEQ2 ,&no-touch-radio JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #0050 ADD2 LTH2 ,&no-touch-radio JCN
		.Mouse/x DEI2 .window/x1 LDZ2 #008c ADD2 GTH2 ,&no-touch-radio JCN
		.Mouse/x DEI2 .window/x1 LDZ2 SUB2 #0050 SUB2 STEP8 2// #0008 DIV2 NIP .selection STZ
	&no-touch-radio
	POP2

	;update-theme JSR2
	;draw-cursor JSR2
	;draw-background JSR2
	;draw-window JSR2

BRK

@update-theme ( -- )

	#08 DEI #0f AND .theme/r1 LDZ #40 SFT ADD #08 DEO
	#0a DEI #0f AND .theme/g1 LDZ #40 SFT ADD #0a DEO
	#0c DEI #0f AND .theme/b1 LDZ #40 SFT ADD #0c DEO
	#08 DEI #f0 AND .theme/r2 LDZ ADD #08 DEO
	#0a DEI #f0 AND .theme/g2 LDZ ADD #0a DEO
	#0c DEI #f0 AND .theme/b2 LDZ ADD #0c DEO
	#09 DEI #0f AND .theme/r3 LDZ #40 SFT ADD #09 DEO
	#0b DEI #0f AND .theme/g3 LDZ #40 SFT ADD #0b DEO
	#0d DEI #0f AND .theme/b3 LDZ #40 SFT ADD #0d DEO
	#09 DEI #f0 AND .theme/r4 LDZ ADD #09 DEO
	#0b DEI #f0 AND .theme/g4 LDZ ADD #0b DEO
	#0d DEI #f0 AND .theme/b4 LDZ ADD #0d DEO

RTN

@draw-background ( -- )
	
	( draw hor line )
	#0000 .Screen/x DEO2 .center/y LDZ2 .Screen/y DEO2
	.Screen/width DEI2 #0000 ( to/from )
	&draw-hor
		( draw ) #01 .Screen/pixel DEO
		( incr ) #0002 ADD2 DUP2 .Screen/x DEO2
		GTH2k ,&draw-hor JCN
	POP2 POP2

	( draw ver line )
	.center/x LDZ2 .Screen/x DEO2 #0000 .Screen/y DEO2
	.Screen/height DEI2 #0000 ( to/from )
	&draw-ver
		( draw ) #02 .Screen/pixel DEO
		( incr ) #0002 ADD2 DUP2 .Screen/y DEO2
		GTH2k ,&draw-ver JCN
	POP2 POP2

	( draw blending modes )
	;preview_icn .Screen/addr DEO2
	#0010 .Screen/y DEO2
	#0800
	&draw-pixel1
		( move ) #00 OVR #30 SFT #0010 ADD2 .Screen/x DEO2
		( draw ) DUP .Screen/pixel DEO
		( incr ) INC
		GTHk ,&draw-pixel1 JCN
	POP2
	#0018 .Screen/y DEO2
	#0800
	&draw-pixel2
		( move ) #00 OVR #30 SFT #0010 ADD2 .Screen/x DEO2
		( draw ) DUP #08 ADD .Screen/pixel DEO
		( incr ) INC
		GTHk ,&draw-pixel2 JCN
	POP2
	#0020 .Screen/y DEO2
	#0800
	&draw-icn1
		( move ) #00 OVR #30 SFT #0010 ADD2 .Screen/x DEO2
		( draw ) DUP .Screen/sprite DEO
		( incr ) INC
		GTHk ,&draw-icn1 JCN
	POP2
	#0028 .Screen/y DEO2
	#0800
	&draw-icn2
		( move ) #00 OVR #30 SFT #0010 ADD2 .Screen/x DEO2
		( draw ) DUP #08 ADD .Screen/sprite DEO
		( incr ) INC
		GTHk ,&draw-icn2 JCN
	POP2
	#0030 .Screen/y DEO2
	#0800
	&draw-chr1
		( move ) #00 OVR #30 SFT #0010 ADD2 .Screen/x DEO2
		( draw ) DUP #80 ADD .Screen/sprite DEO
		( incr ) INC
		GTHk ,&draw-chr1 JCN
	POP2
	#0038 .Screen/y DEO2
	#0800
	&draw-chr2
		( move ) #00 OVR #30 SFT #0010 ADD2 .Screen/x DEO2
		( draw ) DUP #88 ADD .Screen/sprite DEO
		( incr ) INC
		GTHk ,&draw-chr2 JCN
	POP2

RTN

@draw-window ( -- )
	
	.window/x1 LDZ2 .window/w LDZ2 ADD2 .window/x2 STZ2
	.window/y1 LDZ2 .window/h LDZ2 ADD2 .window/y2 STZ2
	.window/x1 LDZ2 .window/y1 LDZ2 .window/x2 LDZ2 .window/y2 LDZ2 #02 ;fill-rect JSR2
	.window/x1 LDZ2 .window/y1 LDZ2 .window/x2 LDZ2 .window/y2 LDZ2 #01 ;line-rect JSR2
	.window/x1 LDZ2 #0002 SUB2 .window/y1 LDZ2 #0002 SUB2 .window/x2 LDZ2 #0002 ADD2 .window/y2 LDZ2 #0002 ADD2 #01 ;line-rect JSR2

	.window/x1 LDZ2 #0008 ADD2 .window/y1 LDZ2 #0010 ADD2 ;red_txt #05 ;draw-label JSR2
	.window/x1 LDZ2 #0038 ADD2 .Screen/x DEO2 
	.System/r DEI2 #08 ;draw-short JSR2

	.window/x1 LDZ2 #0008 ADD2 .window/y1 LDZ2 #0020 ADD2 ;green_txt #05 ;draw-label JSR2
	.window/x1 LDZ2 #0038 ADD2 .Screen/x DEO2 
	.System/g DEI2 #08 ;draw-short JSR2

	.window/x1 LDZ2 #0008 ADD2 .window/y1 LDZ2 #0030 ADD2 ;blue_txt #05 ;draw-label JSR2
	.window/x1 LDZ2 #0038 ADD2 .Screen/x DEO2 
	.System/b DEI2 #08 ;draw-short JSR2

	.window/x1 LDZ2 #0060 ADD2 .window/y1 LDZ2 #0010 ADD2 .window/x1 LDZ2 #0090 ADD2 #00 ;theme/r1 .selection LDZ ADD LDA 4** #01 ;draw-slider JSR2
	.window/x1 LDZ2 #0060 ADD2 .window/y1 LDZ2 #0020 ADD2 .window/x1 LDZ2 #0090 ADD2 #00 ;theme/g1 .selection LDZ ADD LDA 4** #01 ;draw-slider JSR2
	.window/x1 LDZ2 #0060 ADD2 .window/y1 LDZ2 #0030 ADD2 .window/x1 LDZ2 #0090 ADD2 #00 ;theme/b1 .selection LDZ ADD LDA 4** #01 ;draw-slider JSR2

	.window/x1 LDZ2 #0050 ADD2 .Screen/x DEO2
	.window/y1 LDZ2 #0040 ADD2 .Screen/y DEO2
	;radio_icns #00 .selection LDZ #00 EQU 8** ADD2 .Screen/addr DEO2
	#05 .Screen/sprite DEO

	.window/x1 LDZ2 #0060 ADD2 .Screen/x DEO2
	.window/y1 LDZ2 #0040 ADD2 .Screen/y DEO2
	;radio_icns #00 .selection LDZ #01 EQU 8** ADD2 .Screen/addr DEO2
	#05 .Screen/sprite DEO

	.window/x1 LDZ2 #0070 ADD2 .Screen/x DEO2
	.window/y1 LDZ2 #0040 ADD2 .Screen/y DEO2
	;radio_icns #00 .selection LDZ #02 EQU 8** ADD2 .Screen/addr DEO2
	#05 .Screen/sprite DEO

	.window/x1 LDZ2 #0080 ADD2 .Screen/x DEO2
	.window/y1 LDZ2 #0040 ADD2 .Screen/y DEO2
	;radio_icns #00 .selection LDZ #03 EQU 8** ADD2 .Screen/addr DEO2
	#05 .Screen/sprite DEO

RTN

@draw-cursor ( -- )
	
	( clear last cursor )
	;pointer_icn .Screen/addr DEO2
	.pointer/x LDZ2 .Screen/x DEO2
	.pointer/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( record pointer positions )
	.Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2 
	.Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2

	#43 .Mouse/state DEI #00 NEQ DUP ADD SUB .Screen/sprite DEO

RTN

@draw-slider ( x1* y* x2* pos* color -- )
	
	( load ) .color STZ .slider/pos STZ2 .slider/x2 STZ2 .slider/y STZ2 .slider/x1 STZ2

	.slider/x1 LDZ2 .Screen/x DEO2
	.slider/y LDZ2 .Screen/y DEO2
	;halftone_icn .Screen/addr DEO2

	;slidera_icn .Screen/addr DEO2
	( draw ) #05 .Screen/sprite DEO
	;sliderb_icn .Screen/addr DEO2

	&loop
		( incr ) .Screen/x DEI2 8+ .Screen/x DEO2
		( draw ) #05 .Screen/sprite DEO
		.Screen/x DEI2 .slider/x2 LDZ2 #0008 ADD2 LTH2 ,&loop JCN

	( incr ) .Screen/x DEI2 #0004 ADD2 .Screen/x DEO2
	;sliderc_icn .Screen/addr DEO2
	( draw ) #05 .Screen/sprite DEO

	.slider/x1 LDZ2 .slider/pos LDZ2 ADD2 .Screen/x DEO2
	;sliderd_icn .Screen/addr DEO2
	( draw ) #0a .Screen/sprite DEO

RTN

@fill-rect ( x1* y1* x2* y2* color -- )
	
	.color STZ
	STH2 ROT2 ROT2 STH2 ( x2 x1 / y2 y1 )
	&ver
		( save ) STH2kr .Screen/y DEO2
		OVR2 OVR2
		&hor
			( save ) DUP2 .Screen/x DEO2
			( draw ) .color LDZ .Screen/pixel DEO
			( incr ) INC2
			GTH2k ,&hor JCN
		POP2 POP2
		( incr ) INC2r
		GTH2kr STHr ,&ver JCN
	POP2 POP2 POP2r POP2r

RTN

@line-rect ( x1* y1* x2* y2* color -- )

	( load ) .color STZ .rect/y2 STZ2 .rect/x2 STZ2 DUP2 .Screen/y DEO2 .rect/y1 STZ2 DUP2 .Screen/x DEO2 .rect/x1 STZ2
	&hor
		( incr ) .Screen/x DEI2 ++ .Screen/x DEO2
		( draw ) .rect/y1 LDZ2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		( draw ) .rect/y2 LDZ2 .Screen/y DEO2 .color LDZ .Screen/pixel DEO
		.Screen/x DEI2 .rect/x2 LDZ2 LTH2 ,&hor JCN
	.rect/y1 LDZ2 .Screen/y DEO2
	&ver
		( draw ) .rect/x1 LDZ2 .Screen/x DEO2 .color LDZ .Screen/pixel DEO
		( draw ) .rect/x2 LDZ2 .Screen/x DEO2 .color LDZ .Screen/pixel DEO
		( incr ) .Screen/y DEI2 ++ .Screen/y DEO2
		.Screen/y DEI2 .rect/y2 LDZ2 ++ LTH2 ,&ver JCN

RTN

@draw-label ( x* y* addr* color  -- )
	
	STH STH2 
	.Screen/y DEO2 
	.Screen/x DEO2 
	STH2r
	&loop
		LDAk #00 SWP 8**
		;font ADD2 .Screen/addr DEO2 
		( draw ) STHkr .Screen/sprite DEO
		( incr ) ++
		( incr ) .Screen/x DEI2 8+ .Screen/x DEO2
		LDAk ,&loop JCN
	POP2 POPr

RTN

@draw-short ( short* color -- )

	STH SWP 
	DUP #04 SFT #00 SWP 8** ;font-hex ADD2 .Screen/addr DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND #00 SWP 8** ;font-hex ADD2 .Screen/addr DEO2
	.Screen/x DEI2 8+ .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	DUP #04 SFT #00 SWP 8** ;font-hex ADD2 .Screen/addr DEO2
	.Screen/x DEI2 8+ .Screen/x DEO2
	( draw ) STHkr .Screen/sprite DEO
	#0f AND #00 SWP 8** ;font-hex ADD2 .Screen/addr DEO2
	.Screen/x DEI2 8+ .Screen/x DEO2
	( draw ) STHr .Screen/sprite DEO

RTN

@red_txt      [ "Red 00 ]
@green_txt    [ "Green 00 ]
@blue_txt     [ "Blue 00 ]

@pointer_icn  [ 80c0 e0f0 f8e0 1000 ]
@halftone_icn [ aa55 aa55 aa55 aa55 ]
@slidera_icn  [ 3f7f ffff ffff 7f3f ]
@sliderb_icn  [ ffff ffff ffff ffff ]
@sliderc_icn  [ fcfe ffff ffff fefc ]
@sliderd_icn  [ 003c 7e7e 7e7e 3c00 ]

@preview_icn 
	183c 66db db66 3c18 
	0000 183c 3c18 0000
@radio_icns
	3c42 8181 8181 423c 
	3c42 99bd bd99 423c 

@font-hex 
	003c 464a 5262 3c00 0018 0808 0808 1c00
	003c 4202 3c40 7e00 003c 421c 0242 3c00
	000c 1424 447e 0400 007e 407c 0242 3c00
	003c 407c 4242 3c00 007e 0204 0810 1000
	003c 423c 4242 3c00 003c 4242 3e02 3c00
	003c 4242 7e42 4200 007c 427c 4242 7c00
	003c 4240 4042 3c00 007c 4242 4242 7c00
	007e 4078 4040 7e00 007e 4078 4040 4000 

@font ( spectrum-zx font ) 
	0000 0000 0000 0000 0000 2400 7e3c 0000 0000 2400 3c42 0000 0000 6c7c 7c38 1000
	0010 387c 7c38 1000 0038 387c 6c10 3800 0010 387c 7c10 3800 0000 0018 1800 0000
	007e 4242 4242 7e00 0000 1824 2418 0000 0018 2442 4224 1800 001e 063a 4a48 3000
	0038 446c 107c 1000 000c 0808 0838 3800 003e 2222 2266 6600 0000 0822 0022 0800
	0000 1018 1c18 1000 0000 0818 3818 0800 0008 1c00 001c 0800 0028 2828 2800 2800
	003e 4a4a 3a0a 0a00 000c 3046 620c 3000 0000 0000 0000 ffff 0010 3800 3810 0038
	0008 1c2a 0808 0800 0008 0808 2a1c 0800 0000 0804 7e04 0800 0000 1020 7e20 1000
	0000 4040 7e00 0000 0000 0024 6624 0000 0000 1038 7c00 0000 0000 007c 3810 0000
	0000 0000 0000 0000 0008 0808 0800 0800 0014 1400 0000 0000 0024 7e24 247e 2400
	0008 1e28 1c0a 3c08 0042 0408 1020 4200 0030 4832 4c44 3a00 0008 1000 0000 0000
	0004 0808 0808 0400 0010 0808 0808 1000 0000 1408 3e08 1400 0000 0808 3e08 0800
	0000 0000 0008 0810 0000 0000 3c00 0000 0000 0000 0000 0800 0000 0204 0810 2000
	003c 464a 5262 3c00 0018 2808 0808 3e00 003c 4202 3c40 7e00 003c 421c 0242 3c00
	0008 1828 487e 0800 007e 407c 0242 3c00 003c 407c 4242 3c00 007e 0204 0810 1000
	003c 423c 4242 3c00 003c 4242 3e02 3c00 0000 0008 0000 0800 0000 0800 0008 0810
	0000 0810 2010 0800 0000 003e 003e 0000 0000 1008 0408 1000 003c 4202 0c00 0800
	003c 425a 5442 3c00 0018 2442 7e42 4200 007c 427c 4242 7c00 003c 4240 4042 3c00
	0078 4442 4244 7800 007e 407c 4040 7e00 003e 4040 7c40 4000 003c 4240 4e42 3c00
	0042 427e 4242 4200 003e 0808 0808 3e00 0002 0202 4242 3c00 0044 4870 4844 4200
	0040 4040 4040 7e00 0042 665a 4242 4200 0042 6252 4a46 4200 003c 4242 4242 3c00
	007c 4242 7c40 4000 003c 4242 524a 3c00 007c 4242 7c44 4200 003c 403c 0242 3c00
	00fe 1010 1010 1000 0042 4242 4242 3c00 0042 4242 4224 1800 0042 4242 5a66 4200
	0042 2418 1824 4200 0082 4428 1010 1000 007e 0408 1020 7e00 000c 0808 0808 0c00
	0040 2010 0804 0200 0018 0808 0808 1800 0008 1422 0000 0000 0000 0000 0000 7e00
	0008 0400 0000 0000 0000 1c02 1e22 1e00 0020 203c 2222 3c00 0000 1e20 2020 1e00
	0002 021e 2222 1e00 0000 1c22 3c20 1e00 000c 101c 1010 1000 0000 1c22 221e 021c
	0020 202c 3222 2200 0008 0018 0808 0400 0008 0008 0808 4830 0020 2428 3028 2400
	0010 1010 1010 0c00 0000 6854 5454 5400 0000 5864 4444 4400 0000 3844 4444 3800
	0000 7844 4478 4040 0000 3c44 443c 0406 0000 2c30 2020 2000 0000 3840 3804 7800
	0010 103c 1010 0c00 0000 4444 4444 3800 0000 4444 2828 1000 0000 4454 5454 2800
	0000 4428 1028 4400 0000 4444 443c 0438 0000 7c08 1020 7c00 000c 0810 1008 0c00
	0008 0808 0808 0800 0030 1008 0810 3000 0000 0032 4c00 0000 3c42 99a1 a199 423c 
(  uxnasm projects/examples/demos/font.tal bin/font.rom && uxnemu bin/font.rom )

%+  { ADD } %-   { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%RTN { JMP2r }
%TOS { #00 SWP }

%GET-WIDTH { TOS ;font-data ++ LDA }
%GET-GLYPH { TOS #50 SFT2 ;font-data/glyphs ++ }

%AUTO-NONE { #00 .Screen/auto DEO }
%AUTO-X { #01 .Screen/auto DEO }
%AUTO-Y { #02 .Screen/auto DEO }
%AUTO-ADDR { #04 .Screen/auto DEO }
%AUTO-X-ADDR { #05 .Screen/auto DEO }
%AUTO-Y-ADDR { #06 .Screen/auto DEO }

( devices )

|00 @System  &vector $2 &pad     $6 &r      $2 &g     $2 &b      $2
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|a0 @File    &vector $2 &success $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2

( variables )

|0000

( init )

|0100 ( -> )

	( theme ) 
	#0fa7 .System/r DEO2 
	#0fa7 .System/g DEO2 
	#0fa7 .System/b DEO2

	( load font )
	#4900 .File/length DEO2
	;font-path-large .File/name DEO2
	;font-data .File/read DEO2
		( draw label )
		#0020 #0020 ;title #01 ;draw-uf3 JSR2

	( load font )
	#2100 .File/length DEO2
	;font-path-medium .File/name DEO2
	;font-data .File/read DEO2
		( draw label )
		#0020 #0048 ;body #02 ;draw-uf2 JSR2

	( load font )
	#0900 .File/length DEO2
	;font-path-small .File/name DEO2
	;font-data .File/read DEO2
		( draw label )
		#0030 #00b8 ;footer #03 ;draw-uf1 JSR2
	
BRK

@draw-uf1 ( x* y* text* color -- )
	
	STH 
	SWP2 .Screen/y DEO2
	SWP2 DUP2 .Screen/x DEO2 SWP2
	&loop
		LDAk 
		DUP #0a ! ,&no-linebreak JCN
			( move down ) STH OVR2 .Screen/x DEO2 STHr
			( incr y ) .Screen/y DEI2 #0010 ++ .Screen/y DEO2 
			POP ,&continue JMP &no-linebreak
		( get addr ) STHk TOS #30 SFT2 ;font-data #0100 ++ ++ .Screen/addr DEO2
		( get width ) STHr TOS ;font-data ++ LDA TOS
		( draw ) STHkr .Screen/sprite DEO
		( use width ) .Screen/x DEI2 ++ .Screen/x DEO2
		&continue
		( incr addr ) INC2
		LDAk ,&loop JCN
	POP2 POP2 POPr

RTN

@draw-uf2 ( x* y* text* color -- )
	
	STH 
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	AUTO-Y-ADDR
	&while
		LDAk #0a ! ,&no-linebreak JCN
			( reset ) #0020 .Screen/x DEO2
			( down ) .Screen/y DEI2k #0010 ++ ROT DEO2 
			,&continue JMP &no-linebreak
		LDAk STHkr ,&sprite JSR
		&continue
		INC2 LDAk ,&while JCN
	POP2 POPr
	AUTO-NONE
	RTN

	&sprite ( char color -- )
		.Screen/x DEI2 STH2 
		.Screen/y DEI2 STH2 
		( glyph ) OVR GET-GLYPH .Screen/addr DEO2
		DUP .Screen/sprite DEOk DEO 
		STH2kr .Screen/y DEO2
		SWP GET-WIDTH 
		DUP #09 < ,&narrow JCN
			.Screen/x DEI2k #0008 ++ ROT DEO2
			OVR .Screen/sprite DEOk DEO 
			STH2kr .Screen/y DEO2
			&narrow
		POP2r
		( width ) TOS STH2r ++ .Screen/x DEO2
		POP
	RTN

RTN

@draw-uf3 ( x* y* text* color -- )
		
	STH 
	SWP2 .Screen/y DEO2
	SWP2 DUP2 .Screen/x DEO2 SWP2
	&loop
		LDAk 
		DUP #0a ! ,&no-linebreak JCN
			( move down ) OVR2 .Screen/x DEO2
			( incr y ) .Screen/y DEI2 #0010 ++ .Screen/y DEO2 
			POP ,&continue JMP &no-linebreak
		STHkr ,&sprite JSR
		&continue
		( incr addr ) INC2
		LDAk ,&loop JCN
	POP2 POP2 POPr
	RTN

	&sprite ( char color -- )
		STH 
		( get addr ) DUP TOS #30 SFT2 #30 SFT2k ROT POP ADD2 ;font-data #0100 ++ ++ .Screen/addr DEO2
		( get width ) TOS ;font-data ++ LDA TOS
		#0300
		&ver
			#0300
			&hor
				STHkr .Screen/sprite DEO
				.Screen/x DEI2 #0008 ++ .Screen/x DEO2 
				.Screen/addr DEI2 #0008 ++ .Screen/addr DEO2
				INC GTHk ,&hor JCN
			POP2
			.Screen/y DEI2 #0008 ++ .Screen/y DEO2 
			.Screen/x DEI2 #0018 -- .Screen/x DEO2 
			INC GTHk ,&ver JCN
		POP2
		.Screen/y DEI2 #0018 -- .Screen/y DEO2 
		( use width ) .Screen/x DEI2 ++ .Screen/x DEO2
		POPr
	RTN

RTN

@title
	5468 6520 466f 6720 486f 726e $1

@body 
	4927 6c6c 206d 616b 6520 6120 736f 756e
	6420 7468 6174 2773 2073 6f20 616c 6f6e
	6520 0a74 6861 7420 6e6f 206f 6e65 2063
	616e 206d 6973 7320 6974 2c20 7468 6174
	2077 686f 6576 6572 200a 6865 6172 7320
	6974 2077 696c 6c20 7765 6570 2069 6e20
	7468 6569 7220 736f 756c 732c 200a 616e
	6420 6865 6172 7468 7320 7769 6c6c 2073
	6565 6d20 7761 726d 6572 2c20 0a61 6e64
	2062 6569 6e67 2069 6e73 6964 6520 7769
	6c6c 2073 6565 6d20 6265 7474 6572 200a
	746f 2061 6c6c 2077 686f 2068 6561 7220
	6974 2069 6e20 7468 6520 6469 7374 616e
	7420 746f 776e 732e 20 $1

@footer
	2d20 4279 2052 6179 2042 7261 6462 7572 
	79 $1

@font-path-large  
	"projects/fonts/geneva24.uf3 $1
@font-path-medium 
	"projects/fonts/venice14.uf2 $1
@font-path-small  
	"projects/fonts/atari8.uf1 $1

@font-data $100 &glyphs( GUI Labels )

%RTN { JMP2r }
%2// { #01 SFT2 }
%8** { #30 SFT2 }

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]

( variables )

|0000

@label [ &x $2 &y $2 &color $1 &addr $2 ]
@center [ &x $2 &y $2 ]

( program )

|0100
	
	( theme ) 
	#0f0f .System/r DEO2 
	#0fff .System/g DEO2 
	#0ff0 .System/b DEO2
	
	( find screen center )
	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	( draw ver line )
	.center/x LDZ2 .Screen/x DEO2 #0000 .Screen/y DEO2
	&draw-ver
		( draw ) #02 .Screen/pixel DEO
		( incr ) .Screen/y DEI2 #0002 ADD2 .Screen/y DEO2
		.Screen/y DEI2 .Screen/height DEI2 LTH2 ,&draw-ver JCN

	.center/x LDZ2 .center/y LDZ2 #0010 SUB2 #0c ;text1 ;draw-label-left JSR2
	.center/x LDZ2 .center/y LDZ2 #0c ;text2 ;draw-label-middle JSR2
	.center/x LDZ2 .center/y LDZ2 #0010 ADD2 #0c ;text3 ;draw-label-right JSR2
	.center/x LDZ2 .center/y LDZ2 #0020 ADD2 #0c ;text4 ;draw-label-middle JSR2
	.center/x LDZ2 .center/y LDZ2 #0030 ADD2 #0c ;text5 ;draw-label-middle JSR2

RTN

@draw-label-left ( x y color addr -- )
	
	( load ) .label/addr STZ2 .label/color STZ .Screen/y DEO2 .Screen/x DEO2
	.label/addr LDZ2
	&loop
		( draw ) LDAk #00 SWP 8** ;font ADD2 .Screen/addr DEO2 .label/color LDZ .Screen/sprite DEO
		( incr ) INC2
		( incr ) .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
		LDAk ,&loop JCN
	POP2

RTN

@draw-label-middle ( x y color addr -- )
	
	( load ) .label/addr STZ2 .label/color STZ .Screen/y DEO2
	( align ) .label/addr LDZ2 ;get-text-length JSR2 8** 2// SUB2 .Screen/x DEO2
	.label/addr LDZ2
	&loop
		( draw ) LDAk #00 SWP 8** ;font ADD2 .Screen/addr DEO2 .label/color LDZ .Screen/sprite DEO
		( incr ) INC2
		( incr ) .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
		LDAk ,&loop JCN
	POP2

RTN

@draw-label-right ( x y color addr -- )
	
	( load ) .label/addr STZ2 .label/color STZ .Screen/y DEO2
	( align ) .label/addr LDZ2 ;get-text-length JSR2 8** SUB2 .Screen/x DEO2
	.label/addr LDZ2
	&loop
		( draw ) LDAk #00 SWP 8** ;font ADD2 .Screen/addr DEO2 .label/color LDZ .Screen/sprite DEO
		( incr ) INC2
		( incr ) .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
		LDAk ,&loop JCN
	POP2

RTN

@get-text-length ( label* -- length )
	
	#0000 ( counter )
	&loop
		( incr ) INC2 OVR2 OVR2 ADD2
		LDA ,&loop JCN
	NIP2

RTN

@font ( spectrum-zx font )
[
	0000 0000 0000 0000 0000 2400 7e3c 0000 0000 2400 3c42 0000 0000 6c7c 7c38 1000
	0010 387c 7c38 1000 0038 387c 6c10 3800 0010 387c 7c10 3800 0000 0018 1800 0000
	007e 4242 4242 7e00 0000 1824 2418 0000 0018 2442 4224 1800 001e 063a 4a48 3000
	0038 446c 107c 1000 000c 0808 0838 3800 003e 2222 2266 6600 0000 0822 0022 0800
	0000 1018 1c18 1000 0000 0818 3818 0800 0008 1c00 001c 0800 0028 2828 2800 2800
	003e 4a4a 3a0a 0a00 000c 3046 620c 3000 0000 0000 0000 ffff 0010 3800 3810 0038
	0008 1c2a 0808 0800 0008 0808 2a1c 0800 0000 0804 7e04 0800 0000 1020 7e20 1000
	0000 4040 7e00 0000 0000 0024 6624 0000 0000 1038 7c00 0000 0000 007c 3810 0000
	0000 0000 0000 0000 0008 0808 0800 0800 0014 1400 0000 0000 0024 7e24 247e 2400
	0008 1e28 1c0a 3c08 0042 0408 1020 4200 0030 4832 4c44 3a00 0008 1000 0000 0000
	0004 0808 0808 0400 0010 0808 0808 1000 0000 1408 3e08 1400 0000 0808 3e08 0800
	0000 0000 0008 0810 0000 0000 3c00 0000 0000 0000 0000 0800 0000 0204 0810 2000
	003c 464a 5262 3c00 0018 2808 0808 3e00 003c 4202 3c40 7e00 003c 421c 0242 3c00
	0008 1828 487e 0800 007e 407c 0242 3c00 003c 407c 4242 3c00 007e 0204 0810 1000
	003c 423c 4242 3c00 003c 4242 3e02 3c00 0000 0008 0000 0800 0000 0800 0008 0810
	0000 0810 2010 0800 0000 003e 003e 0000 0000 1008 0408 1000 003c 4202 0c00 0800
	003c 425a 5442 3c00 0018 2442 7e42 4200 007c 427c 4242 7c00 003c 4240 4042 3c00
	0078 4442 4244 7800 007e 407c 4040 7e00 003e 4040 7c40 4000 003c 4240 4e42 3c00
	0042 427e 4242 4200 003e 0808 0808 3e00 0002 0202 4242 3c00 0044 4870 4844 4200
	0040 4040 4040 7e00 0042 665a 4242 4200 0042 6252 4a46 4200 003c 4242 4242 3c00
	007c 4242 7c40 4000 003c 4242 524a 3c00 007c 4242 7c44 4200 003c 403c 0242 3c00
	00fe 1010 1010 1000 0042 4242 4242 3c00 0042 4242 4224 1800 0042 4242 5a66 4200
	0042 2418 1824 4200 0082 4428 1010 1000 007e 0408 1020 7e00 000c 0808 0808 0c00
	0040 2010 0804 0200 0018 0808 0808 1800 0008 1422 0000 0000 0000 0000 0000 7e00
	0008 0400 0000 0000 0000 1c02 1e22 1e00 0020 203c 2222 3c00 0000 1e20 2020 1e00
	0002 021e 2222 1e00 0000 1c22 3c20 1e00 000c 101c 1010 1000 0000 1c22 221e 021c
	0020 202c 3222 2200 0008 0018 0808 0400 0008 0008 0808 4830 0020 2428 3028 2400
	0010 1010 1010 0c00 0000 6854 5454 5400 0000 5864 4444 4400 0000 3844 4444 3800
	0000 7844 4478 4040 0000 3c44 443c 0406 0000 2c30 2020 2000 0000 3840 3804 7800
	0010 103c 1010 0c00 0000 4444 4444 3800 0000 4444 2828 1000 0000 4454 5454 2800
	0000 4428 1028 4400 0000 4444 443c 0438 0000 7c08 1020 7c00 000c 0810 1008 0c00
	0008 0808 0808 0800 0030 1008 0810 3000 0000 0032 4c00 0000 3c42 99a1 a199 423c
]

@text1 [ "Left 20 "Aligned 00 ]
@text2 [ "Middle 20 "Aligned 00 ]
@text3 [ "Right 20 "Aligned 00 ]
@text4 [ "even 00 ]
@text5 [ "odd 00 ]( simple Dev/File reading example )

( devices )

|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|a0 @File   [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( variables )

|0000

( program )

|0100 ( -> )
	;try-load JSR2
	BRK

@try-load ( -- )
	( load contents from file )
	#1000 .File/length DEO2
	;filename .File/name DEO2
	;contents .File/read DEO2

	.File/success DEI2 ORA ,&success JCN
	( failed to read: bright yellow background )
	#f0f7 .System/r DEO2
	#f0f7 .System/g DEO2
	#00f7 .System/b DEO2
	JMP2r

	&success
	( read successful: dark blue background, show contents )
	#00f7 .System/r DEO2
	#00f7 .System/g DEO2
	#40f7 .System/b DEO2
	;contents DUP2 .File/success DEI2 ADD2 SWP2 ;draw JSR2
	JMP2r

@draw ( end-ptr* ptr* -- )
	EQU2k ,&end JCN
	LDAk
	DUP #0a EQU ,&linefeed JCN
	#0005 SFT2 ;font ADD2
	.Screen/addr DEO2
	#09 .Screen/sprite DEO
	.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
	&next
	INC2
	,draw JMP

	&linefeed
	POP
	#0000 .Screen/x DEO2
	.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
	,&next JMP

	&end
	POP2 POP2
	JMP2r

@get-x-advance ( font-char-addr* -- advance* )
	( Save two 00 bytes for later use )
	#0000 SWP2
	( First, load the eight bytes that make up the character )
	LDA2k SWP2 #0002 ADD2
	LDA2k SWP2 #0002 ADD2
	LDA2k SWP2 #0002 ADD2
	LDA2
	( OR all the bytes together, so we know which columns contain filled pixels )
	ORA2 ORA2 ORA2 ORA
	( Find the lowest set bit (using one of the 00 bytes at the top, but not consuming it) )
	SUBk AND
	( Convert the nine possible values (00-80) into an offset into the magic table (00-08). )
	( They get jumbled up with these two operations, but each possible value remains unique )
	#a3 MUL #16 DIV
	( Load the byte from the magic table, return a short (consuming/returning the 00 bytes at the top) )
	;&magic ADD2 LDA
	JMP2r
	( The magic table performs the last bit of arithmetic we want:
	  * the advance in x should be one more than the number of columns with filled pixels,
	  * with a maximum of 8, and
	  * a minimum of 3. )
	&magic
		03 ( lowest set bit is 00, 0 columns wide )
		06 ( lowest set bit is 08, 5 columns wide )
		05 ( lowest set bit is 10, 4 columns wide )
		08 ( lowest set bit is 02, 7 columns wide )
		04 ( lowest set bit is 20, 3 columns wide )
		03 ( lowest set bit is 80, 1 column wide )
		07 ( lowest set bit is 04, 6 columns wide )
		08 ( lowest set bit is 01, 8 columns wide )
		03 ( lowest set bit is 40, 2 columns wide )

@font ( spectrum-zx font )
[
	0000 0000 0000 0000 0000 2400 7e3c 0000 0000 2400 3c42 0000 0000 6c7c 7c38 1000
	0010 387c 7c38 1000 0038 387c 6c10 3800 0010 387c 7c10 3800 0000 0018 1800 0000
	007e 4242 4242 7e00 0000 1824 2418 0000 0018 2442 4224 1800 001e 063a 4a48 3000
	0038 446c 107c 1000 000c 0808 0838 3800 003e 2222 2266 6600 0000 0822 0022 0800
	0000 1018 1c18 1000 0000 0818 3818 0800 0008 1c00 001c 0800 0028 2828 2800 2800
	003e 4a4a 3a0a 0a00 000c 3046 620c 3000 0000 0000 0000 ffff 0010 3800 3810 0038
	0008 1c2a 0808 0800 0008 0808 2a1c 0800 0000 0804 7e04 0800 0000 1020 7e20 1000
	0000 4040 7e00 0000 0000 0024 6624 0000 0000 1038 7c00 0000 0000 007c 3810 0000
	0000 0000 0000 0000 0008 0808 0800 0800 0014 1400 0000 0000 0024 7e24 247e 2400
	0008 1e28 1c0a 3c08 0042 0408 1020 4200 0030 4832 4c44 3a00 0008 1000 0000 0000
	0004 0808 0808 0400 0010 0808 0808 1000 0000 1408 3e08 1400 0000 0808 3e08 0800
	0000 0000 0008 0810 0000 0000 3c00 0000 0000 0000 0000 0800 0000 0204 0810 2000
	003c 464a 5262 3c00 0018 2808 0808 3e00 003c 4202 3c40 7e00 003c 421c 0242 3c00
	0008 1828 487e 0800 007e 407c 0242 3c00 003c 407c 4242 3c00 007e 0204 0810 1000
	003c 423c 4242 3c00 003c 4242 3e02 3c00 0000 0008 0000 0800 0000 0800 0008 0810
	0000 0810 2010 0800 0000 003e 003e 0000 0000 1008 0408 1000 003c 4202 0c00 0800
	003c 425a 5442 3c00 0018 2442 7e42 4200 007c 427c 4242 7c00 003c 4240 4042 3c00
	0078 4442 4244 7800 007e 407c 4040 7e00 003e 4040 7c40 4000 003c 4240 4e42 3c00
	0042 427e 4242 4200 003e 0808 0808 3e00 0002 0202 4242 3c00 0044 4870 4844 4200
	0040 4040 4040 7e00 0042 665a 4242 4200 0042 6252 4a46 4200 003c 4242 4242 3c00
	007c 4242 7c40 4000 003c 4242 524a 3c00 007c 4242 7c44 4200 003c 403c 0242 3c00
	00fe 1010 1010 1000 0042 4242 4242 3c00 0042 4242 4224 1800 0042 4242 5a66 4200
	0042 2418 1824 4200 0082 4428 1010 1000 007e 0408 1020 7e00 000c 0808 0808 0c00
	0040 2010 0804 0200 0018 0808 0808 1800 0008 1422 0000 0000 0000 0000 0000 7e00
	0008 0400 0000 0000 0000 1c02 1e22 1e00 0020 203c 2222 3c00 0000 1e20 2020 1e00
	0002 021e 2222 1e00 0000 1c22 3c20 1e00 000c 101c 1010 1000 0000 1c22 221e 021c
	0020 202c 3222 2200 0008 0018 0808 0400 0008 0008 0808 4830 0020 2428 3028 2400
	0010 1010 1010 0c00 0000 6854 5454 5400 0000 5864 4444 4400 0000 3844 4444 3800
	0000 7844 4478 4040 0000 3c44 443c 0406 0000 2c30 2020 2000 0000 3840 3804 7800
	0010 103c 1010 0c00 0000 4444 4444 3800 0000 4444 2828 1000 0000 4454 5454 2800
	0000 4428 1028 4400 0000 4444 443c 0438 0000 7c08 1020 7c00 000c 0810 1008 0c00
	0008 0808 0808 0800 0030 1008 0810 3000 0000 0032 4c00 0000 3c42 99a1 a199 423c
]

@filename "hello.txt 00
@contents

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r $2 &g $2 &b $2   &debug $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|a0 @File       [ &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( vectors )

|0100 @reset
	(
		Set the log level for helping to debug stuff.
		Its value is the bitwise OR of all the following output types:
			#01 prints the number of lines in the source code,
			#04 dumps all defined labels at end, and
			#08 prints the heap usage.
	)
	#0d ;asma/log-level STA

	;asma-heap ;heap STA2

	(
		Assemble the source code into an output ROM file.

		If all you want is to use asma.tal to assemble files, insert a BRK
		after this statement.
	)
	;&source-file ;&dest-file ;asma-assemble-file JSR2

	(
		If an error has occurred, BRK here, otherwise continue. (The error
		message will already have been printed to the Console in
		asma-assemble-file.)
	)
	;asma/error LDA2 #0000 EQU2 JMP BRK

	(
		Load the output ROM over the currently running program, almost as if
		we loaded the ROM with uxnemu directly!

		It's not a totally pristine environment, as File/read doesn't zero out
		memory beyond the end of the file. So if the assembled program assumes
		that all memory above it is zero, it may misbehave.

		Asma itself doesn't use the zero page, but this example code writes a
		DEO2 instruction to 0x00ff. In order to execute File/read and have the
		CPU continue at memory location 0x0100, we write the final DEO2
		instruction there and jump there as our final act.

		Just in case the assembled code is zero-length (which can occur when
		assembling an empty source file), we write a BRK to the reset vector so
		that will prevent an infinite loop.
	)
	;&dest-file .File/name DEO2
	#ff00 .File/length DEO2
	#0100 .File/read
	LIT DEO2 #00ff STA
	LIT BRK #0100 STA
	#00ff JMP2

	&source-file
		"projects/examples/demos/piano.tal 00
	&dest-file
		"bin/asma-boot.rom 00

~projects/library/asma.tal

(
	Heap, a large temporary area for keeping track of labels. More complex
	programs need more of this space. If there's insufficient space then the
	assembly process will fail, but having extra space above what the most
	complex program needs provides no benefit.

	This heap, and the buffers below, are free to be used to hold temporary
	data between assembly runs, and do not need to be initialized with any
	particular contents to use the assembler.
)

@asma-heap

|e000 &end

(
	Buffer for use with loading source code.
	The minimum size is the length of the longest token plus one, which is
	0x21 to keep the same capability of the C assembler.
	Larger sizes are more efficient, provided there is enough
	heap space to keep track of all the labels.
)

@asma-read-buffer

|f800 &end

(
	Buffer for use with writing output.
	The minimum size is 1, and larger sizes are more efficient.
)

@asma-write-buffer

|ffff &end

( dev/console )

%HALT   { #010f DEO }
%EMIT   { #18 DEO }

( init )

|0100 ( -> )

	;hello-word 
	&while
		( send ) LDAk EMIT
		INC2 LDAk ,&while JCN
	POP2
	( stop ) HALT

BRK

@hello-word "Hello 20 "Uxn! $1( hexes

	A small utility that prints incoming console messages as hex values. )

%RTN { JMP2r }

|10 @Console [ &vector $2 &read $1 &pad $5 &write $1 ]

( init )

|0100 ( -> )
	
	;on-message .Console/vector DEO2

BRK

@on-message ( -> )
	
	.Console/read DEI ,print-hex JSR

BRK

@print-hex ( value -- )
	
	STHk #04 SFT ,&parse JSR .Console/write DEO
	STHr #0f AND ,&parse JSR .Console/write DEO
	RTN
	&parse ( value -- char )
		DUP #09 GTH ,&above JCN #30 ADD RTN &above #09 SUB #60 ADD RTN

RTN
(
	100r animated logo splash screen
	by Andrew Alderwick, 2021
	based on artwork by Hundred Rabbits
)

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr $2 &pixel  $1 &sprite $1 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

( program )

|0100 @Reset ( -> )
	( seed prng (must be nonzero) )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour   DEI #c0 SFT2 EOR2 ;prng/x STA2
	#00 .DateTime/hour   DEI #04 SFT2
	#00 .DateTime/day    DEI #10 SFT2 EOR2
	#00 .DateTime/month  DEI #60 SFT2 EOR2
	    .DateTime/year  DEI2 #a0 SFT2 EOR2 ;prng/y STA2
	;prng/x LDA2 ;prng/y LDA2 EOR2

	;rabbits STH2 #0f05 &loop-x
		#0f05 &loop-y
			ROTk SWP STH2kr STA2 POP
			INC2r INC2r
			INC
			GTHk ,&loop-y JCN
			POP2
		INC
		GTHk ,&loop-x JCN
		POP2 POP2r
	( fall through )

@repeat
	;init-occupancy JSR2
	#00 ;precalc-frame STA
	;precalculate-vector .Screen/vector DEO2
	BRK

@init-occupancy ( -- )
	#1400 &loop-y
		#1400 &loop-x
			ROTk #00 ;set-occupied JSR2 POP
			INC
			GTHk ,&loop-x JCN
			POP2
		INC
		GTHk ,&loop-y JCN
		POP2
	;rabbits
	DUP2 #00c8 ADD2 SWP2 &loop-rabbits
		LDA2k #01 ;set-occupied JSR2
		INC2 INC2
		GTH2k ,&loop-rabbits JCN
		POP2 POP2
	JMP2r

@precalculate-vector ( -> )
	,precalculate JSR BRK

@precalculate ( -- )
	;rabbits #00c8 OVR ,precalc-frame LDR MUL2 ADD2 ( first rabbit address )
	DUP2 #00c8 ADD2 SWP2 &loop-rabbits
		DUP2 ,move-rabbit JSR
		INC2 INC2
		GTH2k ,&loop-rabbits JCN
		POP2 POP2
	,precalc-frame LDR INC DUP ,precalc-frame STR
		#05 EQU JMP JMP2r
	;display-init JSR2
	;display .Screen/vector DEO2
	JMP2r

@precalc-frame $1

@set-occupied ( x y value -- )
	STH
	#00 SWP #0014 MUL2 ( x yoffset* / value )
	ROT #00 SWP ADD2 ( offset* / value )
	;occupied ADD2 STH2 STAr
	JMP2r

@move-rabbit ( addr* -- )
	STH2k LDA2 ( x y / addr* )
	DUP2 #00 ,set-occupied JSR
	;&possible-moves ( x y possible* / addr* )
	OVR2 #01   SUB  ,&check-move JSR ( up )
	OVR2 #01   ADD  ,&check-move JSR ( down )
	OVR2 #0100 SUB2 ,&check-move JSR ( left )
	OVR2 #0100 ADD2 ,&check-move JSR ( right )
	;&possible-moves SUB2 ( x y num-possible-times-2* / addr* )
	DUP ,&can-move JCN
	POP2
	&write ( x y / addr* )
	DUP2 #01 ,set-occupied JSR
	STH2r #00c8 ADD2 STA2
	JMP2r

	&can-move ( x y num-possible-times-2* / addr* )
	NIP2 ( num-possible-times-2* / addr* )
	,prng JSR SWP2 DIV2k MUL2 SUB2 #fe AND ( chosen-move* / addr* )
	;&possible-moves ADD2 LDA2
	,&write JMP

	&check-move ( possible* new-x new-y -- possible'* )
	DUP2 ,get-occupied JSR ,&blocked JCN
	OVR2r LIT2r 00c8 SUB2r ( possible* new-x new-y / previous-frame-addr* )
		&check-history-loop
		;rabbits INC2 STH2kr GTH2 ,&history-okay JCN
		DUP2 STH2kr LDA2 EQU2 ,&history-clash JCN
		LIT2r 00c8 SUB2r
		,&check-history-loop JMP
	&history-okay
	POP2r
	OVR2 STA2 INC2 INC2
	JMP2r
	&history-clash ( possible* new-x new-y / previous-frame-addr* )
	POP2r
	&blocked ( possible* new-x new-y )
	POP2
	JMP2r

	&possible-moves $10

@get-occupied ( x y -- value )
	#00 SWP #0014 MUL2 ( x yoffset* )
	ROT #00 SWP ADD2 ( offset* )
	;occupied ADD2 LDA
	JMP2r

@prng ( -- number* )
	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP
	JMP2r

@display-init ( -- )
	.Screen/width  DEI2 #01 SFT2 #0050 SUB2 ;display-rabbit/xoffset STA2
	.Screen/height DEI2 #01 SFT2 #0050 SUB2 ;display-rabbit/yoffset STA2
	;rabbit-sprite .Screen/addr DEO2
	JMP2r

@display-rabbit ( color n counter -- )
	OVR LTHk ,&finish JCN
	SUB ( color n timeline )
	DUP #63 GTH ,&start JCN
	#17 DIVk STHk MUL SUB ( color n stage-timeline / frame )
	DUP #07 GTH ,&static JCN
	( rabbit is in-between two frames )
	#08 OVR SUB ,&from-weight STR
	,&to-weight STR ( color n / frame )
	#00 SWP #10 SFT2 ;rabbits ADD2 #00c8 #00 STHr MUL2 ADD2 ( color from-addr* )
	LDA2k STH2 #00c8 ADD2 LDA2
	&draw ( color to-x to-y / from-x from-y )
	STHr ,&mix JSR LIT2 &yoffset $2 ADD2 .Screen/y DEO2
	STHr ,&mix JSR LIT2 &xoffset $2 ADD2 .Screen/x DEO2
	.Screen/sprite DEO
	JMP2r

	&mix ( to-z from-z -- mixed* )
	    #00 SWP LIT2 00 &from-weight 00 MUL2 ( to-n from-mixed* )
	ROT #00 SWP LIT2 00 &to-weight   00 MUL2 ADD2
	JMP2r

	&finish ( color n counter n )
	POP
	LITr ff ,&static JMP
	&start ( color n counter )
	LITr 04
	&static ( color n counter / frame )
	INCr
	POP
	#00 SWP #10 SFT2 ;rabbits ADD2 #00c8 #00 STHr MUL2 ADD2
	LDA2 STH2k
	,&draw JMP

@display-counter $1

@display ( -> )
	,display-counter LDR #01 SUB DUP ,display-counter STR
	DUP #f0 LTH ,&skip-palette JCN
	#ff OVR SUB #00
		DUP2 .System/r DEO2
		DUP2 .System/g DEO2
		     .System/b DEO2
	&skip-palette
	INCk #0000 &clear-loop
		ROTk ;display-rabbit JSR2
		INC
		DUP #64 LTH ,&clear-loop JCN
		POP2 POP
	#0500 &draw-loop
		ROTk ;display-rabbit JSR2
		INC
		DUP #64 LTH ,&draw-loop JCN
	POP2
	,&no-finish JCN
	;sunset .Screen/vector DEO2
	&no-finish
	BRK

@sunset ( -> )
	;display-counter LDA #02 SUB DUP ;display-counter STA
	DUP #1f GTH ,&skip-palette JCN
	DUP #01 SFT #00
		DUP2 .System/r DEO2
		DUP2 .System/g DEO2
		     .System/b DEO2
	#6400 &draw-loop
		#05 OVR #00 ;display-rabbit JSR2
		INC
		GTHk ,&draw-loop JCN
		POP2
	&skip-palette
	,&no-finish JCN
	;repeat JMP2
	&no-finish
	BRK

@rabbit-sprite 003c 7e7e 7e7e 3c00

@occupied $190

@rabbits

( Project by Alex Schroeder - https://alexschroeder.ch )

%RTN { JMP2r }
%INCR { SWP INC SWP }
%CELL { #1000 }
%NEXT { #2000 }

( devices )

|00 @System     [ &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr $2 &pixel $1 &sprite $1 ]
|b0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 ]

|0000

( program )

@seed [ &x $1 &w $2 &s $2 ]

|0100 ( -> )

	( theme ) 
	#2aac .System/r DEO2 
	#269b .System/g DEO2 
	#378d .System/b DEO2

	;seed-line JSR2

	( run for a few generations ) 
	#00 #ff
	&loop
		OVR #00 SWP ;print-line JSR2
		;compute-next JSR2
		;copy-next JSR2
		( incr ) INCR
		( loop ) LTHk ,&loop JCN
	POP2

BRK

@print-line ( y -- )

	( set ) .Screen/y DEO2
	( loop through cells ) 
	#00 #ff
	&loop
		( copy ) OVR #00 SWP DUP2
		( pos  ) .Screen/x DEO2
		( addr ) CELL ADD2
		( draw ) LDA .Screen/pixel DEO
		( incr ) INCR
		( loop ) LTHk ,&loop JCN
	POP2

RTN

@compute-next ( -- )

	( loop through 62 cells ) 
	#01 #fe
	&loop
		OVR DUP DUP ( three copies of the counter )
		#01 SUB #00 SWP CELL ADD2 LDA
		SWP
		INC #00 SWP CELL ADD2 LDA
		( the cell dies if the neighbors are either both dead or both alive, i.e. Rule 90 )
		NEQ
		( one copy of the counter and the life value )
		SWP #00 SWP NEXT ADD2 STA
		( incr ) INCR
		( loop ) LTHk ,&loop JCN
	POP2

RTN

@copy-next ( -- )

	( loop through cells ) 
	#00 #ff
	&loop
		OVR DUP ( two copies of the counter )
		#00 SWP NEXT ADD2 LDA ( one copy of the counter and the value )
		SWP #00 SWP CELL ADD2 STA
		( incr ) INCR
		( loop ) LTHk ,&loop JCN
	POP2

RTN

@seed-line ( -- )

	.DateTime/second DEI .seed/x STZ 
	#0000 .seed/w STZ2 
	#e2a9 .seed/s STZ2
	( loop through cells ) 
	#01 #fe
	&loop
		OVR ( one copy of the counter )
		;rand JSR2
		#10 AND ( pick a bit )
		SWP #00 SWP CELL ADD2 STA
		( incr ) INCR
		( loop ) LTHk ,&loop JCN
	POP2

RTN

( https://en.wikipedia.org/wiki/Middle-square_method )

@rand ( -- 1 )

	.seed/x LDZ #00 SWP DUP2 MUL2
	.seed/w LDZ2 .seed/s LDZ2 ADD2
	DUP2 .seed/w STZ2
	ADD2
	#04 SFT SWP #40 SFT ADD
	DUP .seed/x STZ

RTN